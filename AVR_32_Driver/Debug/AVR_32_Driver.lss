
AVR_32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000142c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  0000142c  000014c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000de  008000de  0000153e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000153e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  0000156e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004681  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d74  00000000  00000000  00005e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fbf  00000000  00000000  00006b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000063c  00000000  00000000  00007b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cb7  00000000  00000000  00008188  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e4c  00000000  00000000  00008e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  0000ac8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	_delay_ms(100);
	Clear_LCD();
	Send_String_LCD("3+?=5");
}
void Game_Playing_System()
{
       0:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__ctors_end>
       4:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__vector_1>
	do 
	{
		if (counter1>1000)
		{
			Flag1=1;
       8:	0c 94 16 08 	jmp	0x102c	; 0x102c <__vector_2>
       c:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__vector_3>
		}
		keypad_Read_Value=keypad_Read(keypad_app);
		_delay_ms(100);
	} while (keypad_Read_Value ==Keypad_Not_Pressed&&Flag1 ==0);
      10:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__vector_4>
      14:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_5>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
}
void Game_Playing_System()
{
	do 
	{
		if (counter1>1000)
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
		{
			Flag1=1;
      28:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__vector_10>
      2c:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_11>
		}
		keypad_Read_Value=keypad_Read(keypad_app);
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 46 08 	jmp	0x108c	; 0x108c <__vector_16>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	68 09       	sbc	r22, r8
      56:	65 09       	sbc	r22, r5
      58:	62 09       	sbc	r22, r2
      5a:	5f 09       	sbc	r21, r15
      5c:	5c 09       	sbc	r21, r12
      5e:	59 09       	sbc	r21, r9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      60:	56 09       	sbc	r21, r6
      62:	54 09       	sbc	r21, r4
      64:	c6 08       	sbc	r12, r6
      66:	c6 08       	sbc	r12, r6
      68:	4e 09       	sbc	r20, r14
      6a:	4c 09       	sbc	r20, r12
      6c:	49 09       	sbc	r20, r9
      6e:	46 09       	sbc	r20, r6
      70:	e1 08       	sbc	r14, r1
		_delay_ms(100);
	} while (keypad_Read_Value ==Keypad_Not_Pressed&&Flag1 ==0);
      72:	43 09       	sbc	r20, r3
      74:	e1 08       	sbc	r14, r1
      76:	40 09       	sbc	r20, r0
      78:	3d 09       	sbc	r19, r13
	{
		Clear_LCD();
		Move_Curser_LCD(2,5);
		Send_String_LCD("Time is Over");
	}
	else if (keypad_Read_Value == '2')
      7a:	3a 09       	sbc	r19, r10
      7c:	38 09       	sbc	r19, r8
		Move_Curser_LCD(2,5);
		Send_String_LCD("Well Done");
	} 
	else
	{
		Clear_LCD();
      7e:	2e 09       	sbc	r18, r14
      80:	19 09       	sbc	r17, r9
		Move_Curser_LCD(2,5);
      82:	99 08       	sbc	r9, r9
      84:	24 09       	sbc	r18, r4
      86:	99 08       	sbc	r9, r9
      88:	24 09       	sbc	r18, r4
		Send_String_LCD("Time is Over");
      8a:	99 08       	sbc	r9, r9
      8c:	24 09       	sbc	r18, r4
	}
	
}
      8e:	02 09       	sbc	r16, r2
      90:	0e 09       	sbc	r16, r14
      92:	f4 08       	sbc	r15, r4
      94:	04 09       	sbc	r16, r4
	} 
	else
	{
		Clear_LCD();
		Move_Curser_LCD(2,5);
		Send_String_LCD("Time is Over");
      96:	f4 08       	sbc	r15, r4
      98:	04 09       	sbc	r16, r4
		Move_Curser_LCD(2,5);
		Send_String_LCD("Time is Over");
	}
	else if (keypad_Read_Value == '2')
	{
		Clear_LCD();
      9a:	f4 08       	sbc	r15, r4
      9c:	04 09       	sbc	r16, r4

0000009e <__ctors_end>:
		Move_Curser_LCD(2,5);
      9e:	11 24       	eor	r1, r1
      a0:	1f be       	out	0x3f, r1	; 63
      a2:	cf e5       	ldi	r28, 0x5F	; 95
      a4:	d8 e0       	ldi	r29, 0x08	; 8
		Send_String_LCD("Well Done");
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
		Clear_LCD();
		Move_Curser_LCD(2,5);
		Send_String_LCD("Time is Over");
	}
	
}
      aa:	10 e0       	ldi	r17, 0x00	; 0
      ac:	a0 e6       	ldi	r26, 0x60	; 96
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	ec e2       	ldi	r30, 0x2C	; 44
	} 
	else
	{
		Clear_LCD();
		Move_Curser_LCD(2,5);
		Send_String_LCD("Time is Over");
      b2:	f4 e1       	ldi	r31, 0x14	; 20
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	ae 3d       	cpi	r26, 0xDE	; 222
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	20 e0       	ldi	r18, 0x00	; 0
      c2:	ae ed       	ldi	r26, 0xDE	; 222
      c4:	b0 e0       	ldi	r27, 0x00	; 0
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a8 3f       	cpi	r26, 0xF8	; 248
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <main>
      d4:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <ISR_CTC_Timer_2>:
	}
}

void ISR_CTC_Timer_2(void)
{
	Sec_Counter++;
      dc:	80 91 e2 00 	lds	r24, 0x00E2
      e0:	8f 5f       	subi	r24, 0xFF	; 255
      e2:	80 93 e2 00 	sts	0x00E2, r24
      e6:	08 95       	ret

000000e8 <Real_Time_Init_System>:
volatile uint_8 Second_Digit=Zero_Value;
Keypad_Data keypad_app_1 = {Port_A, PIN0, PIN1, PIN2, PIN3, PIN4, PIN5,PIN6, PIN7};
uint_8 keypad_Read_Value;
void ISR_CTC_Timer_2(void);
void Real_Time_Init_System()
{
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
	TIMER_Init(counter_app_3,255);
      ec:	2f ef       	ldi	r18, 0xFF	; 255
      ee:	40 91 6a 00 	lds	r20, 0x006A
      f2:	50 91 6b 00 	lds	r21, 0x006B
      f6:	60 91 6c 00 	lds	r22, 0x006C
      fa:	70 91 6d 00 	lds	r23, 0x006D
      fe:	80 91 6e 00 	lds	r24, 0x006E
     102:	0e 94 76 08 	call	0x10ec	; 0x10ec <TIMER_Init>
	Timer2_OverFlow_Callback(&ISR_CTC_Timer_2);
     106:	8e e6       	ldi	r24, 0x6E	; 110
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 6f 08 	call	0x10de	; 0x10de <Timer2_OverFlow_Callback>
	Seven_Seg_Init(Port_D);
     10e:	80 e3       	ldi	r24, 0x30	; 48
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <Seven_Seg_Init>
	GPIO_Pin_Configuration(Port_C,PIN0,OUTPUT);
     116:	40 e0       	ldi	r20, 0x00	; 0
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	83 e3       	ldi	r24, 0x33	; 51
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_C,PIN1,OUTPUT);
     122:	40 e0       	ldi	r20, 0x00	; 0
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	83 e3       	ldi	r24, 0x33	; 51
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_C,PIN2,OUTPUT);
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	62 e0       	ldi	r22, 0x02	; 2
     132:	83 e3       	ldi	r24, 0x33	; 51
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_C,PIN3,OUTPUT);
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	63 e0       	ldi	r22, 0x03	; 3
     13e:	83 e3       	ldi	r24, 0x33	; 51
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_C,PIN4,OUTPUT);
     146:	40 e0       	ldi	r20, 0x00	; 0
     148:	64 e0       	ldi	r22, 0x04	; 4
     14a:	83 e3       	ldi	r24, 0x33	; 51
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_C,PIN5,OUTPUT);
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	65 e0       	ldi	r22, 0x05	; 5
     156:	83 e3       	ldi	r24, 0x33	; 51
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	keypad_Init(keypad_app_1);
     15e:	00 91 60 00 	lds	r16, 0x0060
     162:	10 91 61 00 	lds	r17, 0x0061
     166:	20 91 62 00 	lds	r18, 0x0062
     16a:	30 91 63 00 	lds	r19, 0x0063
     16e:	40 91 64 00 	lds	r20, 0x0064
     172:	50 91 65 00 	lds	r21, 0x0065
     176:	60 91 66 00 	lds	r22, 0x0066
     17a:	70 91 67 00 	lds	r23, 0x0067
     17e:	80 91 68 00 	lds	r24, 0x0068
     182:	90 91 69 00 	lds	r25, 0x0069
     186:	0e 94 26 04 	call	0x84c	; 0x84c <keypad_Init>
	LCD_Init();
     18a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <LCD_Init>
	Send_String_LCD("Hello,Sir");
     18e:	89 e8       	ldi	r24, 0x89	; 137
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 00 07 	call	0xe00	; 0xe00 <Send_String_LCD>
     196:	2f ef       	ldi	r18, 0xFF	; 255
     198:	81 ee       	ldi	r24, 0xE1	; 225
     19a:	94 e0       	ldi	r25, 0x04	; 4
     19c:	21 50       	subi	r18, 0x01	; 1
     19e:	80 40       	sbci	r24, 0x00	; 0
     1a0:	90 40       	sbci	r25, 0x00	; 0
     1a2:	e1 f7       	brne	.-8      	; 0x19c <Real_Time_Init_System+0xb4>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <Real_Time_Init_System+0xbe>
     1a6:	00 00       	nop
	_delay_ms(100);
	Clear_LCD();
     1a8:	0e 94 af 06 	call	0xd5e	; 0xd5e <Clear_LCD>
	Send_String_LCD("Click 1 To start");
     1ac:	83 e9       	ldi	r24, 0x93	; 147
     1ae:	90 e0       	ldi	r25, 0x00	; 0
}
     1b0:	1f 91       	pop	r17
     1b2:	0f 91       	pop	r16
	keypad_Init(keypad_app_1);
	LCD_Init();
	Send_String_LCD("Hello,Sir");
	_delay_ms(100);
	Clear_LCD();
	Send_String_LCD("Click 1 To start");
     1b4:	0c 94 00 07 	jmp	0xe00	; 0xe00 <Send_String_LCD>

000001b8 <Real_Time_control_System>:
	GPIO_Pin_Write(Port_C,PIN1,HIGH);
	GPIO_Pin_Write(Port_C,PIN2,HIGH);
	GPIO_Pin_Write(Port_C,PIN3,HIGH);
	GPIO_Pin_Write(Port_C,PIN4,HIGH);
	GPIO_Pin_Write(Port_C,PIN5,HIGH);
	Seven_Seg_Write(Port_D,Common_Cathode,(Sec_Counter%10));
     1b8:	cd ec       	ldi	r28, 0xCD	; 205
}
void Real_Time_control_System()
{
	while(1)
	{
	keypad_Read_Value = keypad_Read(keypad_app_1);
     1ba:	00 91 60 00 	lds	r16, 0x0060
     1be:	10 91 61 00 	lds	r17, 0x0061
     1c2:	20 91 62 00 	lds	r18, 0x0062
     1c6:	30 91 63 00 	lds	r19, 0x0063
     1ca:	40 91 64 00 	lds	r20, 0x0064
     1ce:	50 91 65 00 	lds	r21, 0x0065
     1d2:	60 91 66 00 	lds	r22, 0x0066
     1d6:	70 91 67 00 	lds	r23, 0x0067
     1da:	80 91 68 00 	lds	r24, 0x0068
     1de:	90 91 69 00 	lds	r25, 0x0069
     1e2:	0e 94 6f 04 	call	0x8de	; 0x8de <keypad_Read>
     1e6:	80 93 f7 00 	sts	0x00F7, r24
	if( keypad_Read_Value != Keypad_Not_Pressed)
     1ea:	8f 3f       	cpi	r24, 0xFF	; 255
     1ec:	09 f4       	brne	.+2      	; 0x1f0 <Real_Time_control_System+0x38>
     1ee:	68 c1       	rjmp	.+720    	; 0x4c0 <Real_Time_control_System+0x308>
	{
		if (keypad_Read_Value == '1')
     1f0:	81 33       	cpi	r24, 0x31	; 49
     1f2:	09 f0       	breq	.+2      	; 0x1f6 <Real_Time_control_System+0x3e>
     1f4:	c5 c2       	rjmp	.+1418   	; 0x780 <Real_Time_control_System+0x5c8>
		{
			Clear_LCD();
     1f6:	0e 94 af 06 	call	0xd5e	; 0xd5e <Clear_LCD>
			Send_String_LCD("Enter Hour=");
     1fa:	84 ea       	ldi	r24, 0xA4	; 164
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 00 07 	call	0xe00	; 0xe00 <Send_String_LCD>
     202:	2f ef       	ldi	r18, 0xFF	; 255
     204:	85 ea       	ldi	r24, 0xA5	; 165
     206:	9e e0       	ldi	r25, 0x0E	; 14
     208:	21 50       	subi	r18, 0x01	; 1
     20a:	80 40       	sbci	r24, 0x00	; 0
     20c:	90 40       	sbci	r25, 0x00	; 0
     20e:	e1 f7       	brne	.-8      	; 0x208 <Real_Time_control_System+0x50>
     210:	00 c0       	rjmp	.+0      	; 0x212 <Real_Time_control_System+0x5a>
     212:	00 00       	nop
			_delay_ms(300);
			do 
			{
				First_Digit = keypad_Read(keypad_app_1);
     214:	00 91 60 00 	lds	r16, 0x0060
     218:	10 91 61 00 	lds	r17, 0x0061
     21c:	20 91 62 00 	lds	r18, 0x0062
     220:	30 91 63 00 	lds	r19, 0x0063
     224:	40 91 64 00 	lds	r20, 0x0064
     228:	50 91 65 00 	lds	r21, 0x0065
     22c:	60 91 66 00 	lds	r22, 0x0066
     230:	70 91 67 00 	lds	r23, 0x0067
     234:	80 91 68 00 	lds	r24, 0x0068
     238:	90 91 69 00 	lds	r25, 0x0069
     23c:	0e 94 6f 04 	call	0x8de	; 0x8de <keypad_Read>
     240:	80 93 df 00 	sts	0x00DF, r24
			} while (First_Digit == Keypad_Not_Pressed);
     244:	80 91 df 00 	lds	r24, 0x00DF
     248:	8f 3f       	cpi	r24, 0xFF	; 255
     24a:	21 f3       	breq	.-56     	; 0x214 <Real_Time_control_System+0x5c>
			Send_char_LCD(First_Digit);
     24c:	80 91 df 00 	lds	r24, 0x00DF
     250:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Send_char_LCD>
     254:	2f ef       	ldi	r18, 0xFF	; 255
     256:	85 ea       	ldi	r24, 0xA5	; 165
     258:	9e e0       	ldi	r25, 0x0E	; 14
     25a:	21 50       	subi	r18, 0x01	; 1
     25c:	80 40       	sbci	r24, 0x00	; 0
     25e:	90 40       	sbci	r25, 0x00	; 0
     260:	e1 f7       	brne	.-8      	; 0x25a <Real_Time_control_System+0xa2>
     262:	00 c0       	rjmp	.+0      	; 0x264 <Real_Time_control_System+0xac>
     264:	00 00       	nop
			_delay_ms(300);
			do
			{
				Second_Digit = keypad_Read(keypad_app_1);
     266:	00 91 60 00 	lds	r16, 0x0060
     26a:	10 91 61 00 	lds	r17, 0x0061
     26e:	20 91 62 00 	lds	r18, 0x0062
     272:	30 91 63 00 	lds	r19, 0x0063
     276:	40 91 64 00 	lds	r20, 0x0064
     27a:	50 91 65 00 	lds	r21, 0x0065
     27e:	60 91 66 00 	lds	r22, 0x0066
     282:	70 91 67 00 	lds	r23, 0x0067
     286:	80 91 68 00 	lds	r24, 0x0068
     28a:	90 91 69 00 	lds	r25, 0x0069
     28e:	0e 94 6f 04 	call	0x8de	; 0x8de <keypad_Read>
     292:	80 93 de 00 	sts	0x00DE, r24
			} while (Second_Digit == Keypad_Not_Pressed);
     296:	80 91 de 00 	lds	r24, 0x00DE
     29a:	8f 3f       	cpi	r24, 0xFF	; 255
     29c:	21 f3       	breq	.-56     	; 0x266 <Real_Time_control_System+0xae>
			Send_char_LCD(Second_Digit);
     29e:	80 91 de 00 	lds	r24, 0x00DE
     2a2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Send_char_LCD>
     2a6:	2f ef       	ldi	r18, 0xFF	; 255
     2a8:	85 ea       	ldi	r24, 0xA5	; 165
     2aa:	9e e0       	ldi	r25, 0x0E	; 14
     2ac:	21 50       	subi	r18, 0x01	; 1
     2ae:	80 40       	sbci	r24, 0x00	; 0
     2b0:	90 40       	sbci	r25, 0x00	; 0
     2b2:	e1 f7       	brne	.-8      	; 0x2ac <Real_Time_control_System+0xf4>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <Real_Time_control_System+0xfe>
     2b6:	00 00       	nop
			_delay_ms(300);
			Hour_Counter = ((Second_Digit - 48)+10*(First_Digit-48));
     2b8:	80 91 df 00 	lds	r24, 0x00DF
     2bc:	90 91 de 00 	lds	r25, 0x00DE
     2c0:	90 53       	subi	r25, 0x30	; 48
     2c2:	88 0f       	add	r24, r24
     2c4:	80 56       	subi	r24, 0x60	; 96
     2c6:	28 2f       	mov	r18, r24
     2c8:	22 0f       	add	r18, r18
     2ca:	22 0f       	add	r18, r18
     2cc:	28 0f       	add	r18, r24
     2ce:	92 0f       	add	r25, r18
     2d0:	90 93 e0 00 	sts	0x00E0, r25
			Clear_LCD();
     2d4:	0e 94 af 06 	call	0xd5e	; 0xd5e <Clear_LCD>
     2d8:	8f e9       	ldi	r24, 0x9F	; 159
     2da:	9f e0       	ldi	r25, 0x0F	; 15
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <Real_Time_control_System+0x124>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <Real_Time_control_System+0x12a>
     2e2:	00 00       	nop
			_delay_ms(1);
			
			
			Send_String_LCD("Enter Min=");
     2e4:	80 eb       	ldi	r24, 0xB0	; 176
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 00 07 	call	0xe00	; 0xe00 <Send_String_LCD>
     2ec:	9f ef       	ldi	r25, 0xFF	; 255
     2ee:	25 ea       	ldi	r18, 0xA5	; 165
     2f0:	8e e0       	ldi	r24, 0x0E	; 14
     2f2:	91 50       	subi	r25, 0x01	; 1
     2f4:	20 40       	sbci	r18, 0x00	; 0
     2f6:	80 40       	sbci	r24, 0x00	; 0
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <Real_Time_control_System+0x13a>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <Real_Time_control_System+0x144>
     2fc:	00 00       	nop
			_delay_ms(300);
			do
			{
				First_Digit = keypad_Read(keypad_app_1);
     2fe:	00 91 60 00 	lds	r16, 0x0060
     302:	10 91 61 00 	lds	r17, 0x0061
     306:	20 91 62 00 	lds	r18, 0x0062
     30a:	30 91 63 00 	lds	r19, 0x0063
     30e:	40 91 64 00 	lds	r20, 0x0064
     312:	50 91 65 00 	lds	r21, 0x0065
     316:	60 91 66 00 	lds	r22, 0x0066
     31a:	70 91 67 00 	lds	r23, 0x0067
     31e:	80 91 68 00 	lds	r24, 0x0068
     322:	90 91 69 00 	lds	r25, 0x0069
     326:	0e 94 6f 04 	call	0x8de	; 0x8de <keypad_Read>
     32a:	80 93 df 00 	sts	0x00DF, r24
			} while (First_Digit == Keypad_Not_Pressed);
     32e:	80 91 df 00 	lds	r24, 0x00DF
     332:	8f 3f       	cpi	r24, 0xFF	; 255
     334:	21 f3       	breq	.-56     	; 0x2fe <Real_Time_control_System+0x146>
			Send_char_LCD(First_Digit);
     336:	80 91 df 00 	lds	r24, 0x00DF
     33a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Send_char_LCD>
     33e:	9f ef       	ldi	r25, 0xFF	; 255
     340:	25 ea       	ldi	r18, 0xA5	; 165
     342:	8e e0       	ldi	r24, 0x0E	; 14
     344:	91 50       	subi	r25, 0x01	; 1
     346:	20 40       	sbci	r18, 0x00	; 0
     348:	80 40       	sbci	r24, 0x00	; 0
     34a:	e1 f7       	brne	.-8      	; 0x344 <Real_Time_control_System+0x18c>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <Real_Time_control_System+0x196>
     34e:	00 00       	nop
			_delay_ms(300);
			do
			{
				Second_Digit = keypad_Read(keypad_app_1);
     350:	00 91 60 00 	lds	r16, 0x0060
     354:	10 91 61 00 	lds	r17, 0x0061
     358:	20 91 62 00 	lds	r18, 0x0062
     35c:	30 91 63 00 	lds	r19, 0x0063
     360:	40 91 64 00 	lds	r20, 0x0064
     364:	50 91 65 00 	lds	r21, 0x0065
     368:	60 91 66 00 	lds	r22, 0x0066
     36c:	70 91 67 00 	lds	r23, 0x0067
     370:	80 91 68 00 	lds	r24, 0x0068
     374:	90 91 69 00 	lds	r25, 0x0069
     378:	0e 94 6f 04 	call	0x8de	; 0x8de <keypad_Read>
     37c:	80 93 de 00 	sts	0x00DE, r24
			} while (Second_Digit == Keypad_Not_Pressed);
     380:	80 91 de 00 	lds	r24, 0x00DE
     384:	8f 3f       	cpi	r24, 0xFF	; 255
     386:	21 f3       	breq	.-56     	; 0x350 <Real_Time_control_System+0x198>
			Send_char_LCD(Second_Digit);
     388:	80 91 de 00 	lds	r24, 0x00DE
     38c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Send_char_LCD>
     390:	9f ef       	ldi	r25, 0xFF	; 255
     392:	25 ea       	ldi	r18, 0xA5	; 165
     394:	8e e0       	ldi	r24, 0x0E	; 14
     396:	91 50       	subi	r25, 0x01	; 1
     398:	20 40       	sbci	r18, 0x00	; 0
     39a:	80 40       	sbci	r24, 0x00	; 0
     39c:	e1 f7       	brne	.-8      	; 0x396 <Real_Time_control_System+0x1de>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <Real_Time_control_System+0x1e8>
     3a0:	00 00       	nop
			_delay_ms(300);
			Min_Counter = ((Second_Digit - 48)+10*(First_Digit-48));
     3a2:	80 91 df 00 	lds	r24, 0x00DF
     3a6:	90 91 de 00 	lds	r25, 0x00DE
     3aa:	90 53       	subi	r25, 0x30	; 48
     3ac:	88 0f       	add	r24, r24
     3ae:	80 56       	subi	r24, 0x60	; 96
     3b0:	28 2f       	mov	r18, r24
     3b2:	22 0f       	add	r18, r18
     3b4:	22 0f       	add	r18, r18
     3b6:	28 0f       	add	r18, r24
     3b8:	92 0f       	add	r25, r18
     3ba:	90 93 e1 00 	sts	0x00E1, r25
			Clear_LCD();
     3be:	0e 94 af 06 	call	0xd5e	; 0xd5e <Clear_LCD>
     3c2:	8f e9       	ldi	r24, 0x9F	; 159
     3c4:	9f e0       	ldi	r25, 0x0F	; 15
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <Real_Time_control_System+0x20e>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <Real_Time_control_System+0x214>
     3cc:	00 00       	nop
			_delay_ms(1);
			
			
			Send_String_LCD("Enter Sec=");
     3ce:	8b eb       	ldi	r24, 0xBB	; 187
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 00 07 	call	0xe00	; 0xe00 <Send_String_LCD>
     3d6:	9f ef       	ldi	r25, 0xFF	; 255
     3d8:	25 ea       	ldi	r18, 0xA5	; 165
     3da:	8e e0       	ldi	r24, 0x0E	; 14
     3dc:	91 50       	subi	r25, 0x01	; 1
     3de:	20 40       	sbci	r18, 0x00	; 0
     3e0:	80 40       	sbci	r24, 0x00	; 0
     3e2:	e1 f7       	brne	.-8      	; 0x3dc <Real_Time_control_System+0x224>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <Real_Time_control_System+0x22e>
     3e6:	00 00       	nop
			_delay_ms(300);
			do
			{
				First_Digit = keypad_Read(keypad_app_1);
     3e8:	00 91 60 00 	lds	r16, 0x0060
     3ec:	10 91 61 00 	lds	r17, 0x0061
     3f0:	20 91 62 00 	lds	r18, 0x0062
     3f4:	30 91 63 00 	lds	r19, 0x0063
     3f8:	40 91 64 00 	lds	r20, 0x0064
     3fc:	50 91 65 00 	lds	r21, 0x0065
     400:	60 91 66 00 	lds	r22, 0x0066
     404:	70 91 67 00 	lds	r23, 0x0067
     408:	80 91 68 00 	lds	r24, 0x0068
     40c:	90 91 69 00 	lds	r25, 0x0069
     410:	0e 94 6f 04 	call	0x8de	; 0x8de <keypad_Read>
     414:	80 93 df 00 	sts	0x00DF, r24
			} while (First_Digit == Keypad_Not_Pressed);
     418:	80 91 df 00 	lds	r24, 0x00DF
     41c:	8f 3f       	cpi	r24, 0xFF	; 255
     41e:	21 f3       	breq	.-56     	; 0x3e8 <Real_Time_control_System+0x230>
			Send_char_LCD(First_Digit);
     420:	80 91 df 00 	lds	r24, 0x00DF
     424:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Send_char_LCD>
     428:	9f ef       	ldi	r25, 0xFF	; 255
     42a:	25 ea       	ldi	r18, 0xA5	; 165
     42c:	8e e0       	ldi	r24, 0x0E	; 14
     42e:	91 50       	subi	r25, 0x01	; 1
     430:	20 40       	sbci	r18, 0x00	; 0
     432:	80 40       	sbci	r24, 0x00	; 0
     434:	e1 f7       	brne	.-8      	; 0x42e <Real_Time_control_System+0x276>
     436:	00 c0       	rjmp	.+0      	; 0x438 <Real_Time_control_System+0x280>
     438:	00 00       	nop
			_delay_ms(300);
			do
			{
				Second_Digit = keypad_Read(keypad_app_1);
     43a:	00 91 60 00 	lds	r16, 0x0060
     43e:	10 91 61 00 	lds	r17, 0x0061
     442:	20 91 62 00 	lds	r18, 0x0062
     446:	30 91 63 00 	lds	r19, 0x0063
     44a:	40 91 64 00 	lds	r20, 0x0064
     44e:	50 91 65 00 	lds	r21, 0x0065
     452:	60 91 66 00 	lds	r22, 0x0066
     456:	70 91 67 00 	lds	r23, 0x0067
     45a:	80 91 68 00 	lds	r24, 0x0068
     45e:	90 91 69 00 	lds	r25, 0x0069
     462:	0e 94 6f 04 	call	0x8de	; 0x8de <keypad_Read>
     466:	80 93 de 00 	sts	0x00DE, r24
			} while (Second_Digit == Keypad_Not_Pressed);
     46a:	80 91 de 00 	lds	r24, 0x00DE
     46e:	8f 3f       	cpi	r24, 0xFF	; 255
     470:	21 f3       	breq	.-56     	; 0x43a <Real_Time_control_System+0x282>
			Send_char_LCD(Second_Digit);
     472:	80 91 de 00 	lds	r24, 0x00DE
     476:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Send_char_LCD>
     47a:	9f ef       	ldi	r25, 0xFF	; 255
     47c:	25 ea       	ldi	r18, 0xA5	; 165
     47e:	8e e0       	ldi	r24, 0x0E	; 14
     480:	91 50       	subi	r25, 0x01	; 1
     482:	20 40       	sbci	r18, 0x00	; 0
     484:	80 40       	sbci	r24, 0x00	; 0
     486:	e1 f7       	brne	.-8      	; 0x480 <Real_Time_control_System+0x2c8>
     488:	00 c0       	rjmp	.+0      	; 0x48a <Real_Time_control_System+0x2d2>
     48a:	00 00       	nop
			_delay_ms(300);
			Sec_Counter = ((Second_Digit - 48)+10*(First_Digit-48));
     48c:	80 91 df 00 	lds	r24, 0x00DF
     490:	90 91 de 00 	lds	r25, 0x00DE
     494:	90 53       	subi	r25, 0x30	; 48
     496:	88 0f       	add	r24, r24
     498:	80 56       	subi	r24, 0x60	; 96
     49a:	28 2f       	mov	r18, r24
     49c:	22 0f       	add	r18, r18
     49e:	22 0f       	add	r18, r18
     4a0:	28 0f       	add	r18, r24
     4a2:	92 0f       	add	r25, r18
     4a4:	90 93 e2 00 	sts	0x00E2, r25
			Clear_LCD();
     4a8:	0e 94 af 06 	call	0xd5e	; 0xd5e <Clear_LCD>
     4ac:	8f e9       	ldi	r24, 0x9F	; 159
     4ae:	9f e0       	ldi	r25, 0x0F	; 15
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <Real_Time_control_System+0x2f8>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <Real_Time_control_System+0x2fe>
     4b6:	00 00       	nop
			_delay_ms(1);
			Send_String_LCD("Click 1 To start");
     4b8:	83 e9       	ldi	r24, 0x93	; 147
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 00 07 	call	0xe00	; 0xe00 <Send_String_LCD>
			Send_String_LCD("Wrong Choice,Try!");
			_delay_ms(300);
			Send_String_LCD("Click 1 To start");
		}
	}
	GPIO_Pin_Write(Port_C,PIN0,LOW);
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	83 e3       	ldi	r24, 0x33	; 51
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN1,HIGH);
     4cc:	41 e0       	ldi	r20, 0x01	; 1
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	83 e3       	ldi	r24, 0x33	; 51
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN2,HIGH);
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	62 e0       	ldi	r22, 0x02	; 2
     4dc:	83 e3       	ldi	r24, 0x33	; 51
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN3,HIGH);
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	63 e0       	ldi	r22, 0x03	; 3
     4e8:	83 e3       	ldi	r24, 0x33	; 51
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN4,HIGH);
     4f0:	41 e0       	ldi	r20, 0x01	; 1
     4f2:	64 e0       	ldi	r22, 0x04	; 4
     4f4:	83 e3       	ldi	r24, 0x33	; 51
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN5,HIGH);
     4fc:	41 e0       	ldi	r20, 0x01	; 1
     4fe:	65 e0       	ldi	r22, 0x05	; 5
     500:	83 e3       	ldi	r24, 0x33	; 51
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	Seven_Seg_Write(Port_D,Common_Cathode,(Sec_Counter%10));
     508:	40 91 e2 00 	lds	r20, 0x00E2
     50c:	4c 9f       	mul	r20, r28
     50e:	81 2d       	mov	r24, r1
     510:	11 24       	eor	r1, r1
     512:	86 95       	lsr	r24
     514:	86 95       	lsr	r24
     516:	86 95       	lsr	r24
     518:	9a e0       	ldi	r25, 0x0A	; 10
     51a:	89 9f       	mul	r24, r25
     51c:	40 19       	sub	r20, r0
     51e:	11 24       	eor	r1, r1
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	80 e3       	ldi	r24, 0x30	; 48
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <Seven_Seg_Write>
     52a:	8f e1       	ldi	r24, 0x1F	; 31
     52c:	9e e4       	ldi	r25, 0x4E	; 78
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	f1 f7       	brne	.-4      	; 0x52e <Real_Time_control_System+0x376>
     532:	00 c0       	rjmp	.+0      	; 0x534 <Real_Time_control_System+0x37c>
     534:	00 00       	nop
	_delay_ms(5);
	GPIO_Pin_Write(Port_C,PIN0,HIGH);
     536:	41 e0       	ldi	r20, 0x01	; 1
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	83 e3       	ldi	r24, 0x33	; 51
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN1,LOW);
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	83 e3       	ldi	r24, 0x33	; 51
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN2,HIGH);
     54e:	41 e0       	ldi	r20, 0x01	; 1
     550:	62 e0       	ldi	r22, 0x02	; 2
     552:	83 e3       	ldi	r24, 0x33	; 51
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN3,HIGH);
     55a:	41 e0       	ldi	r20, 0x01	; 1
     55c:	63 e0       	ldi	r22, 0x03	; 3
     55e:	83 e3       	ldi	r24, 0x33	; 51
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN4,HIGH);
     566:	41 e0       	ldi	r20, 0x01	; 1
     568:	64 e0       	ldi	r22, 0x04	; 4
     56a:	83 e3       	ldi	r24, 0x33	; 51
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN5,HIGH);
     572:	41 e0       	ldi	r20, 0x01	; 1
     574:	65 e0       	ldi	r22, 0x05	; 5
     576:	83 e3       	ldi	r24, 0x33	; 51
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	Seven_Seg_Write(Port_D,Common_Cathode,(Sec_Counter/10));
     57e:	40 91 e2 00 	lds	r20, 0x00E2
     582:	4c 9f       	mul	r20, r28
     584:	41 2d       	mov	r20, r1
     586:	11 24       	eor	r1, r1
     588:	46 95       	lsr	r20
     58a:	46 95       	lsr	r20
     58c:	46 95       	lsr	r20
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	80 e3       	ldi	r24, 0x30	; 48
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <Seven_Seg_Write>
     598:	8f e1       	ldi	r24, 0x1F	; 31
     59a:	9e e4       	ldi	r25, 0x4E	; 78
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	f1 f7       	brne	.-4      	; 0x59c <Real_Time_control_System+0x3e4>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <Real_Time_control_System+0x3ea>
     5a2:	00 00       	nop
	_delay_ms(5);
	GPIO_Pin_Write(Port_C,PIN0,HIGH);
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	83 e3       	ldi	r24, 0x33	; 51
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN1,HIGH);
     5b0:	41 e0       	ldi	r20, 0x01	; 1
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	83 e3       	ldi	r24, 0x33	; 51
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN2,LOW);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	62 e0       	ldi	r22, 0x02	; 2
     5c0:	83 e3       	ldi	r24, 0x33	; 51
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN3,HIGH);
     5c8:	41 e0       	ldi	r20, 0x01	; 1
     5ca:	63 e0       	ldi	r22, 0x03	; 3
     5cc:	83 e3       	ldi	r24, 0x33	; 51
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN4,HIGH);
     5d4:	41 e0       	ldi	r20, 0x01	; 1
     5d6:	64 e0       	ldi	r22, 0x04	; 4
     5d8:	83 e3       	ldi	r24, 0x33	; 51
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN5,HIGH);
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	65 e0       	ldi	r22, 0x05	; 5
     5e4:	83 e3       	ldi	r24, 0x33	; 51
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	Seven_Seg_Write(Port_D,Common_Cathode,(Min_Counter%10));
     5ec:	40 91 e1 00 	lds	r20, 0x00E1
     5f0:	4c 9f       	mul	r20, r28
     5f2:	81 2d       	mov	r24, r1
     5f4:	11 24       	eor	r1, r1
     5f6:	86 95       	lsr	r24
     5f8:	86 95       	lsr	r24
     5fa:	86 95       	lsr	r24
     5fc:	9a e0       	ldi	r25, 0x0A	; 10
     5fe:	89 9f       	mul	r24, r25
     600:	40 19       	sub	r20, r0
     602:	11 24       	eor	r1, r1
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	80 e3       	ldi	r24, 0x30	; 48
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <Seven_Seg_Write>
     60e:	8f e1       	ldi	r24, 0x1F	; 31
     610:	9e e4       	ldi	r25, 0x4E	; 78
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <Real_Time_control_System+0x45a>
     616:	00 c0       	rjmp	.+0      	; 0x618 <Real_Time_control_System+0x460>
     618:	00 00       	nop
	_delay_ms(5);
	GPIO_Pin_Write(Port_C,PIN0,HIGH);
     61a:	41 e0       	ldi	r20, 0x01	; 1
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	83 e3       	ldi	r24, 0x33	; 51
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN1,HIGH);
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	83 e3       	ldi	r24, 0x33	; 51
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN2,HIGH);
     632:	41 e0       	ldi	r20, 0x01	; 1
     634:	62 e0       	ldi	r22, 0x02	; 2
     636:	83 e3       	ldi	r24, 0x33	; 51
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN3,LOW);
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	63 e0       	ldi	r22, 0x03	; 3
     642:	83 e3       	ldi	r24, 0x33	; 51
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN4,HIGH);
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	64 e0       	ldi	r22, 0x04	; 4
     64e:	83 e3       	ldi	r24, 0x33	; 51
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN5,HIGH);
     656:	41 e0       	ldi	r20, 0x01	; 1
     658:	65 e0       	ldi	r22, 0x05	; 5
     65a:	83 e3       	ldi	r24, 0x33	; 51
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	Seven_Seg_Write(Port_D,Common_Cathode,(Min_Counter/10));
     662:	40 91 e1 00 	lds	r20, 0x00E1
     666:	4c 9f       	mul	r20, r28
     668:	41 2d       	mov	r20, r1
     66a:	11 24       	eor	r1, r1
     66c:	46 95       	lsr	r20
     66e:	46 95       	lsr	r20
     670:	46 95       	lsr	r20
     672:	61 e0       	ldi	r22, 0x01	; 1
     674:	80 e3       	ldi	r24, 0x30	; 48
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <Seven_Seg_Write>
     67c:	8f e1       	ldi	r24, 0x1F	; 31
     67e:	9e e4       	ldi	r25, 0x4E	; 78
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	f1 f7       	brne	.-4      	; 0x680 <Real_Time_control_System+0x4c8>
     684:	00 c0       	rjmp	.+0      	; 0x686 <Real_Time_control_System+0x4ce>
     686:	00 00       	nop
	_delay_ms(5);
	GPIO_Pin_Write(Port_C,PIN0,HIGH);
     688:	41 e0       	ldi	r20, 0x01	; 1
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	83 e3       	ldi	r24, 0x33	; 51
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN1,HIGH);
     694:	41 e0       	ldi	r20, 0x01	; 1
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	83 e3       	ldi	r24, 0x33	; 51
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN2,HIGH);
     6a0:	41 e0       	ldi	r20, 0x01	; 1
     6a2:	62 e0       	ldi	r22, 0x02	; 2
     6a4:	83 e3       	ldi	r24, 0x33	; 51
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN3,HIGH);
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	63 e0       	ldi	r22, 0x03	; 3
     6b0:	83 e3       	ldi	r24, 0x33	; 51
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN4,LOW);
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	64 e0       	ldi	r22, 0x04	; 4
     6bc:	83 e3       	ldi	r24, 0x33	; 51
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN5,HIGH);
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	65 e0       	ldi	r22, 0x05	; 5
     6c8:	83 e3       	ldi	r24, 0x33	; 51
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	Seven_Seg_Write(Port_D,Common_Cathode,(Hour_Counter%10));
     6d0:	40 91 e0 00 	lds	r20, 0x00E0
     6d4:	4c 9f       	mul	r20, r28
     6d6:	81 2d       	mov	r24, r1
     6d8:	11 24       	eor	r1, r1
     6da:	86 95       	lsr	r24
     6dc:	86 95       	lsr	r24
     6de:	86 95       	lsr	r24
     6e0:	9a e0       	ldi	r25, 0x0A	; 10
     6e2:	89 9f       	mul	r24, r25
     6e4:	40 19       	sub	r20, r0
     6e6:	11 24       	eor	r1, r1
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	80 e3       	ldi	r24, 0x30	; 48
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <Seven_Seg_Write>
     6f2:	8f e1       	ldi	r24, 0x1F	; 31
     6f4:	9e e4       	ldi	r25, 0x4E	; 78
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <Real_Time_control_System+0x53e>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <Real_Time_control_System+0x544>
     6fc:	00 00       	nop
	_delay_ms(5);
	GPIO_Pin_Write(Port_C,PIN0,HIGH);
     6fe:	41 e0       	ldi	r20, 0x01	; 1
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	83 e3       	ldi	r24, 0x33	; 51
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN1,HIGH);
     70a:	41 e0       	ldi	r20, 0x01	; 1
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	83 e3       	ldi	r24, 0x33	; 51
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN2,HIGH);
     716:	41 e0       	ldi	r20, 0x01	; 1
     718:	62 e0       	ldi	r22, 0x02	; 2
     71a:	83 e3       	ldi	r24, 0x33	; 51
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN3,HIGH);
     722:	41 e0       	ldi	r20, 0x01	; 1
     724:	63 e0       	ldi	r22, 0x03	; 3
     726:	83 e3       	ldi	r24, 0x33	; 51
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN4,HIGH);
     72e:	41 e0       	ldi	r20, 0x01	; 1
     730:	64 e0       	ldi	r22, 0x04	; 4
     732:	83 e3       	ldi	r24, 0x33	; 51
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	GPIO_Pin_Write(Port_C,PIN5,LOW);
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	65 e0       	ldi	r22, 0x05	; 5
     73e:	83 e3       	ldi	r24, 0x33	; 51
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
	Seven_Seg_Write(Port_D,Common_Cathode,(Hour_Counter/10));
     746:	40 91 e0 00 	lds	r20, 0x00E0
     74a:	4c 9f       	mul	r20, r28
     74c:	41 2d       	mov	r20, r1
     74e:	11 24       	eor	r1, r1
     750:	46 95       	lsr	r20
     752:	46 95       	lsr	r20
     754:	46 95       	lsr	r20
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	80 e3       	ldi	r24, 0x30	; 48
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <Seven_Seg_Write>
	
	if (Sec_Counter== Max_second_Value)
     760:	80 91 e2 00 	lds	r24, 0x00E2
     764:	8c 33       	cpi	r24, 0x3C	; 60
     766:	41 f1       	breq	.+80     	; 0x7b8 <Real_Time_control_System+0x600>
	{
		Sec_Counter= Zero_Value;
		Min_Counter++;
	}
	if (Min_Counter== Max_Minute_Value)
     768:	80 91 e1 00 	lds	r24, 0x00E1
     76c:	8c 33       	cpi	r24, 0x3C	; 60
     76e:	e1 f0       	breq	.+56     	; 0x7a8 <Real_Time_control_System+0x5f0>
	{
		Min_Counter= Zero_Value;
		Hour_Counter++;
	}
	if (Hour_Counter== Max_Hours_Value)
     770:	80 91 e0 00 	lds	r24, 0x00E0
     774:	88 31       	cpi	r24, 0x18	; 24
     776:	09 f0       	breq	.+2      	; 0x77a <Real_Time_control_System+0x5c2>
     778:	20 cd       	rjmp	.-1472   	; 0x1ba <Real_Time_control_System+0x2>
	{
		Hour_Counter= Zero_Value;
     77a:	10 92 e0 00 	sts	0x00E0, r1
     77e:	1d cd       	rjmp	.-1478   	; 0x1ba <Real_Time_control_System+0x2>
			Clear_LCD();
			_delay_ms(1);
			Send_String_LCD("Click 1 To start");
		}else
		{
			Clear_LCD();
     780:	0e 94 af 06 	call	0xd5e	; 0xd5e <Clear_LCD>
			Send_String_LCD("Wrong Choice,Try!");
     784:	86 ec       	ldi	r24, 0xC6	; 198
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 00 07 	call	0xe00	; 0xe00 <Send_String_LCD>
     78c:	9f ef       	ldi	r25, 0xFF	; 255
     78e:	25 ea       	ldi	r18, 0xA5	; 165
     790:	8e e0       	ldi	r24, 0x0E	; 14
     792:	91 50       	subi	r25, 0x01	; 1
     794:	20 40       	sbci	r18, 0x00	; 0
     796:	80 40       	sbci	r24, 0x00	; 0
     798:	e1 f7       	brne	.-8      	; 0x792 <Real_Time_control_System+0x5da>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <Real_Time_control_System+0x5e4>
     79c:	00 00       	nop
			_delay_ms(300);
			Send_String_LCD("Click 1 To start");
     79e:	83 e9       	ldi	r24, 0x93	; 147
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 00 07 	call	0xe00	; 0xe00 <Send_String_LCD>
     7a6:	8c ce       	rjmp	.-744    	; 0x4c0 <Real_Time_control_System+0x308>
		Sec_Counter= Zero_Value;
		Min_Counter++;
	}
	if (Min_Counter== Max_Minute_Value)
	{
		Min_Counter= Zero_Value;
     7a8:	10 92 e1 00 	sts	0x00E1, r1
		Hour_Counter++;
     7ac:	80 91 e0 00 	lds	r24, 0x00E0
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
     7b2:	80 93 e0 00 	sts	0x00E0, r24
     7b6:	dc cf       	rjmp	.-72     	; 0x770 <Real_Time_control_System+0x5b8>
	GPIO_Pin_Write(Port_C,PIN5,LOW);
	Seven_Seg_Write(Port_D,Common_Cathode,(Hour_Counter/10));
	
	if (Sec_Counter== Max_second_Value)
	{
		Sec_Counter= Zero_Value;
     7b8:	10 92 e2 00 	sts	0x00E2, r1
		Min_Counter++;
     7bc:	80 91 e1 00 	lds	r24, 0x00E1
     7c0:	8f 5f       	subi	r24, 0xFF	; 255
     7c2:	80 93 e1 00 	sts	0x00E1, r24
     7c6:	d0 cf       	rjmp	.-96     	; 0x768 <Real_Time_control_System+0x5b0>

000007c8 <main>:
	//Timer_PhaseCorrect_Init();
	//KeyPad_APP_init();
	//Game_Init_System();
	//Game_Playing_System();
	//Multi_7_Segment_Init_System();
	Real_Time_Init_System();
     7c8:	0e 94 74 00 	call	0xe8	; 0xe8 <Real_Time_Init_System>
	Real_Time_control_System();
     7cc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Real_Time_control_System>
     7d0:	ff cf       	rjmp	.-2      	; 0x7d0 <main+0x8>

000007d2 <Seven_Seg_Init>:
 *  Author: Mahm Oud Sa Ad
 */ 
#include <Direct_7-Segment.h>
void Seven_Seg_Init(GPIO_Register *_7_Segment_port)
{
	GPIO_Port_Configuration(_7_Segment_port,Max_uint8_Value);
     7d2:	6f ef       	ldi	r22, 0xFF	; 255
     7d4:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <GPIO_Port_Configuration>

000007d8 <Seven_Seg_Write>:
}
void Seven_Seg_Write(GPIO_Register *_7_Segment_port,Seven_Segment_Type Type,unsigned char Written_Number)
{
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	2a 97       	sbiw	r28, 0x0a	; 10
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
	unsigned char Numbers_arr[]={ Zero,One,Two,Three,Four,Five,Six,Seven,Eight,Nine};
     7ec:	2a e0       	ldi	r18, 0x0A	; 10
     7ee:	ef e6       	ldi	r30, 0x6F	; 111
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	de 01       	movw	r26, r28
     7f4:	11 96       	adiw	r26, 0x01	; 1
     7f6:	01 90       	ld	r0, Z+
     7f8:	0d 92       	st	X+, r0
     7fa:	2a 95       	dec	r18
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <Seven_Seg_Write+0x1e>
	switch(Type)
     7fe:	66 23       	and	r22, r22
     800:	e1 f0       	breq	.+56     	; 0x83a <Seven_Seg_Write+0x62>
     802:	61 30       	cpi	r22, 0x01	; 1
     804:	89 f4       	brne	.+34     	; 0x828 <Seven_Seg_Write+0x50>
	{
		case Common_Anode:
		GPIO_Port_Write(_7_Segment_port,~(Numbers_arr[Written_Number]));
		break;
		case Common_Cathode:
		GPIO_Port_Write(_7_Segment_port,Numbers_arr[Written_Number]);
     806:	e1 e0       	ldi	r30, 0x01	; 1
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	ec 0f       	add	r30, r28
     80c:	fd 1f       	adc	r31, r29
     80e:	e4 0f       	add	r30, r20
     810:	f1 1d       	adc	r31, r1
     812:	60 81       	ld	r22, Z
		break;
	}
	
     814:	2a 96       	adiw	r28, 0x0a	; 10
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
	{
		case Common_Anode:
		GPIO_Port_Write(_7_Segment_port,~(Numbers_arr[Written_Number]));
		break;
		case Common_Cathode:
		GPIO_Port_Write(_7_Segment_port,Numbers_arr[Written_Number]);
     824:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <GPIO_Port_Write>
		break;
	}
	
     828:	2a 96       	adiw	r28, 0x0a	; 10
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	08 95       	ret
{
	unsigned char Numbers_arr[]={ Zero,One,Two,Three,Four,Five,Six,Seven,Eight,Nine};
	switch(Type)
	{
		case Common_Anode:
		GPIO_Port_Write(_7_Segment_port,~(Numbers_arr[Written_Number]));
     83a:	e1 e0       	ldi	r30, 0x01	; 1
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	ec 0f       	add	r30, r28
     840:	fd 1f       	adc	r31, r29
     842:	e4 0f       	add	r30, r20
     844:	f1 1d       	adc	r31, r1
     846:	60 81       	ld	r22, Z
     848:	60 95       	com	r22
     84a:	e4 cf       	rjmp	.-56     	; 0x814 <Seven_Seg_Write+0x3c>

0000084c <keypad_Init>:

#include  <Keypad.h>
#include <util/delay.h>

void   keypad_Init (Keypad_Data Keypad)
{
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	2a 97       	sbiw	r28, 0x0a	; 10
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	09 83       	std	Y+1, r16	; 0x01
     866:	1a 83       	std	Y+2, r17	; 0x02
     868:	3c 83       	std	Y+4, r19	; 0x04
     86a:	4d 83       	std	Y+5, r20	; 0x05
     86c:	5e 83       	std	Y+6, r21	; 0x06
     86e:	6f 83       	std	Y+7, r22	; 0x07
     870:	78 87       	std	Y+8, r23	; 0x08
     872:	89 87       	std	Y+9, r24	; 0x09
     874:	9a 87       	std	Y+10, r25	; 0x0a
     876:	09 81       	ldd	r16, Y+1	; 0x01
     878:	1a 81       	ldd	r17, Y+2	; 0x02
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KROW1,OUTPUT);
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	62 2f       	mov	r22, r18
     87e:	c8 01       	movw	r24, r16
     880:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KROW2,OUTPUT); 
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	6c 81       	ldd	r22, Y+4	; 0x04
     888:	c8 01       	movw	r24, r16
     88a:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KROW3,OUTPUT); 
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	6d 81       	ldd	r22, Y+5	; 0x05
     892:	c8 01       	movw	r24, r16
     894:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KROW4,OUTPUT);  
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	6e 81       	ldd	r22, Y+6	; 0x06
     89c:	c8 01       	movw	r24, r16
     89e:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL1,INPUT_Pullup);
     8a2:	42 e0       	ldi	r20, 0x02	; 2
     8a4:	6f 81       	ldd	r22, Y+7	; 0x07
     8a6:	c8 01       	movw	r24, r16
     8a8:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL2,INPUT_Pullup);
     8ac:	42 e0       	ldi	r20, 0x02	; 2
     8ae:	68 85       	ldd	r22, Y+8	; 0x08
     8b0:	c8 01       	movw	r24, r16
     8b2:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL3,INPUT_Pullup);
     8b6:	42 e0       	ldi	r20, 0x02	; 2
     8b8:	69 85       	ldd	r22, Y+9	; 0x09
     8ba:	c8 01       	movw	r24, r16
     8bc:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL4,INPUT_Pullup); 
     8c0:	42 e0       	ldi	r20, 0x02	; 2
     8c2:	6a 85       	ldd	r22, Y+10	; 0x0a
     8c4:	c8 01       	movw	r24, r16
	
}
     8c6:	2a 96       	adiw	r28, 0x0a	; 10
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KROW3,OUTPUT); 
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KROW4,OUTPUT);  
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL1,INPUT_Pullup);
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL2,INPUT_Pullup);
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL3,INPUT_Pullup);
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL4,INPUT_Pullup); 
     8da:	0c 94 5d 07 	jmp	0xeba	; 0xeba <GPIO_Pin_Configuration>

000008de <keypad_Read>:
	
}
unsigned char keypad_Read(Keypad_Data Keypad)
{
     8de:	8f 92       	push	r8
     8e0:	9f 92       	push	r9
     8e2:	af 92       	push	r10
     8e4:	bf 92       	push	r11
     8e6:	cf 92       	push	r12
     8e8:	df 92       	push	r13
     8ea:	ef 92       	push	r14
     8ec:	ff 92       	push	r15
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
     8fa:	6a 97       	sbiw	r28, 0x1a	; 26
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	f8 94       	cli
     900:	de bf       	out	0x3e, r29	; 62
     902:	0f be       	out	0x3f, r0	; 63
     904:	cd bf       	out	0x3d, r28	; 61
     906:	09 8b       	std	Y+17, r16	; 0x11
     908:	1a 8b       	std	Y+18, r17	; 0x12
     90a:	2b 8b       	std	Y+19, r18	; 0x13
     90c:	3c 8b       	std	Y+20, r19	; 0x14
     90e:	4d 8b       	std	Y+21, r20	; 0x15
     910:	5e 8b       	std	Y+22, r21	; 0x16
     912:	6f 8b       	std	Y+23, r22	; 0x17
     914:	78 8f       	std	Y+24, r23	; 0x18
     916:	89 8f       	std	Y+25, r24	; 0x19
     918:	9a 8f       	std	Y+26, r25	; 0x1a
     91a:	09 89       	ldd	r16, Y+17	; 0x11
     91c:	1a 89       	ldd	r17, Y+18	; 0x12
	unsigned char Keypad_array[COL_Max][ROW_Max]= {{'7','8','9','A'},
     91e:	80 e1       	ldi	r24, 0x10	; 16
     920:	e9 e7       	ldi	r30, 0x79	; 121
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	de 01       	movw	r26, r28
     926:	11 96       	adiw	r26, 0x01	; 1
     928:	01 90       	ld	r0, Z+
     92a:	0d 92       	st	X+, r0
     92c:	8a 95       	dec	r24
     92e:	e1 f7       	brne	.-8      	; 0x928 <keypad_Read+0x4a>
     930:	9b 88       	ldd	r9, Y+19	; 0x13
     932:	ac 88       	ldd	r10, Y+20	; 0x14
     934:	bd 88       	ldd	r11, Y+21	; 0x15
     936:	ce 88       	ldd	r12, Y+22	; 0x16
     938:	e1 2c       	mov	r14, r1
     93a:	f1 2c       	mov	r15, r1
	                                        {'4','5','6','B'},
	                                        {'1','2','3','C'},
	                                        {'#','0','*','D'}};
	unsigned char Row,Col,Read_Value;
	unsigned char Return_Value = 0xff;
     93c:	88 24       	eor	r8, r8
     93e:	8a 94       	dec	r8
	for (Row=0;Row<ROW_Max;Row++)
	{
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW1,HIGH);
     940:	41 e0       	ldi	r20, 0x01	; 1
     942:	69 2d       	mov	r22, r9
     944:	c8 01       	movw	r24, r16
     946:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW2,HIGH);	
     94a:	41 e0       	ldi	r20, 0x01	; 1
     94c:	6a 2d       	mov	r22, r10
     94e:	c8 01       	movw	r24, r16
     950:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW3,HIGH);	
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	6b 2d       	mov	r22, r11
     958:	c8 01       	movw	r24, r16
     95a:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW4,HIGH);	
     95e:	41 e0       	ldi	r20, 0x01	; 1
     960:	6c 2d       	mov	r22, r12
     962:	c8 01       	movw	r24, r16
     964:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
		GPIO_Pin_Write(Keypad.Keypad_port,Row,LOW);		
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	6e 2d       	mov	r22, r14
     96c:	c8 01       	movw	r24, r16
     96e:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
		for (Col=0;Col<COL_Max;Col++)
     972:	d1 2c       	mov	r13, r1
		{
			Read_Value =GPIO_Pin_Read(Keypad.Keypad_port,(Col+4));
     974:	64 e0       	ldi	r22, 0x04	; 4
     976:	6d 0d       	add	r22, r13
     978:	c8 01       	movw	r24, r16
     97a:	0e 94 af 07 	call	0xf5e	; 0xf5e <GPIO_Pin_Read>
			if(!Read_Value)
     97e:	88 23       	and	r24, r24
     980:	f9 f0       	breq	.+62     	; 0x9c0 <keypad_Read+0xe2>
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW1,HIGH);
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW2,HIGH);	
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW3,HIGH);	
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW4,HIGH);	
		GPIO_Pin_Write(Keypad.Keypad_port,Row,LOW);		
		for (Col=0;Col<COL_Max;Col++)
     982:	d3 94       	inc	r13
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	d9 12       	cpse	r13, r25
     988:	f5 cf       	rjmp	.-22     	; 0x974 <keypad_Read+0x96>
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	e8 1a       	sub	r14, r24
     98e:	f8 0a       	sbc	r15, r24
	                                        {'4','5','6','B'},
	                                        {'1','2','3','C'},
	                                        {'#','0','*','D'}};
	unsigned char Row,Col,Read_Value;
	unsigned char Return_Value = 0xff;
	for (Row=0;Row<ROW_Max;Row++)
     990:	94 e0       	ldi	r25, 0x04	; 4
     992:	e9 16       	cp	r14, r25
     994:	f1 04       	cpc	r15, r1
     996:	a1 f6       	brne	.-88     	; 0x940 <keypad_Read+0x62>
			}
		}
	}
	if (!Read_Value);
	return Return_Value;
}
     998:	88 2d       	mov	r24, r8
     99a:	6a 96       	adiw	r28, 0x1a	; 26
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	df 90       	pop	r13
     9b4:	cf 90       	pop	r12
     9b6:	bf 90       	pop	r11
     9b8:	af 90       	pop	r10
     9ba:	9f 90       	pop	r9
     9bc:	8f 90       	pop	r8
     9be:	08 95       	ret
		for (Col=0;Col<COL_Max;Col++)
		{
			Read_Value =GPIO_Pin_Read(Keypad.Keypad_port,(Col+4));
			if(!Read_Value)
			{
				Return_Value =Keypad_array[Row][Col];
     9c0:	f7 01       	movw	r30, r14
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	ee 0f       	add	r30, r30
     9c8:	ff 1f       	adc	r31, r31
     9ca:	ed 0d       	add	r30, r13
     9cc:	f1 1d       	adc	r31, r1
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	8c 0f       	add	r24, r28
     9d4:	9d 1f       	adc	r25, r29
     9d6:	e8 0f       	add	r30, r24
     9d8:	f9 1f       	adc	r31, r25
     9da:	80 80       	ld	r8, Z
     9dc:	8f ef       	ldi	r24, 0xFF	; 255
     9de:	e8 1a       	sub	r14, r24
     9e0:	f8 0a       	sbc	r15, r24
	                                        {'4','5','6','B'},
	                                        {'1','2','3','C'},
	                                        {'#','0','*','D'}};
	unsigned char Row,Col,Read_Value;
	unsigned char Return_Value = 0xff;
	for (Row=0;Row<ROW_Max;Row++)
     9e2:	94 e0       	ldi	r25, 0x04	; 4
     9e4:	e9 16       	cp	r14, r25
     9e6:	f1 04       	cpc	r15, r1
     9e8:	09 f0       	breq	.+2      	; 0x9ec <keypad_Read+0x10e>
     9ea:	aa cf       	rjmp	.-172    	; 0x940 <keypad_Read+0x62>
     9ec:	d5 cf       	rjmp	.-86     	; 0x998 <keypad_Read+0xba>

000009ee <LCD_Init>:
     9ee:	2f ef       	ldi	r18, 0xFF	; 255
     9f0:	83 ec       	ldi	r24, 0xC3	; 195
     9f2:	99 e0       	ldi	r25, 0x09	; 9
     9f4:	21 50       	subi	r18, 0x01	; 1
     9f6:	80 40       	sbci	r24, 0x00	; 0
     9f8:	90 40       	sbci	r25, 0x00	; 0
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <LCD_Init+0x6>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <LCD_Init+0x10>
     9fe:	00 00       	nop
	Send_Command_LCD(Clear_Display);
	_delay_ms(10);
	
	#elif  defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Port_Configuration(Port_B,0XF0);
     a00:	60 ef       	ldi	r22, 0xF0	; 240
     a02:	86 e3       	ldi	r24, 0x36	; 54
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 c2 07 	call	0xf84	; 0xf84 <GPIO_Port_Configuration>
	GPIO_Pin_Configuration(Port_B,RS_Pin,OUTPUT);
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_B,EN_Pin,OUTPUT);
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	62 e0       	ldi	r22, 0x02	; 2
     a1a:	86 e3       	ldi	r24, 0x36	; 54
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_B,RW_Pin,OUTPUT);
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	86 e3       	ldi	r24, 0x36	; 54
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
	CLEAR_BIT(LCD_CONTROL_BIT_PORT,RW_Pin);
     a2e:	a9 98       	cbi	0x15, 1	; 21
     a30:	8f e9       	ldi	r24, 0x9F	; 159
     a32:	9f e0       	ldi	r25, 0x0F	; 15
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	f1 f7       	brne	.-4      	; 0xa34 <LCD_Init+0x46>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <LCD_Init+0x4c>
     a3a:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	82 e4       	ldi	r24, 0x42	; 66
     a40:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	86 e3       	ldi	r24, 0x36	; 54
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     a50:	41 e0       	ldi	r20, 0x01	; 1
     a52:	62 e0       	ldi	r22, 0x02	; 2
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     a5c:	8f e3       	ldi	r24, 0x3F	; 63
     a5e:	9f e1       	ldi	r25, 0x1F	; 31
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	f1 f7       	brne	.-4      	; 0xa60 <LCD_Init+0x72>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <LCD_Init+0x78>
     a66:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	62 e0       	ldi	r22, 0x02	; 2
     a6c:	86 e3       	ldi	r24, 0x36	; 54
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     a74:	8f e3       	ldi	r24, 0x3F	; 63
     a76:	9f e1       	ldi	r25, 0x1F	; 31
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <LCD_Init+0x8a>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <LCD_Init+0x90>
     a7e:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Command<<4);
     a80:	60 e2       	ldi	r22, 0x20	; 32
     a82:	82 e4       	ldi	r24, 0x42	; 66
     a84:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	86 e3       	ldi	r24, 0x36	; 54
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	86 e3       	ldi	r24, 0x36	; 54
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     aa0:	8f e3       	ldi	r24, 0x3F	; 63
     aa2:	9f e1       	ldi	r25, 0x1F	; 31
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <LCD_Init+0xb6>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <LCD_Init+0xbc>
     aaa:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	62 e0       	ldi	r22, 0x02	; 2
     ab0:	86 e3       	ldi	r24, 0x36	; 54
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     ab8:	8f e3       	ldi	r24, 0x3F	; 63
     aba:	9f e1       	ldi	r25, 0x1F	; 31
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <LCD_Init+0xce>
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <LCD_Init+0xd4>
     ac2:	00 00       	nop
     ac4:	8f e9       	ldi	r24, 0x9F	; 159
     ac6:	9f e0       	ldi	r25, 0x0F	; 15
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <LCD_Init+0xda>
     acc:	00 c0       	rjmp	.+0      	; 0xace <LCD_Init+0xe0>
     ace:	00 00       	nop
     ad0:	8f e9       	ldi	r24, 0x9F	; 159
     ad2:	9f e0       	ldi	r25, 0x0F	; 15
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <LCD_Init+0xe6>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <LCD_Init+0xec>
     ada:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
     adc:	68 e2       	ldi	r22, 0x28	; 40
     ade:	82 e4       	ldi	r24, 0x42	; 66
     ae0:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	86 e3       	ldi	r24, 0x36	; 54
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     af0:	41 e0       	ldi	r20, 0x01	; 1
     af2:	62 e0       	ldi	r22, 0x02	; 2
     af4:	86 e3       	ldi	r24, 0x36	; 54
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     afc:	8f e3       	ldi	r24, 0x3F	; 63
     afe:	9f e1       	ldi	r25, 0x1F	; 31
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	f1 f7       	brne	.-4      	; 0xb00 <LCD_Init+0x112>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <LCD_Init+0x118>
     b06:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	62 e0       	ldi	r22, 0x02	; 2
     b0c:	86 e3       	ldi	r24, 0x36	; 54
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     b14:	8f e3       	ldi	r24, 0x3F	; 63
     b16:	9f e1       	ldi	r25, 0x1F	; 31
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <LCD_Init+0x12a>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <LCD_Init+0x130>
     b1e:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Command<<4);
     b20:	60 e8       	ldi	r22, 0x80	; 128
     b22:	82 e4       	ldi	r24, 0x42	; 66
     b24:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	86 e3       	ldi	r24, 0x36	; 54
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	62 e0       	ldi	r22, 0x02	; 2
     b38:	86 e3       	ldi	r24, 0x36	; 54
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     b40:	8f e3       	ldi	r24, 0x3F	; 63
     b42:	9f e1       	ldi	r25, 0x1F	; 31
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <LCD_Init+0x156>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <LCD_Init+0x15c>
     b4a:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	62 e0       	ldi	r22, 0x02	; 2
     b50:	86 e3       	ldi	r24, 0x36	; 54
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     b58:	8f e3       	ldi	r24, 0x3F	; 63
     b5a:	9f e1       	ldi	r25, 0x1F	; 31
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <LCD_Init+0x16e>
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <LCD_Init+0x174>
     b62:	00 00       	nop
     b64:	8f e9       	ldi	r24, 0x9F	; 159
     b66:	9f e0       	ldi	r25, 0x0F	; 15
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	f1 f7       	brne	.-4      	; 0xb68 <LCD_Init+0x17a>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <LCD_Init+0x180>
     b6e:	00 00       	nop
     b70:	8f e9       	ldi	r24, 0x9F	; 159
     b72:	9f e0       	ldi	r25, 0x0F	; 15
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <LCD_Init+0x186>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <LCD_Init+0x18c>
     b7a:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
     b7c:	6e e0       	ldi	r22, 0x0E	; 14
     b7e:	82 e4       	ldi	r24, 0x42	; 66
     b80:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	86 e3       	ldi	r24, 0x36	; 54
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     b90:	41 e0       	ldi	r20, 0x01	; 1
     b92:	62 e0       	ldi	r22, 0x02	; 2
     b94:	86 e3       	ldi	r24, 0x36	; 54
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     b9c:	8f e3       	ldi	r24, 0x3F	; 63
     b9e:	9f e1       	ldi	r25, 0x1F	; 31
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	f1 f7       	brne	.-4      	; 0xba0 <LCD_Init+0x1b2>
     ba4:	00 c0       	rjmp	.+0      	; 0xba6 <LCD_Init+0x1b8>
     ba6:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	62 e0       	ldi	r22, 0x02	; 2
     bac:	86 e3       	ldi	r24, 0x36	; 54
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     bb4:	8f e3       	ldi	r24, 0x3F	; 63
     bb6:	9f e1       	ldi	r25, 0x1F	; 31
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <LCD_Init+0x1ca>
     bbc:	00 c0       	rjmp	.+0      	; 0xbbe <LCD_Init+0x1d0>
     bbe:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Command<<4);
     bc0:	60 ee       	ldi	r22, 0xE0	; 224
     bc2:	82 e4       	ldi	r24, 0x42	; 66
     bc4:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	86 e3       	ldi	r24, 0x36	; 54
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     bd4:	41 e0       	ldi	r20, 0x01	; 1
     bd6:	62 e0       	ldi	r22, 0x02	; 2
     bd8:	86 e3       	ldi	r24, 0x36	; 54
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	9f e1       	ldi	r25, 0x1F	; 31
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <LCD_Init+0x1f6>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <LCD_Init+0x1fc>
     bea:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	62 e0       	ldi	r22, 0x02	; 2
     bf0:	86 e3       	ldi	r24, 0x36	; 54
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     bf8:	8f e3       	ldi	r24, 0x3F	; 63
     bfa:	9f e1       	ldi	r25, 0x1F	; 31
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	f1 f7       	brne	.-4      	; 0xbfc <LCD_Init+0x20e>
     c00:	00 c0       	rjmp	.+0      	; 0xc02 <LCD_Init+0x214>
     c02:	00 00       	nop
     c04:	8f e9       	ldi	r24, 0x9F	; 159
     c06:	9f e0       	ldi	r25, 0x0F	; 15
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <LCD_Init+0x21a>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <LCD_Init+0x220>
     c0e:	00 00       	nop
     c10:	8f e9       	ldi	r24, 0x9F	; 159
     c12:	9f e0       	ldi	r25, 0x0F	; 15
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <LCD_Init+0x226>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <LCD_Init+0x22c>
     c1a:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	82 e4       	ldi	r24, 0x42	; 66
     c20:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	86 e3       	ldi	r24, 0x36	; 54
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     c30:	41 e0       	ldi	r20, 0x01	; 1
     c32:	62 e0       	ldi	r22, 0x02	; 2
     c34:	86 e3       	ldi	r24, 0x36	; 54
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     c3c:	8f e3       	ldi	r24, 0x3F	; 63
     c3e:	9f e1       	ldi	r25, 0x1F	; 31
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <LCD_Init+0x252>
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <LCD_Init+0x258>
     c46:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	62 e0       	ldi	r22, 0x02	; 2
     c4c:	86 e3       	ldi	r24, 0x36	; 54
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     c54:	8f e3       	ldi	r24, 0x3F	; 63
     c56:	9f e1       	ldi	r25, 0x1F	; 31
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <LCD_Init+0x26a>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <LCD_Init+0x270>
     c5e:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Command<<4);
     c60:	60 e1       	ldi	r22, 0x10	; 16
     c62:	82 e4       	ldi	r24, 0x42	; 66
     c64:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	86 e3       	ldi	r24, 0x36	; 54
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	62 e0       	ldi	r22, 0x02	; 2
     c78:	86 e3       	ldi	r24, 0x36	; 54
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     c80:	8f e3       	ldi	r24, 0x3F	; 63
     c82:	9f e1       	ldi	r25, 0x1F	; 31
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <LCD_Init+0x296>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <LCD_Init+0x29c>
     c8a:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	62 e0       	ldi	r22, 0x02	; 2
     c90:	86 e3       	ldi	r24, 0x36	; 54
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     c98:	8f e3       	ldi	r24, 0x3F	; 63
     c9a:	9f e1       	ldi	r25, 0x1F	; 31
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <LCD_Init+0x2ae>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <LCD_Init+0x2b4>
     ca2:	00 00       	nop
     ca4:	8f e9       	ldi	r24, 0x9F	; 159
     ca6:	9f e0       	ldi	r25, 0x0F	; 15
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <LCD_Init+0x2ba>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <LCD_Init+0x2c0>
     cae:	00 00       	nop
     cb0:	8f e3       	ldi	r24, 0x3F	; 63
     cb2:	9c e9       	ldi	r25, 0x9C	; 156
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <LCD_Init+0x2c6>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <LCD_Init+0x2cc>
     cba:	00 00       	nop
     cbc:	08 95       	ret

00000cbe <Send_char_LCD>:
	_delay_ms(1);
	#endif
	#endif
}
void Send_char_LCD(uint_8 Character)
{
     cbe:	cf 93       	push	r28
     cc0:	c8 2f       	mov	r28, r24
	GPIO_Port_Write(Port_B,Character);
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
	Set_Enable_Bit();
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Character);
     cc2:	68 2f       	mov	r22, r24
     cc4:	82 e4       	ldi	r24, 0x42	; 66
     cc6:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
     cca:	41 e0       	ldi	r20, 0x01	; 1
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	86 e3       	ldi	r24, 0x36	; 54
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	62 e0       	ldi	r22, 0x02	; 2
     cda:	86 e3       	ldi	r24, 0x36	; 54
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	9f e1       	ldi	r25, 0x1F	; 31
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <Send_char_LCD+0x28>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <Send_char_LCD+0x2e>
     cec:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	62 e0       	ldi	r22, 0x02	; 2
     cf2:	86 e3       	ldi	r24, 0x36	; 54
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     cfa:	8f e3       	ldi	r24, 0x3F	; 63
     cfc:	9f e1       	ldi	r25, 0x1F	; 31
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <Send_char_LCD+0x40>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <Send_char_LCD+0x46>
     d04:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Character);
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Character<<4);
     d06:	6c 2f       	mov	r22, r28
     d08:	62 95       	swap	r22
     d0a:	60 7f       	andi	r22, 0xF0	; 240
     d0c:	82 e4       	ldi	r24, 0x42	; 66
     d0e:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	86 e3       	ldi	r24, 0x36	; 54
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     d1e:	41 e0       	ldi	r20, 0x01	; 1
     d20:	62 e0       	ldi	r22, 0x02	; 2
     d22:	86 e3       	ldi	r24, 0x36	; 54
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     d2a:	8f e3       	ldi	r24, 0x3F	; 63
     d2c:	9f e1       	ldi	r25, 0x1F	; 31
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <Send_char_LCD+0x70>
     d32:	00 c0       	rjmp	.+0      	; 0xd34 <Send_char_LCD+0x76>
     d34:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	62 e0       	ldi	r22, 0x02	; 2
     d3a:	86 e3       	ldi	r24, 0x36	; 54
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	9f e1       	ldi	r25, 0x1F	; 31
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <Send_char_LCD+0x88>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <Send_char_LCD+0x8e>
     d4c:	00 00       	nop
     d4e:	8f e9       	ldi	r24, 0x9F	; 159
     d50:	9f e0       	ldi	r25, 0x0F	; 15
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	f1 f7       	brne	.-4      	; 0xd52 <Send_char_LCD+0x94>
     d56:	00 c0       	rjmp	.+0      	; 0xd58 <Send_char_LCD+0x9a>
     d58:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
	Set_Enable_Bit();
	_delay_ms(1);
	#endif
	#endif
}
     d5a:	cf 91       	pop	r28
     d5c:	08 95       	ret

00000d5e <Clear_LCD>:
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	82 e4       	ldi	r24, 0x42	; 66
     d62:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	86 e3       	ldi	r24, 0x36	; 54
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	62 e0       	ldi	r22, 0x02	; 2
     d76:	86 e3       	ldi	r24, 0x36	; 54
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     d7e:	8f e3       	ldi	r24, 0x3F	; 63
     d80:	9f e1       	ldi	r25, 0x1F	; 31
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <Clear_LCD+0x24>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <Clear_LCD+0x2a>
     d88:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	62 e0       	ldi	r22, 0x02	; 2
     d8e:	86 e3       	ldi	r24, 0x36	; 54
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     d96:	8f e3       	ldi	r24, 0x3F	; 63
     d98:	9f e1       	ldi	r25, 0x1F	; 31
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <Clear_LCD+0x3c>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <Clear_LCD+0x42>
     da0:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Command<<4);
     da2:	60 e1       	ldi	r22, 0x10	; 16
     da4:	82 e4       	ldi	r24, 0x42	; 66
     da6:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	86 e3       	ldi	r24, 0x36	; 54
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     db6:	41 e0       	ldi	r20, 0x01	; 1
     db8:	62 e0       	ldi	r22, 0x02	; 2
     dba:	86 e3       	ldi	r24, 0x36	; 54
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     dc2:	8f e3       	ldi	r24, 0x3F	; 63
     dc4:	9f e1       	ldi	r25, 0x1F	; 31
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <Clear_LCD+0x68>
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <Clear_LCD+0x6e>
     dcc:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	62 e0       	ldi	r22, 0x02	; 2
     dd2:	86 e3       	ldi	r24, 0x36	; 54
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     dda:	8f e3       	ldi	r24, 0x3F	; 63
     ddc:	9f e1       	ldi	r25, 0x1F	; 31
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <Clear_LCD+0x80>
     de2:	00 c0       	rjmp	.+0      	; 0xde4 <Clear_LCD+0x86>
     de4:	00 00       	nop
     de6:	8f e9       	ldi	r24, 0x9F	; 159
     de8:	9f e0       	ldi	r25, 0x0F	; 15
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <Clear_LCD+0x8c>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <Clear_LCD+0x92>
     df0:	00 00       	nop
     df2:	8f e3       	ldi	r24, 0x3F	; 63
     df4:	9c e9       	ldi	r25, 0x9C	; 156
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <Clear_LCD+0x98>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <Clear_LCD+0x9e>
     dfc:	00 00       	nop
     dfe:	08 95       	ret

00000e00 <Send_String_LCD>:
{
	Send_Command_LCD(Clear_Display);
	_delay_ms(10);	
}
void Send_String_LCD(uint_8 *String)
{
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
	while((*String) != '\0')
     e06:	fc 01       	movw	r30, r24
     e08:	10 81       	ld	r17, Z
     e0a:	11 23       	and	r17, r17
     e0c:	09 f4       	brne	.+2      	; 0xe10 <Send_String_LCD+0x10>
     e0e:	51 c0       	rjmp	.+162    	; 0xeb2 <Send_String_LCD+0xb2>
     e10:	ec 01       	movw	r28, r24
     e12:	21 96       	adiw	r28, 0x01	; 1
	GPIO_Port_Write(Port_B,Character);
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
	Set_Enable_Bit();
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Character);
     e14:	61 2f       	mov	r22, r17
     e16:	82 e4       	ldi	r24, 0x42	; 66
     e18:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	86 e3       	ldi	r24, 0x36	; 54
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     e28:	41 e0       	ldi	r20, 0x01	; 1
     e2a:	62 e0       	ldi	r22, 0x02	; 2
     e2c:	86 e3       	ldi	r24, 0x36	; 54
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     e34:	8f e3       	ldi	r24, 0x3F	; 63
     e36:	9f e1       	ldi	r25, 0x1F	; 31
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <Send_String_LCD+0x38>
     e3c:	00 c0       	rjmp	.+0      	; 0xe3e <Send_String_LCD+0x3e>
     e3e:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	62 e0       	ldi	r22, 0x02	; 2
     e44:	86 e3       	ldi	r24, 0x36	; 54
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     e4c:	ef e3       	ldi	r30, 0x3F	; 63
     e4e:	ff e1       	ldi	r31, 0x1F	; 31
     e50:	31 97       	sbiw	r30, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <Send_String_LCD+0x50>
     e54:	00 c0       	rjmp	.+0      	; 0xe56 <Send_String_LCD+0x56>
     e56:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Character);
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Character<<4);
     e58:	61 2f       	mov	r22, r17
     e5a:	62 95       	swap	r22
     e5c:	60 7f       	andi	r22, 0xF0	; 240
     e5e:	82 e4       	ldi	r24, 0x42	; 66
     e60:	0e 94 c8 07 	call	0xf90	; 0xf90 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	86 e3       	ldi	r24, 0x36	; 54
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
     e70:	41 e0       	ldi	r20, 0x01	; 1
     e72:	62 e0       	ldi	r22, 0x02	; 2
     e74:	86 e3       	ldi	r24, 0x36	; 54
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     e7c:	8f e3       	ldi	r24, 0x3F	; 63
     e7e:	9f e1       	ldi	r25, 0x1F	; 31
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <Send_String_LCD+0x80>
     e84:	00 c0       	rjmp	.+0      	; 0xe86 <Send_String_LCD+0x86>
     e86:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	62 e0       	ldi	r22, 0x02	; 2
     e8c:	86 e3       	ldi	r24, 0x36	; 54
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 92 07 	call	0xf24	; 0xf24 <GPIO_Pin_Write>
     e94:	ef e3       	ldi	r30, 0x3F	; 63
     e96:	ff e1       	ldi	r31, 0x1F	; 31
     e98:	31 97       	sbiw	r30, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <Send_String_LCD+0x98>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <Send_String_LCD+0x9e>
     e9e:	00 00       	nop
     ea0:	8f e9       	ldi	r24, 0x9F	; 159
     ea2:	9f e0       	ldi	r25, 0x0F	; 15
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <Send_String_LCD+0xa4>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <Send_String_LCD+0xaa>
     eaa:	00 00       	nop
	Send_Command_LCD(Clear_Display);
	_delay_ms(10);	
}
void Send_String_LCD(uint_8 *String)
{
	while((*String) != '\0')
     eac:	19 91       	ld	r17, Y+
     eae:	11 11       	cpse	r17, r1
     eb0:	b1 cf       	rjmp	.-158    	; 0xe14 <Send_String_LCD+0x14>
	{
		Send_char_LCD(*String);
		String++;
	}
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	08 95       	ret

00000eba <GPIO_Pin_Configuration>:
		default:
		break;
	}
}
void GPIO_Pin_Configuration (GPIO_Register* Chip_port,GPIO_pin_number pin_num,GPIO_pin_Type  O_Or_I_Mode )
{
     eba:	fc 01       	movw	r30, r24
	 //because of the factor by which we can select the functionality of the function is the Mode of pin , we perform Switch case on the mode 
	 switch (O_Or_I_Mode)  // switch is more fast and readable than if because we know the three available options
     ebc:	41 30       	cpi	r20, 0x01	; 1
     ebe:	19 f1       	breq	.+70     	; 0xf06 <GPIO_Pin_Configuration+0x4c>
     ec0:	98 f0       	brcs	.+38     	; 0xee8 <GPIO_Pin_Configuration+0x2e>
     ec2:	42 30       	cpi	r20, 0x02	; 2
     ec4:	81 f4       	brne	.+32     	; 0xee6 <GPIO_Pin_Configuration+0x2c>
		case INPUT_Float:
		CLEAR_BIT(Chip_port->DDR ,pin_num);
		CLEAR_BIT(Chip_port->PORT,pin_num);
		break;
		case INPUT_Pullup:
		CLEAR_BIT(Chip_port->DDR ,pin_num);
     ec6:	21 81       	ldd	r18, Z+1	; 0x01
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	06 2e       	mov	r0, r22
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <GPIO_Pin_Configuration+0x18>
     ed0:	88 0f       	add	r24, r24
     ed2:	0a 94       	dec	r0
     ed4:	ea f7       	brpl	.-6      	; 0xed0 <GPIO_Pin_Configuration+0x16>
     ed6:	98 2f       	mov	r25, r24
     ed8:	90 95       	com	r25
     eda:	92 23       	and	r25, r18
     edc:	91 83       	std	Z+1, r25	; 0x01
		SET_BIT  (Chip_port->PORT,pin_num);
     ede:	92 81       	ldd	r25, Z+2	; 0x02
     ee0:	98 2b       	or	r25, r24
     ee2:	92 83       	std	Z+2, r25	; 0x02
		break;
     ee4:	08 95       	ret
     ee6:	08 95       	ret
		case OUTPUT:
		SET_BIT  (Chip_port->DDR ,pin_num);
     ee8:	21 81       	ldd	r18, Z+1	; 0x01
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	06 2e       	mov	r0, r22
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <GPIO_Pin_Configuration+0x3a>
     ef2:	88 0f       	add	r24, r24
     ef4:	0a 94       	dec	r0
     ef6:	ea f7       	brpl	.-6      	; 0xef2 <GPIO_Pin_Configuration+0x38>
     ef8:	28 2b       	or	r18, r24
     efa:	21 83       	std	Z+1, r18	; 0x01
		CLEAR_BIT(Chip_port->PORT,pin_num);
     efc:	92 81       	ldd	r25, Z+2	; 0x02
     efe:	80 95       	com	r24
     f00:	89 23       	and	r24, r25
     f02:	82 83       	std	Z+2, r24	; 0x02
     f04:	08 95       	ret
{
	 //because of the factor by which we can select the functionality of the function is the Mode of pin , we perform Switch case on the mode 
	 switch (O_Or_I_Mode)  // switch is more fast and readable than if because we know the three available options
	 {
		case INPUT_Float:
		CLEAR_BIT(Chip_port->DDR ,pin_num);
     f06:	21 81       	ldd	r18, Z+1	; 0x01
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	06 2e       	mov	r0, r22
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <GPIO_Pin_Configuration+0x58>
     f10:	88 0f       	add	r24, r24
     f12:	0a 94       	dec	r0
     f14:	ea f7       	brpl	.-6      	; 0xf10 <GPIO_Pin_Configuration+0x56>
     f16:	80 95       	com	r24
     f18:	28 23       	and	r18, r24
     f1a:	21 83       	std	Z+1, r18	; 0x01
		CLEAR_BIT(Chip_port->PORT,pin_num);
     f1c:	92 81       	ldd	r25, Z+2	; 0x02
     f1e:	98 23       	and	r25, r24
     f20:	92 83       	std	Z+2, r25	; 0x02
		break;
     f22:	08 95       	ret

00000f24 <GPIO_Pin_Write>:
 	}

}
void GPIO_Pin_Write(GPIO_Register *Chip_port,GPIO_pin_number pin_num,Digital_pinState Pin_state)
{
	 switch(Pin_state)
     f24:	44 23       	and	r20, r20
     f26:	71 f0       	breq	.+28     	; 0xf44 <GPIO_Pin_Write+0x20>
     f28:	41 30       	cpi	r20, 0x01	; 1
     f2a:	c1 f4       	brne	.+48     	; 0xf5c <GPIO_Pin_Write+0x38>
	 {
		case HIGH:
		SET_BIT(Chip_port->PORT,pin_num);
     f2c:	fc 01       	movw	r30, r24
     f2e:	42 81       	ldd	r20, Z+2	; 0x02
     f30:	21 e0       	ldi	r18, 0x01	; 1
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	06 2e       	mov	r0, r22
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <GPIO_Pin_Write+0x16>
     f38:	22 0f       	add	r18, r18
     f3a:	0a 94       	dec	r0
     f3c:	ea f7       	brpl	.-6      	; 0xf38 <GPIO_Pin_Write+0x14>
     f3e:	42 2b       	or	r20, r18
     f40:	42 83       	std	Z+2, r20	; 0x02
		break;
     f42:	08 95       	ret
		case LOW:
		CLEAR_BIT(Chip_port->PORT,pin_num);
     f44:	fc 01       	movw	r30, r24
     f46:	42 81       	ldd	r20, Z+2	; 0x02
     f48:	21 e0       	ldi	r18, 0x01	; 1
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	06 2e       	mov	r0, r22
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <GPIO_Pin_Write+0x2e>
     f50:	22 0f       	add	r18, r18
     f52:	0a 94       	dec	r0
     f54:	ea f7       	brpl	.-6      	; 0xf50 <GPIO_Pin_Write+0x2c>
     f56:	20 95       	com	r18
     f58:	24 23       	and	r18, r20
     f5a:	22 83       	std	Z+2, r18	; 0x02
     f5c:	08 95       	ret

00000f5e <GPIO_Pin_Read>:
	 }
}

Digital_pinState GPIO_Pin_Read  (GPIO_Register *Chip_port,GPIO_pin_number pin_num)
{
	return READ_BIT(Chip_port->PIN,pin_num);
     f5e:	fc 01       	movw	r30, r24
     f60:	20 81       	ld	r18, Z
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	06 2e       	mov	r0, r22
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_Pin_Read+0x10>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_Pin_Read+0xc>
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	82 23       	and	r24, r18
     f76:	93 23       	and	r25, r19
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <GPIO_Pin_Read+0x20>
     f7a:	95 95       	asr	r25
     f7c:	87 95       	ror	r24
     f7e:	6a 95       	dec	r22
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <GPIO_Pin_Read+0x1c>
}
     f82:	08 95       	ret

00000f84 <GPIO_Port_Configuration>:
	/* We Must Check That THe Value Of The configuration Of The Port Does Not exceed The 8 bit (0 <-> 255) */
	if (port_Value <= Max_uint8_Value && port_Value >= Min_uint8_Value)
	{
		/* The Value On The 8 bit DDR To Define Each Pin From The 8 Pins Of The Port As input Or Output */
		/* equal the port to the 0xFF to get the output */
		Chip_port->DDR = port_Value;
     f84:	fc 01       	movw	r30, r24
     f86:	61 83       	std	Z+1, r22	; 0x01
     f88:	08 95       	ret

00000f8a <GPIO_Port_Write>:
{
	/* We Must Check That THe Value Of The configuration Of The Port Does Not exceed The 8 bit (0 <-> 255) */
	if (port_Value <= Max_uint8_Value && port_Value >= Min_uint8_Value)
	{
		/* Get Out The 8bit Value On The * Pins Of The Port */
		Chip_port->PORT = port_Value;
     f8a:	fc 01       	movw	r30, r24
     f8c:	62 83       	std	Z+2, r22	; 0x02
     f8e:	08 95       	ret

00000f90 <GPIO_Write_High_Nibble>:
}


void GPIO_Write_High_Nibble(uint_8 Port_Name,uint_8 High_Nibble_value)
{
	High_Nibble_value &=0xf0;
     f90:	60 7f       	andi	r22, 0xF0	; 240
	switch(Port_Name)
     f92:	82 34       	cpi	r24, 0x42	; 66
     f94:	71 f0       	breq	.+28     	; 0xfb2 <GPIO_Write_High_Nibble+0x22>
     f96:	28 f0       	brcs	.+10     	; 0xfa2 <GPIO_Write_High_Nibble+0x12>
     f98:	83 34       	cpi	r24, 0x43	; 67
     f9a:	89 f0       	breq	.+34     	; 0xfbe <GPIO_Write_High_Nibble+0x2e>
     f9c:	84 34       	cpi	r24, 0x44	; 68
     f9e:	a9 f0       	breq	.+42     	; 0xfca <GPIO_Write_High_Nibble+0x3a>
     fa0:	08 95       	ret
     fa2:	81 34       	cpi	r24, 0x41	; 65
     fa4:	c9 f4       	brne	.+50     	; 0xfd8 <GPIO_Write_High_Nibble+0x48>
	{
		case 'A':
		Port_A->PORT &=0x0f;
     fa6:	8b b3       	in	r24, 0x1b	; 27
     fa8:	8f 70       	andi	r24, 0x0F	; 15
     faa:	8b bb       	out	0x1b, r24	; 27
		Port_A->PORT |=High_Nibble_value;
     fac:	8b b3       	in	r24, 0x1b	; 27
     fae:	86 2b       	or	r24, r22
     fb0:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		Port_B->PORT &=0x0f;
     fb2:	88 b3       	in	r24, 0x18	; 24
     fb4:	8f 70       	andi	r24, 0x0F	; 15
     fb6:	88 bb       	out	0x18, r24	; 24
		Port_B->PORT |=High_Nibble_value;
     fb8:	88 b3       	in	r24, 0x18	; 24
     fba:	86 2b       	or	r24, r22
     fbc:	88 bb       	out	0x18, r24	; 24
		case 'C':
		Port_C->PORT &=0x0f;
     fbe:	85 b3       	in	r24, 0x15	; 21
     fc0:	8f 70       	andi	r24, 0x0F	; 15
     fc2:	85 bb       	out	0x15, r24	; 21
		Port_C->PORT |=High_Nibble_value;
     fc4:	85 b3       	in	r24, 0x15	; 21
     fc6:	86 2b       	or	r24, r22
     fc8:	85 bb       	out	0x15, r24	; 21
		case 'D':
		Port_D->PORT &=0x0f;
     fca:	82 b3       	in	r24, 0x12	; 18
     fcc:	8f 70       	andi	r24, 0x0F	; 15
     fce:	82 bb       	out	0x12, r24	; 18
		Port_D->PORT |=High_Nibble_value;
     fd0:	82 b3       	in	r24, 0x12	; 18
     fd2:	86 2b       	or	r24, r22
     fd4:	82 bb       	out	0x12, r24	; 18
     fd6:	08 95       	ret
     fd8:	08 95       	ret

00000fda <__vector_1>:
void (* EXT_INT1_ISR) (void) =  NULL;
void (* EXT_INT2_ISR) (void) =  NULL;
void (* ADC_INT_ISR)  (void) =  NULL;

ISR (INT0_vect)
{
     fda:	1f 92       	push	r1
     fdc:	0f 92       	push	r0
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	0f 92       	push	r0
     fe2:	11 24       	eor	r1, r1
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
	if (EXT_INT0_ISR != NULL)  // there is code in the function 
     ffc:	e0 91 e9 00 	lds	r30, 0x00E9
    1000:	f0 91 ea 00 	lds	r31, 0x00EA
    1004:	30 97       	sbiw	r30, 0x00	; 0
    1006:	09 f0       	breq	.+2      	; 0x100a <__vector_1+0x30>
	{
		EXT_INT0_ISR();
    1008:	09 95       	icall
	}
}
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <__vector_2>:

ISR (INT1_vect,ISR_NAKED)
{
	if (EXT_INT1_ISR != NULL)
    102c:	e0 91 e7 00 	lds	r30, 0x00E7
    1030:	f0 91 e8 00 	lds	r31, 0x00E8
    1034:	30 97       	sbiw	r30, 0x00	; 0
    1036:	09 f0       	breq	.+2      	; 0x103a <__vector_3>
	{
		EXT_INT1_ISR();
    1038:	09 95       	icall

0000103a <__vector_3>:
	}
}

ISR (INT2_vect)
{
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	2f 93       	push	r18
    1046:	3f 93       	push	r19
    1048:	4f 93       	push	r20
    104a:	5f 93       	push	r21
    104c:	6f 93       	push	r22
    104e:	7f 93       	push	r23
    1050:	8f 93       	push	r24
    1052:	9f 93       	push	r25
    1054:	af 93       	push	r26
    1056:	bf 93       	push	r27
    1058:	ef 93       	push	r30
    105a:	ff 93       	push	r31
	if (EXT_INT2_ISR != NULL)
    105c:	e0 91 e5 00 	lds	r30, 0x00E5
    1060:	f0 91 e6 00 	lds	r31, 0x00E6
    1064:	30 97       	sbiw	r30, 0x00	; 0
    1066:	09 f0       	breq	.+2      	; 0x106a <__vector_3+0x30>
	{
		EXT_INT2_ISR();
    1068:	09 95       	icall
	}
}
    106a:	ff 91       	pop	r31
    106c:	ef 91       	pop	r30
    106e:	bf 91       	pop	r27
    1070:	af 91       	pop	r26
    1072:	9f 91       	pop	r25
    1074:	8f 91       	pop	r24
    1076:	7f 91       	pop	r23
    1078:	6f 91       	pop	r22
    107a:	5f 91       	pop	r21
    107c:	4f 91       	pop	r20
    107e:	3f 91       	pop	r19
    1080:	2f 91       	pop	r18
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <__vector_16>:
ISR (ADC_vect)
{
    108c:	1f 92       	push	r1
    108e:	0f 92       	push	r0
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	0f 92       	push	r0
    1094:	11 24       	eor	r1, r1
    1096:	2f 93       	push	r18
    1098:	3f 93       	push	r19
    109a:	4f 93       	push	r20
    109c:	5f 93       	push	r21
    109e:	6f 93       	push	r22
    10a0:	7f 93       	push	r23
    10a2:	8f 93       	push	r24
    10a4:	9f 93       	push	r25
    10a6:	af 93       	push	r26
    10a8:	bf 93       	push	r27
    10aa:	ef 93       	push	r30
    10ac:	ff 93       	push	r31
	if (ADC_INT_ISR != NULL)
    10ae:	e0 91 e3 00 	lds	r30, 0x00E3
    10b2:	f0 91 e4 00 	lds	r31, 0x00E4
    10b6:	30 97       	sbiw	r30, 0x00	; 0
    10b8:	09 f0       	breq	.+2      	; 0x10bc <__vector_16+0x30>
	{
		ADC_INT_ISR();
    10ba:	09 95       	icall
	}
}
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <Timer2_OverFlow_Callback>:
	}
}

void Timer2_OverFlow_Callback(void (*TIMER2_Overflow_User_ptr) (void))
{
	if(TIMER2_Overflow_User_ptr != NULL)
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	21 f0       	breq	.+8      	; 0x10ea <Timer2_OverFlow_Callback+0xc>
	{
		CP_TIMER2_Overflow_User_ptr =TIMER2_Overflow_User_ptr;
    10e2:	90 93 ee 00 	sts	0x00EE, r25
    10e6:	80 93 ed 00 	sts	0x00ED, r24
    10ea:	08 95       	ret

000010ec <TIMER_Init>:
		CP_TIMER2_CompareMatch_User_ptr =TIMER2_CompareMatch_User_ptr;
	}
}

void TIMER_Init(TIMER_DataType Timer_Details,uint_8 inital_Value)
{
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <TIMER_Init+0xa>
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <TIMER_Init+0xc>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <TIMER_Init+0xe>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	94 2f       	mov	r25, r20
    1100:	49 83       	std	Y+1, r20	; 0x01
    1102:	e5 2f       	mov	r30, r21
    1104:	5a 83       	std	Y+2, r21	; 0x02
    1106:	46 2f       	mov	r20, r22
    1108:	6b 83       	std	Y+3, r22	; 0x03
    110a:	37 2f       	mov	r19, r23
    110c:	7c 83       	std	Y+4, r23	; 0x04
    110e:	8d 83       	std	Y+5, r24	; 0x05
	/* make temporary Register To Hold The Initiate Value */
    uint_8 TCCR_Temp = 0x00;
	uint_8 TIMSK_Temp = 0x00;
	//uint_8 TIFR_Temp  = 0x00;
	switch (Timer_Details.Timer_Number)
    1110:	99 23       	and	r25, r25
    1112:	39 f1       	breq	.+78     	; 0x1162 <TIMER_Init+0x76>
    1114:	91 30       	cpi	r25, 0x01	; 1
    1116:	d1 f4       	brne	.+52     	; 0x114c <TIMER_Init+0x60>
    1118:	e1 50       	subi	r30, 0x01	; 1
    111a:	e3 30       	cpi	r30, 0x03	; 3
    111c:	78 f1       	brcs	.+94     	; 0x117c <TIMER_Init+0x90>
    111e:	10 e0       	ldi	r17, 0x00	; 0
			SET_BIT(TCCR_Temp,WGM20_bit);
			break;
			default:
			break;
		}
		switch(Timer_Details.Timer_CLK)
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	4b 30       	cpi	r20, 0x0B	; 11
    1124:	51 05       	cpc	r21, r1
    1126:	90 f5       	brcc	.+100    	; 0x118c <TIMER_Init+0xa0>
    1128:	fa 01       	movw	r30, r20
    112a:	e6 5d       	subi	r30, 0xD6	; 214
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__tablejump2__>
			CLEAR_BIT(TCCR_Temp,COM21_bit);
			break;
			case OC_ClearOn_Compare_match:
			case NON_inverting_mode:
			case Clear_upCount_Set_DownCount:
			GPIO_Pin_Configuration(Port_D,PIN7,OUTPUT);
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	67 e0       	ldi	r22, 0x07	; 7
    1136:	80 e3       	ldi	r24, 0x30	; 48
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	2e 83       	std	Y+6, r18	; 0x06
    113c:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
			CLEAR_BIT(TCCR_Temp,COM20_bit);
    1140:	1f 7e       	andi	r17, 0xEF	; 239
			SET_BIT  (TCCR_Temp,COM21_bit);
    1142:	10 62       	ori	r17, 0x20	; 32
			break;
    1144:	2e 81       	ldd	r18, Y+6	; 0x06
			GPIO_Pin_Configuration(Port_D,PIN7,OUTPUT);
			SET_BIT  (TCCR_Temp,COM20_bit);
			SET_BIT  (TCCR_Temp,COM21_bit);
			break;
		}
		TCCR2 = TCCR_Temp;
    1146:	15 bd       	out	0x25, r17	; 37
		TIMSK = TIMSK_Temp;
    1148:	09 bf       	out	0x39, r16	; 57
		OCR2 = inital_Value;
    114a:	23 bd       	out	0x23, r18	; 35
		break;
	}
}
    114c:	26 96       	adiw	r28, 0x06	; 6
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	08 95       	ret
    1162:	e1 50       	subi	r30, 0x01	; 1
    1164:	e3 30       	cpi	r30, 0x03	; 3
    1166:	28 f1       	brcs	.+74     	; 0x11b2 <TIMER_Init+0xc6>
    1168:	10 e0       	ldi	r17, 0x00	; 0
			SET_BIT(TCCR_Temp,WGM00_bit);
			break;
			default:
			break;
		}
		switch(Timer_Details.Timer_CLK)
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	4a 30       	cpi	r20, 0x0A	; 10
    116e:	51 05       	cpc	r21, r1
    1170:	40 f5       	brcc	.+80     	; 0x11c2 <TIMER_Init+0xd6>
    1172:	fa 01       	movw	r30, r20
    1174:	eb 5c       	subi	r30, 0xCB	; 203
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__tablejump2__>
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	e8 52       	subi	r30, 0x28	; 40
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	10 81       	ld	r17, Z
			SET_BIT(TCCR_Temp,WGM20_bit);
			break;
			default:
			break;
		}
		switch(Timer_Details.Timer_CLK)
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	4b 30       	cpi	r20, 0x0B	; 11
    1188:	51 05       	cpc	r21, r1
    118a:	70 f2       	brcs	.-100    	; 0x1128 <TIMER_Init+0x3c>
			SET_BIT  (TCCR_Temp,CS22_bit);
			break;
			default:
			break;
		}
		SET_BIT(SREG,I_Bit);
    118c:	9f b7       	in	r25, 0x3f	; 63
    118e:	90 68       	ori	r25, 0x80	; 128
    1190:	9f bf       	out	0x3f, r25	; 63
		/* Set Up The Interrupt Source By Set The Bit referee To The That Source InThe TIMASK */
		switch(Timer_Details.Timer_INT_source)
    1192:	31 30       	cpi	r19, 0x01	; 1
    1194:	09 f4       	brne	.+2      	; 0x1198 <TIMER_Init+0xac>
    1196:	66 c0       	rjmp	.+204    	; 0x1264 <TIMER_Init+0x178>
    1198:	32 30       	cpi	r19, 0x02	; 2
    119a:	09 f4       	brne	.+2      	; 0x119e <TIMER_Init+0xb2>
    119c:	61 c0       	rjmp	.+194    	; 0x1260 <TIMER_Init+0x174>

void TIMER_Init(TIMER_DataType Timer_Details,uint_8 inital_Value)
{
	/* make temporary Register To Hold The Initiate Value */
    uint_8 TCCR_Temp = 0x00;
	uint_8 TIMSK_Temp = 0x00;
    119e:	00 e0       	ldi	r16, 0x00	; 0
			break;
			default:
			break;

		}
		switch (Timer_Details.OC_Pin_State)
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	88 30       	cpi	r24, 0x08	; 8
    11a4:	91 05       	cpc	r25, r1
    11a6:	78 f6       	brcc	.-98     	; 0x1146 <TIMER_Init+0x5a>
    11a8:	fc 01       	movw	r30, r24
    11aa:	e1 5c       	subi	r30, 0xC1	; 193
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__tablejump2__>
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	e5 52       	subi	r30, 0x25	; 37
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	10 81       	ld	r17, Z
			SET_BIT(TCCR_Temp,WGM00_bit);
			break;
			default:
			break;
		}
		switch(Timer_Details.Timer_CLK)
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	4a 30       	cpi	r20, 0x0A	; 10
    11be:	51 05       	cpc	r21, r1
    11c0:	c0 f2       	brcs	.-80     	; 0x1172 <TIMER_Init+0x86>
			SET_BIT(TCCR_Temp,CS02_bit);
			break;
			default:
			break;
		}
		SET_BIT(SREG,I_Bit);
    11c2:	9f b7       	in	r25, 0x3f	; 63
    11c4:	90 68       	ori	r25, 0x80	; 128
    11c6:	9f bf       	out	0x3f, r25	; 63
		/* Set Up The Interrupt Source By Set The Bit referee To The That Source InThe TIMASK */
		switch(Timer_Details.Timer_INT_source)
    11c8:	31 30       	cpi	r19, 0x01	; 1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <TIMER_Init+0xe2>
    11cc:	4f c0       	rjmp	.+158    	; 0x126c <TIMER_Init+0x180>
    11ce:	32 30       	cpi	r19, 0x02	; 2
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <TIMER_Init+0xe8>
    11d2:	4a c0       	rjmp	.+148    	; 0x1268 <TIMER_Init+0x17c>

void TIMER_Init(TIMER_DataType Timer_Details,uint_8 inital_Value)
{
	/* make temporary Register To Hold The Initiate Value */
    uint_8 TCCR_Temp = 0x00;
	uint_8 TIMSK_Temp = 0x00;
    11d4:	00 e0       	ldi	r16, 0x00	; 0
			break;
			default:
			break;

		}
		switch (Timer_Details.OC_Pin_State)
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	88 30       	cpi	r24, 0x08	; 8
    11da:	91 05       	cpc	r25, r1
    11dc:	78 f4       	brcc	.+30     	; 0x11fc <TIMER_Init+0x110>
    11de:	fc 01       	movw	r30, r24
    11e0:	e9 5b       	subi	r30, 0xB9	; 185
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__tablejump2__>
			CLEAR_BIT(TCCR_Temp,COM01_bit);
			break;
			case OC_ClearOn_Compare_match:
			case NON_inverting_mode:
			case Clear_upCount_Set_DownCount:
			GPIO_Pin_Configuration(Port_B,PIN3,OUTPUT);
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	63 e0       	ldi	r22, 0x03	; 3
    11ec:	86 e3       	ldi	r24, 0x36	; 54
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	2e 83       	std	Y+6, r18	; 0x06
    11f2:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
			CLEAR_BIT(TCCR_Temp,COM00_bit);
    11f6:	1f 7e       	andi	r17, 0xEF	; 239
			SET_BIT  (TCCR_Temp,COM01_bit);
    11f8:	10 62       	ori	r17, 0x20	; 32
			break;
    11fa:	2e 81       	ldd	r18, Y+6	; 0x06
			GPIO_Pin_Configuration(Port_B,PIN3,OUTPUT);
			SET_BIT  (TCCR_Temp,COM00_bit);
			SET_BIT  (TCCR_Temp,COM01_bit);
			break;
		}
		TCCR0 = TCCR_Temp;
    11fc:	13 bf       	out	0x33, r17	; 51
		TIMSK = TIMSK_Temp;
    11fe:	09 bf       	out	0x39, r16	; 57
		OCR0 = inital_Value;
    1200:	2c bf       	out	0x3c, r18	; 60
		break;
    1202:	a4 cf       	rjmp	.-184    	; 0x114c <TIMER_Init+0x60>
		}
		switch (Timer_Details.OC_Pin_State)
		{
			case OC_Disconnected:
			CLEAR_BIT(TCCR_Temp,COM00_bit);
			CLEAR_BIT(TCCR_Temp,COM01_bit);
    1204:	1f 7c       	andi	r17, 0xCF	; 207
			break;
    1206:	fa cf       	rjmp	.-12     	; 0x11fc <TIMER_Init+0x110>
			SET_BIT  (TCCR_Temp,COM01_bit);
			break;
			case OC_SetOn_Compare_match:
			case inverting_mode:
			case Set_upCount_Clear_DownCount:
			GPIO_Pin_Configuration(Port_B,PIN3,OUTPUT);
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	63 e0       	ldi	r22, 0x03	; 3
    120c:	86 e3       	ldi	r24, 0x36	; 54
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	2e 83       	std	Y+6, r18	; 0x06
    1212:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
			SET_BIT  (TCCR_Temp,COM00_bit);
			SET_BIT  (TCCR_Temp,COM01_bit);
    1216:	10 63       	ori	r17, 0x30	; 48
    1218:	2e 81       	ldd	r18, Y+6	; 0x06
			break;
    121a:	f0 cf       	rjmp	.-32     	; 0x11fc <TIMER_Init+0x110>
			case OC_Disconnected:
			CLEAR_BIT(TCCR_Temp,COM00_bit);
			CLEAR_BIT(TCCR_Temp,COM01_bit);
			break;
			case OC_Toggle:
			GPIO_Pin_Configuration(Port_B,PIN3,OUTPUT);
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	63 e0       	ldi	r22, 0x03	; 3
    1220:	86 e3       	ldi	r24, 0x36	; 54
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	2e 83       	std	Y+6, r18	; 0x06
    1226:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
			SET_BIT  (TCCR_Temp,COM00_bit);
			CLEAR_BIT(TCCR_Temp,COM01_bit);
    122a:	1f 7d       	andi	r17, 0xDF	; 223
    122c:	10 61       	ori	r17, 0x10	; 16
			break;
    122e:	2e 81       	ldd	r18, Y+6	; 0x06
    1230:	e5 cf       	rjmp	.-54     	; 0x11fc <TIMER_Init+0x110>
			case OC_Disconnected:
			CLEAR_BIT(TCCR_Temp,COM20_bit);
			CLEAR_BIT(TCCR_Temp,COM21_bit);
			break;
			case OC_Toggle:
			GPIO_Pin_Configuration(Port_D,PIN7,OUTPUT);
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	67 e0       	ldi	r22, 0x07	; 7
    1236:	80 e3       	ldi	r24, 0x30	; 48
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	2e 83       	std	Y+6, r18	; 0x06
    123c:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
			SET_BIT  (TCCR_Temp,COM20_bit);
			CLEAR_BIT(TCCR_Temp,COM21_bit);
    1240:	1f 7d       	andi	r17, 0xDF	; 223
    1242:	10 61       	ori	r17, 0x10	; 16
			break;
    1244:	2e 81       	ldd	r18, Y+6	; 0x06
    1246:	7f cf       	rjmp	.-258    	; 0x1146 <TIMER_Init+0x5a>
			SET_BIT  (TCCR_Temp,COM21_bit);
			break;
			case OC_SetOn_Compare_match:
			case inverting_mode:
			case Set_upCount_Clear_DownCount:
			GPIO_Pin_Configuration(Port_D,PIN7,OUTPUT);
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	67 e0       	ldi	r22, 0x07	; 7
    124c:	80 e3       	ldi	r24, 0x30	; 48
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	2e 83       	std	Y+6, r18	; 0x06
    1252:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_Pin_Configuration>
			SET_BIT  (TCCR_Temp,COM20_bit);
			SET_BIT  (TCCR_Temp,COM21_bit);
    1256:	10 63       	ori	r17, 0x30	; 48
    1258:	2e 81       	ldd	r18, Y+6	; 0x06
			break;
    125a:	75 cf       	rjmp	.-278    	; 0x1146 <TIMER_Init+0x5a>
		}
		switch (Timer_Details.OC_Pin_State)
		{
			case OC_Disconnected:
			CLEAR_BIT(TCCR_Temp,COM20_bit);
			CLEAR_BIT(TCCR_Temp,COM21_bit);
    125c:	1f 7c       	andi	r17, 0xCF	; 207
			break;
    125e:	73 cf       	rjmp	.-282    	; 0x1146 <TIMER_Init+0x5a>
			/* This Interrupt happened when the TCNT reach its Max then return to zero again */
			SET_BIT(TIMSK_Temp,TOIE2_bit);
			break;
			case Timer_OutPut_Compare_match:
			/* This Interrupt happened When The TCNT Reach The Value Equal The Value OnThe OCR and Return To Zero */
			SET_BIT(TIMSK_Temp,OCIE2_bit);
    1260:	00 e8       	ldi	r16, 0x80	; 128
			break;
    1262:	9e cf       	rjmp	.-196    	; 0x11a0 <TIMER_Init+0xb4>
		/* Set Up The Interrupt Source By Set The Bit referee To The That Source InThe TIMASK */
		switch(Timer_Details.Timer_INT_source)
		{
			case Timer_Overflow_Interrupt:
			/* This Interrupt happened when the TCNT reach its Max then return to zero again */
			SET_BIT(TIMSK_Temp,TOIE2_bit);
    1264:	00 e4       	ldi	r16, 0x40	; 64
    1266:	9c cf       	rjmp	.-200    	; 0x11a0 <TIMER_Init+0xb4>
			/* This Interrupt happened when the TCNT reach its Max then return to zero again */
			SET_BIT(TIMSK_Temp,TOIE0_bit);
			break;
			case Timer_OutPut_Compare_match:
			/* This Interrupt happened When The TCNT Reach The Value Equal The Value OnThe OCR and Return To Zero */
			SET_BIT(TIMSK_Temp,OCIE0_bit);
    1268:	02 e0       	ldi	r16, 0x02	; 2
			break;
    126a:	b5 cf       	rjmp	.-150    	; 0x11d6 <TIMER_Init+0xea>
		/* Set Up The Interrupt Source By Set The Bit referee To The That Source InThe TIMASK */
		switch(Timer_Details.Timer_INT_source)
		{
			case Timer_Overflow_Interrupt:
			/* This Interrupt happened when the TCNT reach its Max then return to zero again */
			SET_BIT(TIMSK_Temp,TOIE0_bit);
    126c:	01 e0       	ldi	r16, 0x01	; 1
    126e:	b3 cf       	rjmp	.-154    	; 0x11d6 <TIMER_Init+0xea>
			SET_BIT  (TCCR_Temp,CS02_bit);
			break;
			case External_Clock_Rising_edge:
			SET_BIT(TCCR_Temp,CS00_bit);
			SET_BIT(TCCR_Temp,CS01_bit);
			SET_BIT(TCCR_Temp,CS02_bit);
    1270:	17 60       	ori	r17, 0x07	; 7
			break;
    1272:	a7 cf       	rjmp	.-178    	; 0x11c2 <TIMER_Init+0xd6>
			SET_BIT  (TCCR_Temp,CS00_bit);
			CLEAR_BIT(TCCR_Temp,CS01_bit);
			SET_BIT  (TCCR_Temp,CS02_bit);
			break;
			case External_Clock_falling_edge:
			CLEAR_BIT(TCCR_Temp,CS00_bit);
    1274:	1e 7f       	andi	r17, 0xFE	; 254
			SET_BIT  (TCCR_Temp,CS01_bit);
			SET_BIT  (TCCR_Temp,CS02_bit);
    1276:	16 60       	ori	r17, 0x06	; 6
			break;
    1278:	a4 cf       	rjmp	.-184    	; 0x11c2 <TIMER_Init+0xd6>
			SET_BIT  (TCCR_Temp,CS02_bit);
			break;
			case Clk_1024:
			//TCCR0= (1<<CS00_bit)|(1<<CS02_bit);
			SET_BIT  (TCCR_Temp,CS00_bit);
			CLEAR_BIT(TCCR_Temp,CS01_bit);
    127a:	1d 7f       	andi	r17, 0xFD	; 253
			SET_BIT  (TCCR_Temp,CS02_bit);
    127c:	15 60       	ori	r17, 0x05	; 5
			break;
    127e:	a1 cf       	rjmp	.-190    	; 0x11c2 <TIMER_Init+0xd6>
			SET_BIT(TCCR_Temp,CS01_bit);
			CLEAR_BIT(TCCR_Temp,CS02_bit);
			break;
			case Clk_256:
			CLEAR_BIT(TCCR_Temp,CS00_bit);
			CLEAR_BIT(TCCR_Temp,CS01_bit);
    1280:	1c 7f       	andi	r17, 0xFC	; 252
			SET_BIT  (TCCR_Temp,CS02_bit);
    1282:	14 60       	ori	r17, 0x04	; 4
			break;
    1284:	9e cf       	rjmp	.-196    	; 0x11c2 <TIMER_Init+0xd6>
			CLEAR_BIT(TCCR_Temp,CS02_bit);
			break;
			case Clk_64:
			SET_BIT(TCCR_Temp,CS00_bit);
			SET_BIT(TCCR_Temp,CS01_bit);
			CLEAR_BIT(TCCR_Temp,CS02_bit);
    1286:	1b 7f       	andi	r17, 0xFB	; 251
    1288:	13 60       	ori	r17, 0x03	; 3
			break;
    128a:	9b cf       	rjmp	.-202    	; 0x11c2 <TIMER_Init+0xd6>
			CLEAR_BIT(TCCR_Temp,CS02_bit);
			break;
			case Clk_8:
			CLEAR_BIT(TCCR_Temp,CS00_bit);
			SET_BIT  (TCCR_Temp,CS01_bit);
			CLEAR_BIT(TCCR_Temp,CS02_bit);
    128c:	1a 7f       	andi	r17, 0xFA	; 250
    128e:	12 60       	ori	r17, 0x02	; 2
			break;
    1290:	98 cf       	rjmp	.-208    	; 0x11c2 <TIMER_Init+0xd6>
			CLEAR_BIT(TCCR_Temp,CS02_bit);
			break;
			case No_Prescaling:
			SET_BIT  (TCCR_Temp,CS00_bit);
			CLEAR_BIT(TCCR_Temp,CS01_bit);
			CLEAR_BIT(TCCR_Temp,CS02_bit);
    1292:	19 7f       	andi	r17, 0xF9	; 249
    1294:	11 60       	ori	r17, 0x01	; 1
			break;
    1296:	95 cf       	rjmp	.-214    	; 0x11c2 <TIMER_Init+0xd6>
		switch(Timer_Details.Timer_CLK)
		{
			case No_Clock_source :
			CLEAR_BIT(TCCR_Temp,CS00_bit);
			CLEAR_BIT(TCCR_Temp,CS01_bit);
			CLEAR_BIT(TCCR_Temp,CS02_bit);
    1298:	18 7f       	andi	r17, 0xF8	; 248
			break;
    129a:	93 cf       	rjmp	.-218    	; 0x11c2 <TIMER_Init+0xd6>
			SET_BIT  (TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
			CLEAR_BIT(TCCR_Temp,CS22_bit);
			break;
			case Timer2_OneSec_CLK:
			SET_BIT(ASSR,AS2_bit);
    129c:	92 b5       	in	r25, 0x22	; 34
    129e:	90 61       	ori	r25, 0x10	; 16
    12a0:	92 bd       	out	0x22, r25	; 34
			SET_BIT(TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
    12a2:	1d 7f       	andi	r17, 0xFD	; 253
			SET_BIT(TCCR_Temp,CS22_bit);
    12a4:	15 60       	ori	r17, 0x05	; 5
			break;
    12a6:	72 cf       	rjmp	.-284    	; 0x118c <TIMER_Init+0xa0>
			SET_BIT  (TCCR_Temp,CS22_bit);
			break;
			case Clk_1024:
			SET_BIT  (TCCR_Temp,CS20_bit);
			SET_BIT(TCCR_Temp,CS21_bit);
			SET_BIT  (TCCR_Temp,CS22_bit);
    12a8:	17 60       	ori	r17, 0x07	; 7
			break;
    12aa:	70 cf       	rjmp	.-288    	; 0x118c <TIMER_Init+0xa0>
			SET_BIT(TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
			SET_BIT  (TCCR_Temp,CS22_bit);
			break;
			case Clk_256:
			CLEAR_BIT(TCCR_Temp,CS20_bit);
    12ac:	1e 7f       	andi	r17, 0xFE	; 254
			SET_BIT(TCCR_Temp,CS21_bit);
			SET_BIT  (TCCR_Temp,CS22_bit);
    12ae:	16 60       	ori	r17, 0x06	; 6
			break;
    12b0:	6d cf       	rjmp	.-294    	; 0x118c <TIMER_Init+0xa0>
			CLEAR_BIT(TCCR_Temp,CS21_bit);
			SET_BIT  (TCCR_Temp,CS22_bit);
			break;
			case CLK_128:
			SET_BIT(TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
    12b2:	1d 7f       	andi	r17, 0xFD	; 253
			SET_BIT  (TCCR_Temp,CS22_bit);
    12b4:	15 60       	ori	r17, 0x05	; 5
			break;
    12b6:	6a cf       	rjmp	.-300    	; 0x118c <TIMER_Init+0xa0>
			SET_BIT(TCCR_Temp,CS21_bit);
			CLEAR_BIT(TCCR_Temp,CS22_bit);
			break;
			case Clk_64:
			CLEAR_BIT(TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
    12b8:	1c 7f       	andi	r17, 0xFC	; 252
			SET_BIT  (TCCR_Temp,CS22_bit);
    12ba:	14 60       	ori	r17, 0x04	; 4
			break;
    12bc:	67 cf       	rjmp	.-306    	; 0x118c <TIMER_Init+0xa0>
			CLEAR_BIT(TCCR_Temp,CS22_bit);
			break;
			case CLK_32:
			SET_BIT(TCCR_Temp,CS20_bit);
			SET_BIT(TCCR_Temp,CS21_bit);
			CLEAR_BIT(TCCR_Temp,CS22_bit);
    12be:	1b 7f       	andi	r17, 0xFB	; 251
    12c0:	13 60       	ori	r17, 0x03	; 3
			break;
    12c2:	64 cf       	rjmp	.-312    	; 0x118c <TIMER_Init+0xa0>
			SET_BIT(TCCR_Temp,CS22_bit);
			break;
			case Clk_8:
			CLEAR_BIT(TCCR_Temp,CS20_bit);
			SET_BIT  (TCCR_Temp,CS21_bit);
			CLEAR_BIT(TCCR_Temp,CS22_bit);
    12c4:	1a 7f       	andi	r17, 0xFA	; 250
    12c6:	12 60       	ori	r17, 0x02	; 2
			break;
    12c8:	61 cf       	rjmp	.-318    	; 0x118c <TIMER_Init+0xa0>
			CLEAR_BIT(TCCR_Temp,CS22_bit);
			break;
			case No_Prescaling:
			SET_BIT  (TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
			CLEAR_BIT(TCCR_Temp,CS22_bit);
    12ca:	19 7f       	andi	r17, 0xF9	; 249
    12cc:	11 60       	ori	r17, 0x01	; 1
			break;
    12ce:	5e cf       	rjmp	.-324    	; 0x118c <TIMER_Init+0xa0>
		switch(Timer_Details.Timer_CLK)
		{
			case No_Clock_source :
			CLEAR_BIT(TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
			CLEAR_BIT(TCCR_Temp,CS22_bit);
    12d0:	18 7f       	andi	r17, 0xF8	; 248
			break;
    12d2:	5c cf       	rjmp	.-328    	; 0x118c <TIMER_Init+0xa0>

000012d4 <__vector_10>:
	}
}
*/

ISR (TIMER0_COMP_vect)
{
    12d4:	1f 92       	push	r1
    12d6:	0f 92       	push	r0
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	0f 92       	push	r0
    12dc:	11 24       	eor	r1, r1
    12de:	2f 93       	push	r18
    12e0:	3f 93       	push	r19
    12e2:	4f 93       	push	r20
    12e4:	5f 93       	push	r21
    12e6:	6f 93       	push	r22
    12e8:	7f 93       	push	r23
    12ea:	8f 93       	push	r24
    12ec:	9f 93       	push	r25
    12ee:	af 93       	push	r26
    12f0:	bf 93       	push	r27
    12f2:	ef 93       	push	r30
    12f4:	ff 93       	push	r31
	if (CP_TIMER0_CompareMatch_User_ptr != NULL)
    12f6:	e0 91 ef 00 	lds	r30, 0x00EF
    12fa:	f0 91 f0 00 	lds	r31, 0x00F0
    12fe:	30 97       	sbiw	r30, 0x00	; 0
    1300:	09 f0       	breq	.+2      	; 0x1304 <__vector_10+0x30>
	{
		CP_TIMER0_CompareMatch_User_ptr();
    1302:	09 95       	icall
	}
}
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	7f 91       	pop	r23
    1312:	6f 91       	pop	r22
    1314:	5f 91       	pop	r21
    1316:	4f 91       	pop	r20
    1318:	3f 91       	pop	r19
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <__vector_11>:
ISR (TIMER0_OVF_vect)
{
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
    1330:	2f 93       	push	r18
    1332:	3f 93       	push	r19
    1334:	4f 93       	push	r20
    1336:	5f 93       	push	r21
    1338:	6f 93       	push	r22
    133a:	7f 93       	push	r23
    133c:	8f 93       	push	r24
    133e:	9f 93       	push	r25
    1340:	af 93       	push	r26
    1342:	bf 93       	push	r27
    1344:	ef 93       	push	r30
    1346:	ff 93       	push	r31
	if (CP_TIMER0_Overflow_User_ptr != NULL)
    1348:	e0 91 f1 00 	lds	r30, 0x00F1
    134c:	f0 91 f2 00 	lds	r31, 0x00F2
    1350:	30 97       	sbiw	r30, 0x00	; 0
    1352:	09 f0       	breq	.+2      	; 0x1356 <__vector_11+0x30>
	{
		CP_TIMER0_Overflow_User_ptr();
    1354:	09 95       	icall
	}
}
    1356:	ff 91       	pop	r31
    1358:	ef 91       	pop	r30
    135a:	bf 91       	pop	r27
    135c:	af 91       	pop	r26
    135e:	9f 91       	pop	r25
    1360:	8f 91       	pop	r24
    1362:	7f 91       	pop	r23
    1364:	6f 91       	pop	r22
    1366:	5f 91       	pop	r21
    1368:	4f 91       	pop	r20
    136a:	3f 91       	pop	r19
    136c:	2f 91       	pop	r18
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <__vector_5>:
ISR (TIMER2_OVF_vect)
{
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
	if (CP_TIMER2_Overflow_User_ptr != NULL)
    139a:	e0 91 ed 00 	lds	r30, 0x00ED
    139e:	f0 91 ee 00 	lds	r31, 0x00EE
    13a2:	30 97       	sbiw	r30, 0x00	; 0
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <__vector_5+0x30>
	{
		CP_TIMER2_Overflow_User_ptr();
    13a6:	09 95       	icall
	}
}
    13a8:	ff 91       	pop	r31
    13aa:	ef 91       	pop	r30
    13ac:	bf 91       	pop	r27
    13ae:	af 91       	pop	r26
    13b0:	9f 91       	pop	r25
    13b2:	8f 91       	pop	r24
    13b4:	7f 91       	pop	r23
    13b6:	6f 91       	pop	r22
    13b8:	5f 91       	pop	r21
    13ba:	4f 91       	pop	r20
    13bc:	3f 91       	pop	r19
    13be:	2f 91       	pop	r18
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	0f 90       	pop	r0
    13c6:	1f 90       	pop	r1
    13c8:	18 95       	reti

000013ca <__vector_4>:
ISR (TIMER2_COMP_vect)
{
    13ca:	1f 92       	push	r1
    13cc:	0f 92       	push	r0
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	0f 92       	push	r0
    13d2:	11 24       	eor	r1, r1
    13d4:	2f 93       	push	r18
    13d6:	3f 93       	push	r19
    13d8:	4f 93       	push	r20
    13da:	5f 93       	push	r21
    13dc:	6f 93       	push	r22
    13de:	7f 93       	push	r23
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
    13e4:	af 93       	push	r26
    13e6:	bf 93       	push	r27
    13e8:	ef 93       	push	r30
    13ea:	ff 93       	push	r31
	if (CP_TIMER2_CompareMatch_User_ptr != NULL)
    13ec:	e0 91 eb 00 	lds	r30, 0x00EB
    13f0:	f0 91 ec 00 	lds	r31, 0x00EC
    13f4:	30 97       	sbiw	r30, 0x00	; 0
    13f6:	09 f0       	breq	.+2      	; 0x13fa <__vector_4+0x30>
	{
		CP_TIMER2_CompareMatch_User_ptr();
    13f8:	09 95       	icall
	}
    13fa:	ff 91       	pop	r31
    13fc:	ef 91       	pop	r30
    13fe:	bf 91       	pop	r27
    1400:	af 91       	pop	r26
    1402:	9f 91       	pop	r25
    1404:	8f 91       	pop	r24
    1406:	7f 91       	pop	r23
    1408:	6f 91       	pop	r22
    140a:	5f 91       	pop	r21
    140c:	4f 91       	pop	r20
    140e:	3f 91       	pop	r19
    1410:	2f 91       	pop	r18
    1412:	0f 90       	pop	r0
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	0f 90       	pop	r0
    1418:	1f 90       	pop	r1
    141a:	18 95       	reti

0000141c <__tablejump2__>:
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31

00001420 <__tablejump__>:
    1420:	05 90       	lpm	r0, Z+
    1422:	f4 91       	lpm	r31, Z
    1424:	e0 2d       	mov	r30, r0
    1426:	09 94       	ijmp

00001428 <_exit>:
    1428:	f8 94       	cli

0000142a <__stop_program>:
    142a:	ff cf       	rjmp	.-2      	; 0x142a <__stop_program>
