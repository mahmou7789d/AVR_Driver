
AVR_32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000016  00800060  00800060  00000452  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000138  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ca9  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003d2  00000000  00000000  00001263  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000526  00000000  00000000  00001635  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000558  00000000  00000000  00001b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000c95  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000013ae  00000000  00000000  00002d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f8  00000000  00000000  000040f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_1>
   8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_2>
   c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_3>
  10:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_4>
  14:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_10>
  2c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_13>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_14>
  3c:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_15>
  40:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ed 01 	jmp	0x3da	; 0x3da <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main ()
{
	
}
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	08 95       	ret

00000098 <__vector_13>:
		SET_BIT(UCSRB_Temp,TXEN);
		break; 
		default:
		break;
	}
	switch(USART0.Communcation_Mode)
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63

void USART_Init(void)
{
	uint_8 UCSRA_Temp=0;
	uint_8 UCSRB_Temp=0;
	uint_8 UCSRC_Temp=0;
  9e:	0f 92       	push	r0



void USART_Init(void)
{
	uint_8 UCSRA_Temp=0;
  a0:	11 24       	eor	r1, r1
		
		break;
		default:
		break;
	}
	switch(USART0.Communication_Processor)
  a2:	2f 93       	push	r18
  a4:	3f 93       	push	r19
  a6:	4f 93       	push	r20
  a8:	5f 93       	push	r21
	{
		case USART_SingleProcessor:
		CLEAR_BIT(UCSRA_Temp,MPCM);
		break;
		case USART_MultiProcessor:
		SET_BIT(UCSRA_Temp,MPCM);
  aa:	6f 93       	push	r22
		break;
		default:
		break;
	}
	switch(USART0.Interrupt_Source)
  ac:	7f 93       	push	r23
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	af 93       	push	r26
  b4:	bf 93       	push	r27
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	e0 91 64 00 	lds	r30, 0x0064
  be:	f0 91 65 00 	lds	r31, 0x0065
  c2:	30 97       	sbiw	r30, 0x00	; 0
  c4:	09 f0       	breq	.+2      	; 0xc8 <__vector_13+0x30>
  c6:	09 95       	icall
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
		SET_BIT(UCSRB_Temp,UDRIE);
		break;
		default:
		break;
	}
	switch(USART0.Character_Size)
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	7f 91       	pop	r23
  d6:	6f 91       	pop	r22
  d8:	5f 91       	pop	r21
  da:	4f 91       	pop	r20
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
		CLEAR_BIT(UCSRB_Temp,UCSZ2);
		CLEAR_BIT(UCSRC_Temp,UCSZ1);
		CLEAR_BIT(UCSRC_Temp,UCSZ0);
		break;
		case Size_6bit:
		CLEAR_BIT(UCSRB_Temp,UCSZ2);
  e6:	1f 90       	pop	r1
		CLEAR_BIT(UCSRC_Temp,UCSZ1);
		SET_BIT  (UCSRC_Temp,UCSZ0);
		break;
  e8:	18 95       	reti

000000ea <__vector_15>:
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
		CLEAR_BIT(UCSRC_Temp,UCSZ0);
		break;
		case Size_6bit:
		CLEAR_BIT(UCSRB_Temp,UCSZ2);
		CLEAR_BIT(UCSRC_Temp,UCSZ1);
		SET_BIT  (UCSRC_Temp,UCSZ0);
  f2:	11 24       	eor	r1, r1
		break;
		default:
		break;
		
	}
	switch(USART0.Frame_Control)
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
 10c:	e0 91 62 00 	lds	r30, 0x0062
		SET_BIT(UCSRC_Temp,USBS);
		break;
		default:
		break;
	}
	UBRRH = ((uint_16)UBBR_Temp)>>8;//shift right to get the most bits of UBBR
 110:	f0 91 63 00 	lds	r31, 0x0063
	UBRRL = ((uint_16)UBBR_Temp);
	UCSRA =UCSRA_Temp;
 114:	30 97       	sbiw	r30, 0x00	; 0
	UCSRC =UCSRC_Temp;
 116:	09 f0       	breq	.+2      	; 0x11a <__vector_15+0x30>
	UCSRB =UCSRB_Temp;//put in the last because on it the enable bit of the UART
 118:	09 95       	icall
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_14>:
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
{
	uint_8 UCSRA_Temp=0;
	uint_8 UCSRB_Temp=0;
	uint_8 UCSRC_Temp=0;
	float_32 UBBR_Temp=0.0;
	switch (USART0.Micro_State)
 140:	0f b6       	in	r0, 0x3f	; 63
		SET_BIT(UCSRB_Temp,TXEN);
		break; 
		default:
		break;
	}
	switch(USART0.Communcation_Mode)
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
		break;
		case USART_Asyn_DoupleSpeed:
		CLEAR_BIT(UCSRC_Temp,UMSEL);
		SET_BIT  (UCSRA_Temp,U2X);
		CLEAR_BIT(UCSRC_Temp,UCPOL);
		UBBR_Temp = ((float_32)F_CPU)/(8.0*USART0.Baud_Rate) - 0.5;
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
 15e:	e0 91 60 00 	lds	r30, 0x0060
 162:	f0 91 61 00 	lds	r31, 0x0061
 166:	30 97       	sbiw	r30, 0x00	; 0
 168:	09 f0       	breq	.+2      	; 0x16c <__vector_14+0x30>
 16a:	09 95       	icall
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
		break;
 18c:	18 95       	reti

0000018e <__vector_1>:
void (* EXT_INT1_ISR) (void) =  NULL;
void (* EXT_INT2_ISR) (void) =  NULL;
void (* ADC_INT_ISR)  (void) =  NULL;

ISR (INT0_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	if (EXT_INT0_ISR != NULL)  // there is code in the function 
 1b0:	e0 91 6c 00 	lds	r30, 0x006C
 1b4:	f0 91 6d 00 	lds	r31, 0x006D
 1b8:	30 97       	sbiw	r30, 0x00	; 0
 1ba:	09 f0       	breq	.+2      	; 0x1be <__vector_1+0x30>
	{
		EXT_INT0_ISR();
 1bc:	09 95       	icall
	}
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__vector_2>:

ISR (INT1_vect,ISR_NAKED)
{
	if (EXT_INT1_ISR != NULL)
 1e0:	e0 91 6a 00 	lds	r30, 0x006A
 1e4:	f0 91 6b 00 	lds	r31, 0x006B
 1e8:	30 97       	sbiw	r30, 0x00	; 0
 1ea:	09 f0       	breq	.+2      	; 0x1ee <__vector_3>
	{
		EXT_INT1_ISR();
 1ec:	09 95       	icall

000001ee <__vector_3>:
	}
}

ISR (INT2_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	4f 93       	push	r20
 1fe:	5f 93       	push	r21
 200:	6f 93       	push	r22
 202:	7f 93       	push	r23
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
	if (EXT_INT2_ISR != NULL)
 210:	e0 91 68 00 	lds	r30, 0x0068
 214:	f0 91 69 00 	lds	r31, 0x0069
 218:	30 97       	sbiw	r30, 0x00	; 0
 21a:	09 f0       	breq	.+2      	; 0x21e <__vector_3+0x30>
	{
		EXT_INT2_ISR();
 21c:	09 95       	icall
	}
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_16>:
ISR (ADC_vect)
{
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	if (ADC_INT_ISR != NULL)
 262:	e0 91 66 00 	lds	r30, 0x0066
 266:	f0 91 67 00 	lds	r31, 0x0067
 26a:	30 97       	sbiw	r30, 0x00	; 0
 26c:	09 f0       	breq	.+2      	; 0x270 <__vector_16+0x30>
	{
		ADC_INT_ISR();
 26e:	09 95       	icall
	}
}
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	bf 91       	pop	r27
 276:	af 91       	pop	r26
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	7f 91       	pop	r23
 27e:	6f 91       	pop	r22
 280:	5f 91       	pop	r21
 282:	4f 91       	pop	r20
 284:	3f 91       	pop	r19
 286:	2f 91       	pop	r18
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <__vector_10>:
		CP_TIMER2_CompareMatch_User_ptr =TIMER2_CompareMatch_User_ptr;
	}
}

ISR (TIMER0_COMP_vect)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	if (CP_TIMER0_CompareMatch_User_ptr != NULL)
 2b4:	e0 91 72 00 	lds	r30, 0x0072
 2b8:	f0 91 73 00 	lds	r31, 0x0073
 2bc:	30 97       	sbiw	r30, 0x00	; 0
 2be:	09 f0       	breq	.+2      	; 0x2c2 <__vector_10+0x30>
	{
		CP_TIMER0_CompareMatch_User_ptr();
 2c0:	09 95       	icall
	}
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <__vector_11>:
ISR (TIMER0_OVF_vect)
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	2f 93       	push	r18
 2f0:	3f 93       	push	r19
 2f2:	4f 93       	push	r20
 2f4:	5f 93       	push	r21
 2f6:	6f 93       	push	r22
 2f8:	7f 93       	push	r23
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
 2fe:	af 93       	push	r26
 300:	bf 93       	push	r27
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
	if (CP_TIMER0_Overflow_User_ptr != NULL)
 306:	e0 91 74 00 	lds	r30, 0x0074
 30a:	f0 91 75 00 	lds	r31, 0x0075
 30e:	30 97       	sbiw	r30, 0x00	; 0
 310:	09 f0       	breq	.+2      	; 0x314 <__vector_11+0x30>
	{
		CP_TIMER0_Overflow_User_ptr();
 312:	09 95       	icall
	}
}
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	7f 91       	pop	r23
 322:	6f 91       	pop	r22
 324:	5f 91       	pop	r21
 326:	4f 91       	pop	r20
 328:	3f 91       	pop	r19
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <__vector_5>:
ISR (TIMER2_OVF_vect)
{
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	4f 93       	push	r20
 346:	5f 93       	push	r21
 348:	6f 93       	push	r22
 34a:	7f 93       	push	r23
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
	if (CP_TIMER2_Overflow_User_ptr != NULL)
 358:	e0 91 70 00 	lds	r30, 0x0070
 35c:	f0 91 71 00 	lds	r31, 0x0071
 360:	30 97       	sbiw	r30, 0x00	; 0
 362:	09 f0       	breq	.+2      	; 0x366 <__vector_5+0x30>
	{
		CP_TIMER2_Overflow_User_ptr();
 364:	09 95       	icall
	}
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	7f 91       	pop	r23
 374:	6f 91       	pop	r22
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <__vector_4>:
ISR (TIMER2_COMP_vect)
{
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	2f 93       	push	r18
 394:	3f 93       	push	r19
 396:	4f 93       	push	r20
 398:	5f 93       	push	r21
 39a:	6f 93       	push	r22
 39c:	7f 93       	push	r23
 39e:	8f 93       	push	r24
 3a0:	9f 93       	push	r25
 3a2:	af 93       	push	r26
 3a4:	bf 93       	push	r27
 3a6:	ef 93       	push	r30
 3a8:	ff 93       	push	r31
	if (CP_TIMER2_CompareMatch_User_ptr != NULL)
 3aa:	e0 91 6e 00 	lds	r30, 0x006E
 3ae:	f0 91 6f 00 	lds	r31, 0x006F
 3b2:	30 97       	sbiw	r30, 0x00	; 0
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <__vector_4+0x30>
	{
		CP_TIMER2_CompareMatch_User_ptr();
 3b6:	09 95       	icall
	}
}
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <_exit>:
		SET_BIT(UCSRB_Temp,RXCIE);
		SET_BIT(UCSRB_Temp,UDRIE);
		break;
		case USART_Tx_Complete_UDR_Enable:
		SET_BIT(UCSRB_Temp,TXCIE);
		SET_BIT(UCSRB_Temp,UDRIE);
 3da:	f8 94       	cli

000003dc <__stop_program>:
		break;
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
