
AVR_32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00000f30  00000fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008000ac  008000ac  00001010  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000036ba  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b02  00000000  00000000  0000493a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d6c  00000000  00000000  0000543c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007a0  00000000  00000000  000061a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001063  00000000  00000000  00006948  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d88  00000000  00000000  000079ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  00009733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__ctors_end>
   4:	0c 94 6f 05 	jmp	0xade	; 0xade <__vector_1>
   8:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__vector_2>
   c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__vector_3>
  10:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__vector_4>
  14:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__vector_5>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__vector_10>
  2c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__vector_13>
  38:	0c 94 b9 04 	jmp	0x972	; 0x972 <__vector_14>
  3c:	0c 94 90 04 	jmp	0x920	; 0x920 <__vector_15>
  40:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__vector_16>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	8e 07       	cpc	r24, r30
  56:	8b 07       	cpc	r24, r27
  58:	88 07       	cpc	r24, r24
  5a:	85 07       	cpc	r24, r21
  5c:	82 07       	cpc	r24, r18
  5e:	7f 07       	cpc	r23, r31
  60:	7c 07       	cpc	r23, r28
  62:	7a 07       	cpc	r23, r26
  64:	ec 06       	cpc	r14, r28
  66:	ec 06       	cpc	r14, r28
  68:	74 07       	cpc	r23, r20
  6a:	72 07       	cpc	r23, r18
  6c:	6f 07       	cpc	r22, r31
  6e:	6c 07       	cpc	r22, r28
  70:	07 07       	cpc	r16, r23
  72:	69 07       	cpc	r22, r25
  74:	07 07       	cpc	r16, r23
  76:	66 07       	cpc	r22, r22
  78:	63 07       	cpc	r22, r19
  7a:	60 07       	cpc	r22, r16
  7c:	5e 07       	cpc	r21, r30
  7e:	54 07       	cpc	r21, r20
  80:	3f 07       	cpc	r19, r31
  82:	bf 06       	cpc	r11, r31
  84:	4a 07       	cpc	r20, r26
  86:	bf 06       	cpc	r11, r31
  88:	4a 07       	cpc	r20, r26
  8a:	bf 06       	cpc	r11, r31
  8c:	4a 07       	cpc	r20, r26
  8e:	28 07       	cpc	r18, r24
  90:	34 07       	cpc	r19, r20
  92:	1a 07       	cpc	r17, r26
  94:	2a 07       	cpc	r18, r26
  96:	1a 07       	cpc	r17, r26
  98:	2a 07       	cpc	r18, r26
  9a:	1a 07       	cpc	r17, r26
  9c:	2a 07       	cpc	r18, r26

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf e5       	ldi	r28, 0x5F	; 95
  a4:	d8 e0       	ldi	r29, 0x08	; 8
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	10 e0       	ldi	r17, 0x00	; 0
  ac:	a0 e6       	ldi	r26, 0x60	; 96
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e0 e3       	ldi	r30, 0x30	; 48
  b2:	ff e0       	ldi	r31, 0x0F	; 15
  b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
  b6:	05 90       	lpm	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	ac 3a       	cpi	r26, 0xAC	; 172
  bc:	b1 07       	cpc	r27, r17
  be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	ac ea       	ldi	r26, 0xAC	; 172
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a7 3c       	cpi	r26, 0xC7	; 199
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 13 01 	call	0x226	; 0x226 <main>
  d4:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <ISR_CTC_Timer>:
	
}
void ISR_CTC_Timer(void)
{
	
	counter1++;
  dc:	80 91 c4 00 	lds	r24, 0x00C4
  e0:	90 91 c5 00 	lds	r25, 0x00C5
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	90 93 c5 00 	sts	0x00C5, r25
  ea:	80 93 c4 00 	sts	0x00C4, r24
  ee:	08 95       	ret

000000f0 <Game_Init_System>:
Keypad_Data keypad_app = {Port_A, PIN0, PIN1, PIN2, PIN3, PIN4, PIN5,PIN6, PIN7};
volatile uint_16 counter1,Flag1;
uint_8 keypad_Read_Value;
void ISR_CTC_Timer(void);
void Game_Init_System()
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
	TIMER_Init(counter_app,78);
  f4:	2e e4       	ldi	r18, 0x4E	; 78
  f6:	40 91 6a 00 	lds	r20, 0x006A
  fa:	50 91 6b 00 	lds	r21, 0x006B
  fe:	60 91 6c 00 	lds	r22, 0x006C
 102:	70 91 6d 00 	lds	r23, 0x006D
 106:	80 91 6e 00 	lds	r24, 0x006E
 10a:	0e 94 9c 06 	call	0xd38	; 0xd38 <TIMER_Init>
	Timer0_CompareMatch_Callback(&ISR_CTC_Timer);
 10e:	8e e6       	ldi	r24, 0x6E	; 110
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Timer0_CompareMatch_Callback>
	keypad_Init(keypad_app);
 116:	00 91 60 00 	lds	r16, 0x0060
 11a:	10 91 61 00 	lds	r17, 0x0061
 11e:	20 91 62 00 	lds	r18, 0x0062
 122:	30 91 63 00 	lds	r19, 0x0063
 126:	40 91 64 00 	lds	r20, 0x0064
 12a:	50 91 65 00 	lds	r21, 0x0065
 12e:	60 91 66 00 	lds	r22, 0x0066
 132:	70 91 67 00 	lds	r23, 0x0067
 136:	80 91 68 00 	lds	r24, 0x0068
 13a:	90 91 69 00 	lds	r25, 0x0069
 13e:	0e 94 18 01 	call	0x230	; 0x230 <keypad_Init>
	LCD_Init();
 142:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_Init>
	Send_String_LCD("Hello,Sir");
 146:	8f e7       	ldi	r24, 0x7F	; 127
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 0a 04 	call	0x814	; 0x814 <Send_String_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	81 ee       	ldi	r24, 0xE1	; 225
 152:	94 e0       	ldi	r25, 0x04	; 4
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <Game_Init_System+0x64>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <Game_Init_System+0x6e>
 15e:	00 00       	nop
	_delay_ms(100);
	Clear_LCD();
 160:	0e 94 b9 03 	call	0x772	; 0x772 <Clear_LCD>
	Send_String_LCD("3+?=5");
 164:	89 e8       	ldi	r24, 0x89	; 137
 166:	90 e0       	ldi	r25, 0x00	; 0
}
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
	keypad_Init(keypad_app);
	LCD_Init();
	Send_String_LCD("Hello,Sir");
	_delay_ms(100);
	Clear_LCD();
	Send_String_LCD("3+?=5");
 16c:	0c 94 0a 04 	jmp	0x814	; 0x814 <Send_String_LCD>

00000170 <Game_Playing_System>:
}
void Game_Playing_System()
{
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
	do 
	{
		if (counter1>1000)
		{
			Flag1=1;
 178:	c1 e0       	ldi	r28, 0x01	; 1
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	06 c0       	rjmp	.+12     	; 0x18a <Game_Playing_System+0x1a>
		}
		keypad_Read_Value=keypad_Read(keypad_app);
		_delay_ms(100);
	} while (keypad_Read_Value ==Keypad_Not_Pressed&&Flag1 ==0);
 17e:	80 91 c2 00 	lds	r24, 0x00C2
 182:	90 91 c3 00 	lds	r25, 0x00C3
 186:	89 2b       	or	r24, r25
 188:	91 f5       	brne	.+100    	; 0x1ee <Game_Playing_System+0x7e>
}
void Game_Playing_System()
{
	do 
	{
		if (counter1>1000)
 18a:	80 91 c4 00 	lds	r24, 0x00C4
 18e:	90 91 c5 00 	lds	r25, 0x00C5
 192:	89 3e       	cpi	r24, 0xE9	; 233
 194:	93 40       	sbci	r25, 0x03	; 3
 196:	20 f0       	brcs	.+8      	; 0x1a0 <Game_Playing_System+0x30>
		{
			Flag1=1;
 198:	d0 93 c3 00 	sts	0x00C3, r29
 19c:	c0 93 c2 00 	sts	0x00C2, r28
		}
		keypad_Read_Value=keypad_Read(keypad_app);
 1a0:	00 91 60 00 	lds	r16, 0x0060
 1a4:	10 91 61 00 	lds	r17, 0x0061
 1a8:	20 91 62 00 	lds	r18, 0x0062
 1ac:	30 91 63 00 	lds	r19, 0x0063
 1b0:	40 91 64 00 	lds	r20, 0x0064
 1b4:	50 91 65 00 	lds	r21, 0x0065
 1b8:	60 91 66 00 	lds	r22, 0x0066
 1bc:	70 91 67 00 	lds	r23, 0x0067
 1c0:	80 91 68 00 	lds	r24, 0x0068
 1c4:	90 91 69 00 	lds	r25, 0x0069
 1c8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <keypad_Read>
 1cc:	80 93 c6 00 	sts	0x00C6, r24
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	91 ee       	ldi	r25, 0xE1	; 225
 1d4:	24 e0       	ldi	r18, 0x04	; 4
 1d6:	81 50       	subi	r24, 0x01	; 1
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	20 40       	sbci	r18, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <Game_Playing_System+0x66>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <Game_Playing_System+0x70>
 1e0:	00 00       	nop
		_delay_ms(100);
	} while (keypad_Read_Value ==Keypad_Not_Pressed&&Flag1 ==0);
 1e2:	80 91 c6 00 	lds	r24, 0x00C6
 1e6:	8f 3f       	cpi	r24, 0xFF	; 255
 1e8:	51 f2       	breq	.-108    	; 0x17e <Game_Playing_System+0xe>
	{
		Clear_LCD();
		Move_Curser_LCD(2,5);
		Send_String_LCD("Time is Over");
	}
	else if (keypad_Read_Value == '2')
 1ea:	82 33       	cpi	r24, 0x32	; 50
 1ec:	71 f0       	breq	.+28     	; 0x20a <Game_Playing_System+0x9a>
		Move_Curser_LCD(2,5);
		Send_String_LCD("Well Done");
	} 
	else
	{
		Clear_LCD();
 1ee:	0e 94 b9 03 	call	0x772	; 0x772 <Clear_LCD>
		Move_Curser_LCD(2,5);
 1f2:	65 e0       	ldi	r22, 0x05	; 5
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <Move_Curser_LCD>
		Send_String_LCD("Time is Over");
 1fa:	89 e9       	ldi	r24, 0x99	; 153
 1fc:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
	} 
	else
	{
		Clear_LCD();
		Move_Curser_LCD(2,5);
		Send_String_LCD("Time is Over");
 206:	0c 94 0a 04 	jmp	0x814	; 0x814 <Send_String_LCD>
		Move_Curser_LCD(2,5);
		Send_String_LCD("Time is Over");
	}
	else if (keypad_Read_Value == '2')
	{
		Clear_LCD();
 20a:	0e 94 b9 03 	call	0x772	; 0x772 <Clear_LCD>
		Move_Curser_LCD(2,5);
 20e:	65 e0       	ldi	r22, 0x05	; 5
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	0e 94 51 03 	call	0x6a2	; 0x6a2 <Move_Curser_LCD>
		Send_String_LCD("Well Done");
 216:	8f e8       	ldi	r24, 0x8F	; 143
 218:	90 e0       	ldi	r25, 0x00	; 0
		Clear_LCD();
		Move_Curser_LCD(2,5);
		Send_String_LCD("Time is Over");
	}
	
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
	} 
	else
	{
		Clear_LCD();
		Move_Curser_LCD(2,5);
		Send_String_LCD("Time is Over");
 222:	0c 94 0a 04 	jmp	0x814	; 0x814 <Send_String_LCD>

00000226 <main>:
	//Timer_OC0_NonPWM();
    //Timer_CTC_APP_Init();
	//Timer_NonInverting_FastPWM_Init();
	//Timer_PhaseCorrect_Init();
	//KeyPad_APP_init();
	Game_Init_System();
 226:	0e 94 78 00 	call	0xf0	; 0xf0 <Game_Init_System>
	Game_Playing_System();
 22a:	0e 94 b8 00 	call	0x170	; 0x170 <Game_Playing_System>
 22e:	ff cf       	rjmp	.-2      	; 0x22e <main+0x8>

00000230 <keypad_Init>:

#include  <Keypad.h>
#include <util/delay.h>

void   keypad_Init (Keypad_Data Keypad)
{
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	2a 97       	sbiw	r28, 0x0a	; 10
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	09 83       	std	Y+1, r16	; 0x01
 24a:	1a 83       	std	Y+2, r17	; 0x02
 24c:	3c 83       	std	Y+4, r19	; 0x04
 24e:	4d 83       	std	Y+5, r20	; 0x05
 250:	5e 83       	std	Y+6, r21	; 0x06
 252:	6f 83       	std	Y+7, r22	; 0x07
 254:	78 87       	std	Y+8, r23	; 0x08
 256:	89 87       	std	Y+9, r24	; 0x09
 258:	9a 87       	std	Y+10, r25	; 0x0a
 25a:	09 81       	ldd	r16, Y+1	; 0x01
 25c:	1a 81       	ldd	r17, Y+2	; 0x02
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KROW1,OUTPUT);
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	62 2f       	mov	r22, r18
 262:	c8 01       	movw	r24, r16
 264:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KROW2,OUTPUT); 
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	6c 81       	ldd	r22, Y+4	; 0x04
 26c:	c8 01       	movw	r24, r16
 26e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KROW3,OUTPUT); 
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	6d 81       	ldd	r22, Y+5	; 0x05
 276:	c8 01       	movw	r24, r16
 278:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KROW4,OUTPUT);  
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	6e 81       	ldd	r22, Y+6	; 0x06
 280:	c8 01       	movw	r24, r16
 282:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL1,INPUT_Pullup);
 286:	42 e0       	ldi	r20, 0x02	; 2
 288:	6f 81       	ldd	r22, Y+7	; 0x07
 28a:	c8 01       	movw	r24, r16
 28c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL2,INPUT_Pullup);
 290:	42 e0       	ldi	r20, 0x02	; 2
 292:	68 85       	ldd	r22, Y+8	; 0x08
 294:	c8 01       	movw	r24, r16
 296:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL3,INPUT_Pullup);
 29a:	42 e0       	ldi	r20, 0x02	; 2
 29c:	69 85       	ldd	r22, Y+9	; 0x09
 29e:	c8 01       	movw	r24, r16
 2a0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL4,INPUT_Pullup); 
 2a4:	42 e0       	ldi	r20, 0x02	; 2
 2a6:	6a 85       	ldd	r22, Y+10	; 0x0a
 2a8:	c8 01       	movw	r24, r16
	
}
 2aa:	2a 96       	adiw	r28, 0x0a	; 10
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KROW3,OUTPUT); 
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KROW4,OUTPUT);  
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL1,INPUT_Pullup);
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL2,INPUT_Pullup);
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL3,INPUT_Pullup);
	 GPIO_Pin_Configuration(Keypad.Keypad_port,Keypad.KCOL4,INPUT_Pullup); 
 2be:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>

000002c2 <keypad_Read>:
	
}
unsigned char keypad_Read(Keypad_Data Keypad)
{
 2c2:	8f 92       	push	r8
 2c4:	9f 92       	push	r9
 2c6:	af 92       	push	r10
 2c8:	bf 92       	push	r11
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	6a 97       	sbiw	r28, 0x1a	; 26
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	09 8b       	std	Y+17, r16	; 0x11
 2ec:	1a 8b       	std	Y+18, r17	; 0x12
 2ee:	2b 8b       	std	Y+19, r18	; 0x13
 2f0:	3c 8b       	std	Y+20, r19	; 0x14
 2f2:	4d 8b       	std	Y+21, r20	; 0x15
 2f4:	5e 8b       	std	Y+22, r21	; 0x16
 2f6:	6f 8b       	std	Y+23, r22	; 0x17
 2f8:	78 8f       	std	Y+24, r23	; 0x18
 2fa:	89 8f       	std	Y+25, r24	; 0x19
 2fc:	9a 8f       	std	Y+26, r25	; 0x1a
 2fe:	09 89       	ldd	r16, Y+17	; 0x11
 300:	1a 89       	ldd	r17, Y+18	; 0x12
	unsigned char Keypad_array[COL_Max][ROW_Max]= {{'7','8','9','A'},
 302:	80 e1       	ldi	r24, 0x10	; 16
 304:	ef e6       	ldi	r30, 0x6F	; 111
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	de 01       	movw	r26, r28
 30a:	11 96       	adiw	r26, 0x01	; 1
 30c:	01 90       	ld	r0, Z+
 30e:	0d 92       	st	X+, r0
 310:	8a 95       	dec	r24
 312:	e1 f7       	brne	.-8      	; 0x30c <keypad_Read+0x4a>
 314:	9b 88       	ldd	r9, Y+19	; 0x13
 316:	ac 88       	ldd	r10, Y+20	; 0x14
 318:	bd 88       	ldd	r11, Y+21	; 0x15
 31a:	ce 88       	ldd	r12, Y+22	; 0x16
 31c:	e1 2c       	mov	r14, r1
 31e:	f1 2c       	mov	r15, r1
	                                        {'4','5','6','B'},
	                                        {'1','2','3','C'},
	                                        {'#','0','*','D'}};
	unsigned char Row,Col,Read_Value;
	unsigned char Return_Value = 0xff;
 320:	88 24       	eor	r8, r8
 322:	8a 94       	dec	r8
	for (Row=0;Row<ROW_Max;Row++)
	{
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW1,HIGH);
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	69 2d       	mov	r22, r9
 328:	c8 01       	movw	r24, r16
 32a:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW2,HIGH);	
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	6a 2d       	mov	r22, r10
 332:	c8 01       	movw	r24, r16
 334:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW3,HIGH);	
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	6b 2d       	mov	r22, r11
 33c:	c8 01       	movw	r24, r16
 33e:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW4,HIGH);	
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	6c 2d       	mov	r22, r12
 346:	c8 01       	movw	r24, r16
 348:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
		GPIO_Pin_Write(Keypad.Keypad_port,Row,LOW);		
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	6e 2d       	mov	r22, r14
 350:	c8 01       	movw	r24, r16
 352:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
		for (Col=0;Col<COL_Max;Col++)
 356:	d1 2c       	mov	r13, r1
		{
			Read_Value =GPIO_Pin_Read(Keypad.Keypad_port,(Col+4));
 358:	64 e0       	ldi	r22, 0x04	; 4
 35a:	6d 0d       	add	r22, r13
 35c:	c8 01       	movw	r24, r16
 35e:	0e 94 34 05 	call	0xa68	; 0xa68 <GPIO_Pin_Read>
			if(!Read_Value)
 362:	88 23       	and	r24, r24
 364:	f9 f0       	breq	.+62     	; 0x3a4 <keypad_Read+0xe2>
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW1,HIGH);
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW2,HIGH);	
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW3,HIGH);	
		GPIO_Pin_Write(Keypad.Keypad_port,Keypad.KROW4,HIGH);	
		GPIO_Pin_Write(Keypad.Keypad_port,Row,LOW);		
		for (Col=0;Col<COL_Max;Col++)
 366:	d3 94       	inc	r13
 368:	94 e0       	ldi	r25, 0x04	; 4
 36a:	d9 12       	cpse	r13, r25
 36c:	f5 cf       	rjmp	.-22     	; 0x358 <keypad_Read+0x96>
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	e8 1a       	sub	r14, r24
 372:	f8 0a       	sbc	r15, r24
	                                        {'4','5','6','B'},
	                                        {'1','2','3','C'},
	                                        {'#','0','*','D'}};
	unsigned char Row,Col,Read_Value;
	unsigned char Return_Value = 0xff;
	for (Row=0;Row<ROW_Max;Row++)
 374:	94 e0       	ldi	r25, 0x04	; 4
 376:	e9 16       	cp	r14, r25
 378:	f1 04       	cpc	r15, r1
 37a:	a1 f6       	brne	.-88     	; 0x324 <keypad_Read+0x62>
			}
		}
	}
	if (!Read_Value);
	return Return_Value;
}
 37c:	88 2d       	mov	r24, r8
 37e:	6a 96       	adiw	r28, 0x1a	; 26
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	f8 94       	cli
 384:	de bf       	out	0x3e, r29	; 62
 386:	0f be       	out	0x3f, r0	; 63
 388:	cd bf       	out	0x3d, r28	; 61
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	df 90       	pop	r13
 398:	cf 90       	pop	r12
 39a:	bf 90       	pop	r11
 39c:	af 90       	pop	r10
 39e:	9f 90       	pop	r9
 3a0:	8f 90       	pop	r8
 3a2:	08 95       	ret
		for (Col=0;Col<COL_Max;Col++)
		{
			Read_Value =GPIO_Pin_Read(Keypad.Keypad_port,(Col+4));
			if(!Read_Value)
			{
				Return_Value =Keypad_array[Row][Col];
 3a4:	f7 01       	movw	r30, r14
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	ee 0f       	add	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	ed 0d       	add	r30, r13
 3b0:	f1 1d       	adc	r31, r1
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	8c 0f       	add	r24, r28
 3b8:	9d 1f       	adc	r25, r29
 3ba:	e8 0f       	add	r30, r24
 3bc:	f9 1f       	adc	r31, r25
 3be:	80 80       	ld	r8, Z
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	e8 1a       	sub	r14, r24
 3c4:	f8 0a       	sbc	r15, r24
	                                        {'4','5','6','B'},
	                                        {'1','2','3','C'},
	                                        {'#','0','*','D'}};
	unsigned char Row,Col,Read_Value;
	unsigned char Return_Value = 0xff;
	for (Row=0;Row<ROW_Max;Row++)
 3c6:	94 e0       	ldi	r25, 0x04	; 4
 3c8:	e9 16       	cp	r14, r25
 3ca:	f1 04       	cpc	r15, r1
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <keypad_Read+0x10e>
 3ce:	aa cf       	rjmp	.-172    	; 0x324 <keypad_Read+0x62>
 3d0:	d5 cf       	rjmp	.-86     	; 0x37c <keypad_Read+0xba>

000003d2 <LCD_Init>:
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	83 ec       	ldi	r24, 0xC3	; 195
 3d6:	99 e0       	ldi	r25, 0x09	; 9
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <LCD_Init+0x6>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_Init+0x10>
 3e2:	00 00       	nop
	Send_Command_LCD(Clear_Display);
	_delay_ms(10);
	
	#elif  defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Port_Configuration(Port_B,0XF0);
 3e4:	60 ef       	ldi	r22, 0xF0	; 240
 3e6:	86 e3       	ldi	r24, 0x36	; 54
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 47 05 	call	0xa8e	; 0xa8e <GPIO_Port_Configuration>
	GPIO_Pin_Configuration(Port_B,RS_Pin,OUTPUT);
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	86 e3       	ldi	r24, 0x36	; 54
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_B,EN_Pin,OUTPUT);
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	86 e3       	ldi	r24, 0x36	; 54
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_B,RW_Pin,OUTPUT);
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	86 e3       	ldi	r24, 0x36	; 54
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
	CLEAR_BIT(LCD_CONTROL_BIT_PORT,RW_Pin);
 412:	a9 98       	cbi	0x15, 1	; 21
 414:	8f e9       	ldi	r24, 0x9F	; 159
 416:	9f e0       	ldi	r25, 0x0F	; 15
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <LCD_Init+0x46>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <LCD_Init+0x4c>
 41e:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
 420:	62 e0       	ldi	r22, 0x02	; 2
 422:	82 e4       	ldi	r24, 0x42	; 66
 424:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	86 e3       	ldi	r24, 0x36	; 54
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	62 e0       	ldi	r22, 0x02	; 2
 438:	86 e3       	ldi	r24, 0x36	; 54
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 440:	8f e3       	ldi	r24, 0x3F	; 63
 442:	9f e1       	ldi	r25, 0x1F	; 31
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <LCD_Init+0x72>
 448:	00 c0       	rjmp	.+0      	; 0x44a <LCD_Init+0x78>
 44a:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	62 e0       	ldi	r22, 0x02	; 2
 450:	86 e3       	ldi	r24, 0x36	; 54
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 458:	8f e3       	ldi	r24, 0x3F	; 63
 45a:	9f e1       	ldi	r25, 0x1F	; 31
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <LCD_Init+0x8a>
 460:	00 c0       	rjmp	.+0      	; 0x462 <LCD_Init+0x90>
 462:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Command<<4);
 464:	60 e2       	ldi	r22, 0x20	; 32
 466:	82 e4       	ldi	r24, 0x42	; 66
 468:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 46c:	40 e0       	ldi	r20, 0x00	; 0
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	86 e3       	ldi	r24, 0x36	; 54
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	62 e0       	ldi	r22, 0x02	; 2
 47c:	86 e3       	ldi	r24, 0x36	; 54
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 484:	8f e3       	ldi	r24, 0x3F	; 63
 486:	9f e1       	ldi	r25, 0x1F	; 31
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <LCD_Init+0xb6>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <LCD_Init+0xbc>
 48e:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	62 e0       	ldi	r22, 0x02	; 2
 494:	86 e3       	ldi	r24, 0x36	; 54
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 49c:	8f e3       	ldi	r24, 0x3F	; 63
 49e:	9f e1       	ldi	r25, 0x1F	; 31
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LCD_Init+0xce>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LCD_Init+0xd4>
 4a6:	00 00       	nop
 4a8:	8f e9       	ldi	r24, 0x9F	; 159
 4aa:	9f e0       	ldi	r25, 0x0F	; 15
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <LCD_Init+0xda>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <LCD_Init+0xe0>
 4b2:	00 00       	nop
 4b4:	8f e9       	ldi	r24, 0x9F	; 159
 4b6:	9f e0       	ldi	r25, 0x0F	; 15
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_Init+0xe6>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_Init+0xec>
 4be:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
 4c0:	68 e2       	ldi	r22, 0x28	; 40
 4c2:	82 e4       	ldi	r24, 0x42	; 66
 4c4:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	86 e3       	ldi	r24, 0x36	; 54
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 4d4:	41 e0       	ldi	r20, 0x01	; 1
 4d6:	62 e0       	ldi	r22, 0x02	; 2
 4d8:	86 e3       	ldi	r24, 0x36	; 54
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 4e0:	8f e3       	ldi	r24, 0x3F	; 63
 4e2:	9f e1       	ldi	r25, 0x1F	; 31
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <LCD_Init+0x112>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <LCD_Init+0x118>
 4ea:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	62 e0       	ldi	r22, 0x02	; 2
 4f0:	86 e3       	ldi	r24, 0x36	; 54
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 4f8:	8f e3       	ldi	r24, 0x3F	; 63
 4fa:	9f e1       	ldi	r25, 0x1F	; 31
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <LCD_Init+0x12a>
 500:	00 c0       	rjmp	.+0      	; 0x502 <LCD_Init+0x130>
 502:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Command<<4);
 504:	60 e8       	ldi	r22, 0x80	; 128
 506:	82 e4       	ldi	r24, 0x42	; 66
 508:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 50c:	40 e0       	ldi	r20, 0x00	; 0
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	86 e3       	ldi	r24, 0x36	; 54
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	62 e0       	ldi	r22, 0x02	; 2
 51c:	86 e3       	ldi	r24, 0x36	; 54
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 524:	8f e3       	ldi	r24, 0x3F	; 63
 526:	9f e1       	ldi	r25, 0x1F	; 31
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <LCD_Init+0x156>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <LCD_Init+0x15c>
 52e:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 530:	40 e0       	ldi	r20, 0x00	; 0
 532:	62 e0       	ldi	r22, 0x02	; 2
 534:	86 e3       	ldi	r24, 0x36	; 54
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 53c:	8f e3       	ldi	r24, 0x3F	; 63
 53e:	9f e1       	ldi	r25, 0x1F	; 31
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <LCD_Init+0x16e>
 544:	00 c0       	rjmp	.+0      	; 0x546 <LCD_Init+0x174>
 546:	00 00       	nop
 548:	8f e9       	ldi	r24, 0x9F	; 159
 54a:	9f e0       	ldi	r25, 0x0F	; 15
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <LCD_Init+0x17a>
 550:	00 c0       	rjmp	.+0      	; 0x552 <LCD_Init+0x180>
 552:	00 00       	nop
 554:	8f e9       	ldi	r24, 0x9F	; 159
 556:	9f e0       	ldi	r25, 0x0F	; 15
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <LCD_Init+0x186>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <LCD_Init+0x18c>
 55e:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
 560:	6e e0       	ldi	r22, 0x0E	; 14
 562:	82 e4       	ldi	r24, 0x42	; 66
 564:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 568:	40 e0       	ldi	r20, 0x00	; 0
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	86 e3       	ldi	r24, 0x36	; 54
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 574:	41 e0       	ldi	r20, 0x01	; 1
 576:	62 e0       	ldi	r22, 0x02	; 2
 578:	86 e3       	ldi	r24, 0x36	; 54
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 580:	8f e3       	ldi	r24, 0x3F	; 63
 582:	9f e1       	ldi	r25, 0x1F	; 31
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <LCD_Init+0x1b2>
 588:	00 c0       	rjmp	.+0      	; 0x58a <LCD_Init+0x1b8>
 58a:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 58c:	40 e0       	ldi	r20, 0x00	; 0
 58e:	62 e0       	ldi	r22, 0x02	; 2
 590:	86 e3       	ldi	r24, 0x36	; 54
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 598:	8f e3       	ldi	r24, 0x3F	; 63
 59a:	9f e1       	ldi	r25, 0x1F	; 31
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <LCD_Init+0x1ca>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <LCD_Init+0x1d0>
 5a2:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Command<<4);
 5a4:	60 ee       	ldi	r22, 0xE0	; 224
 5a6:	82 e4       	ldi	r24, 0x42	; 66
 5a8:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 5ac:	40 e0       	ldi	r20, 0x00	; 0
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	86 e3       	ldi	r24, 0x36	; 54
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 5b8:	41 e0       	ldi	r20, 0x01	; 1
 5ba:	62 e0       	ldi	r22, 0x02	; 2
 5bc:	86 e3       	ldi	r24, 0x36	; 54
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 5c4:	8f e3       	ldi	r24, 0x3F	; 63
 5c6:	9f e1       	ldi	r25, 0x1F	; 31
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <LCD_Init+0x1f6>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCD_Init+0x1fc>
 5ce:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	62 e0       	ldi	r22, 0x02	; 2
 5d4:	86 e3       	ldi	r24, 0x36	; 54
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 5dc:	8f e3       	ldi	r24, 0x3F	; 63
 5de:	9f e1       	ldi	r25, 0x1F	; 31
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <LCD_Init+0x20e>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <LCD_Init+0x214>
 5e6:	00 00       	nop
 5e8:	8f e9       	ldi	r24, 0x9F	; 159
 5ea:	9f e0       	ldi	r25, 0x0F	; 15
 5ec:	01 97       	sbiw	r24, 0x01	; 1
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <LCD_Init+0x21a>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <LCD_Init+0x220>
 5f2:	00 00       	nop
 5f4:	8f e9       	ldi	r24, 0x9F	; 159
 5f6:	9f e0       	ldi	r25, 0x0F	; 15
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_Init+0x226>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_Init+0x22c>
 5fe:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	82 e4       	ldi	r24, 0x42	; 66
 604:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 608:	40 e0       	ldi	r20, 0x00	; 0
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	86 e3       	ldi	r24, 0x36	; 54
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 614:	41 e0       	ldi	r20, 0x01	; 1
 616:	62 e0       	ldi	r22, 0x02	; 2
 618:	86 e3       	ldi	r24, 0x36	; 54
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 620:	8f e3       	ldi	r24, 0x3F	; 63
 622:	9f e1       	ldi	r25, 0x1F	; 31
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <LCD_Init+0x252>
 628:	00 c0       	rjmp	.+0      	; 0x62a <LCD_Init+0x258>
 62a:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 62c:	40 e0       	ldi	r20, 0x00	; 0
 62e:	62 e0       	ldi	r22, 0x02	; 2
 630:	86 e3       	ldi	r24, 0x36	; 54
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 638:	8f e3       	ldi	r24, 0x3F	; 63
 63a:	9f e1       	ldi	r25, 0x1F	; 31
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <LCD_Init+0x26a>
 640:	00 c0       	rjmp	.+0      	; 0x642 <LCD_Init+0x270>
 642:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Command<<4);
 644:	60 e1       	ldi	r22, 0x10	; 16
 646:	82 e4       	ldi	r24, 0x42	; 66
 648:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 64c:	40 e0       	ldi	r20, 0x00	; 0
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	86 e3       	ldi	r24, 0x36	; 54
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 658:	41 e0       	ldi	r20, 0x01	; 1
 65a:	62 e0       	ldi	r22, 0x02	; 2
 65c:	86 e3       	ldi	r24, 0x36	; 54
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 664:	8f e3       	ldi	r24, 0x3F	; 63
 666:	9f e1       	ldi	r25, 0x1F	; 31
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <LCD_Init+0x296>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <LCD_Init+0x29c>
 66e:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 670:	40 e0       	ldi	r20, 0x00	; 0
 672:	62 e0       	ldi	r22, 0x02	; 2
 674:	86 e3       	ldi	r24, 0x36	; 54
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 67c:	8f e3       	ldi	r24, 0x3F	; 63
 67e:	9f e1       	ldi	r25, 0x1F	; 31
 680:	01 97       	sbiw	r24, 0x01	; 1
 682:	f1 f7       	brne	.-4      	; 0x680 <LCD_Init+0x2ae>
 684:	00 c0       	rjmp	.+0      	; 0x686 <LCD_Init+0x2b4>
 686:	00 00       	nop
 688:	8f e9       	ldi	r24, 0x9F	; 159
 68a:	9f e0       	ldi	r25, 0x0F	; 15
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	f1 f7       	brne	.-4      	; 0x68c <LCD_Init+0x2ba>
 690:	00 c0       	rjmp	.+0      	; 0x692 <LCD_Init+0x2c0>
 692:	00 00       	nop
 694:	8f e3       	ldi	r24, 0x3F	; 63
 696:	9c e9       	ldi	r25, 0x9C	; 156
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <LCD_Init+0x2c6>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <LCD_Init+0x2cc>
 69e:	00 00       	nop
 6a0:	08 95       	ret

000006a2 <Move_Curser_LCD>:
	_delay_ms(1);
	#endif
	#endif
}
void Move_Curser_LCD(uint_8 Row,uint_8 Column)
{
 6a2:	cf 93       	push	r28
	char Address_Counter_Value;
	switch(Row)
 6a4:	81 30       	cpi	r24, 0x01	; 1
 6a6:	09 f4       	brne	.+2      	; 0x6aa <Move_Curser_LCD+0x8>
 6a8:	55 c0       	rjmp	.+170    	; 0x754 <Move_Curser_LCD+0xb2>
 6aa:	82 30       	cpi	r24, 0x02	; 2
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <Move_Curser_LCD+0xe>
 6ae:	50 c0       	rjmp	.+160    	; 0x750 <Move_Curser_LCD+0xae>
		else
			Address_Counter_Value=Start_Cursor_Row_1;
		Send_Command_LCD(Address_Counter_Value);
		break;
		case 2:
		if (Column>0 && Column<=16)
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	86 0f       	add	r24, r22
 6b4:	80 31       	cpi	r24, 0x10	; 16
 6b6:	08 f4       	brcc	.+2      	; 0x6ba <Move_Curser_LCD+0x18>
 6b8:	57 c0       	rjmp	.+174    	; 0x768 <Move_Curser_LCD+0xc6>
 6ba:	c0 e0       	ldi	r28, 0x00	; 0
			Address_Counter_Value=(Start_Cursor_Row_2+(Column-1));
		else
			Address_Counter_Value=Start_Cursor_Row_1;
 6bc:	60 e8       	ldi	r22, 0x80	; 128
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
 6be:	82 e4       	ldi	r24, 0x42	; 66
 6c0:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	60 e0       	ldi	r22, 0x00	; 0
 6c8:	86 e3       	ldi	r24, 0x36	; 54
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 6d0:	41 e0       	ldi	r20, 0x01	; 1
 6d2:	62 e0       	ldi	r22, 0x02	; 2
 6d4:	86 e3       	ldi	r24, 0x36	; 54
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 6dc:	8f e3       	ldi	r24, 0x3F	; 63
 6de:	9f e1       	ldi	r25, 0x1F	; 31
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <Move_Curser_LCD+0x3e>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <Move_Curser_LCD+0x44>
 6e6:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 6e8:	40 e0       	ldi	r20, 0x00	; 0
 6ea:	62 e0       	ldi	r22, 0x02	; 2
 6ec:	86 e3       	ldi	r24, 0x36	; 54
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 6f4:	8f e3       	ldi	r24, 0x3F	; 63
 6f6:	9f e1       	ldi	r25, 0x1F	; 31
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	f1 f7       	brne	.-4      	; 0x6f8 <Move_Curser_LCD+0x56>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <Move_Curser_LCD+0x5c>
 6fe:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Command<<4);
 700:	6c 2f       	mov	r22, r28
 702:	82 e4       	ldi	r24, 0x42	; 66
 704:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 708:	40 e0       	ldi	r20, 0x00	; 0
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	86 e3       	ldi	r24, 0x36	; 54
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 714:	41 e0       	ldi	r20, 0x01	; 1
 716:	62 e0       	ldi	r22, 0x02	; 2
 718:	86 e3       	ldi	r24, 0x36	; 54
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 720:	8f e3       	ldi	r24, 0x3F	; 63
 722:	9f e1       	ldi	r25, 0x1F	; 31
 724:	01 97       	sbiw	r24, 0x01	; 1
 726:	f1 f7       	brne	.-4      	; 0x724 <Move_Curser_LCD+0x82>
 728:	00 c0       	rjmp	.+0      	; 0x72a <Move_Curser_LCD+0x88>
 72a:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 72c:	40 e0       	ldi	r20, 0x00	; 0
 72e:	62 e0       	ldi	r22, 0x02	; 2
 730:	86 e3       	ldi	r24, 0x36	; 54
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 738:	8f e3       	ldi	r24, 0x3F	; 63
 73a:	9f e1       	ldi	r25, 0x1F	; 31
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	f1 f7       	brne	.-4      	; 0x73c <Move_Curser_LCD+0x9a>
 740:	00 c0       	rjmp	.+0      	; 0x742 <Move_Curser_LCD+0xa0>
 742:	00 00       	nop
 744:	8f e9       	ldi	r24, 0x9F	; 159
 746:	9f e0       	ldi	r25, 0x0F	; 15
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	f1 f7       	brne	.-4      	; 0x748 <Move_Curser_LCD+0xa6>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <Move_Curser_LCD+0xac>
 74e:	00 00       	nop
		break;
		default:
		break;
		_delay_ms(1);
	}	
}
 750:	cf 91       	pop	r28
 752:	08 95       	ret
{
	char Address_Counter_Value;
	switch(Row)
	{
		case 1:
		if (Column>0 && Column<=16)
 754:	8f ef       	ldi	r24, 0xFF	; 255
 756:	86 0f       	add	r24, r22
 758:	80 31       	cpi	r24, 0x10	; 16
 75a:	08 f0       	brcs	.+2      	; 0x75e <Move_Curser_LCD+0xbc>
 75c:	ae cf       	rjmp	.-164    	; 0x6ba <Move_Curser_LCD+0x18>
			Address_Counter_Value=(Start_Cursor_Row_1+(Column-1));	
 75e:	61 58       	subi	r22, 0x81	; 129
 760:	c6 2f       	mov	r28, r22
 762:	c2 95       	swap	r28
 764:	c0 7f       	andi	r28, 0xF0	; 240
 766:	ab cf       	rjmp	.-170    	; 0x6be <Move_Curser_LCD+0x1c>
			Address_Counter_Value=Start_Cursor_Row_1;
		Send_Command_LCD(Address_Counter_Value);
		break;
		case 2:
		if (Column>0 && Column<=16)
			Address_Counter_Value=(Start_Cursor_Row_2+(Column-1));
 768:	61 54       	subi	r22, 0x41	; 65
 76a:	c6 2f       	mov	r28, r22
 76c:	c2 95       	swap	r28
 76e:	c0 7f       	andi	r28, 0xF0	; 240
 770:	a6 cf       	rjmp	.-180    	; 0x6be <Move_Curser_LCD+0x1c>

00000772 <Clear_LCD>:
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	82 e4       	ldi	r24, 0x42	; 66
 776:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 77a:	40 e0       	ldi	r20, 0x00	; 0
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	86 e3       	ldi	r24, 0x36	; 54
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 786:	41 e0       	ldi	r20, 0x01	; 1
 788:	62 e0       	ldi	r22, 0x02	; 2
 78a:	86 e3       	ldi	r24, 0x36	; 54
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 792:	8f e3       	ldi	r24, 0x3F	; 63
 794:	9f e1       	ldi	r25, 0x1F	; 31
 796:	01 97       	sbiw	r24, 0x01	; 1
 798:	f1 f7       	brne	.-4      	; 0x796 <Clear_LCD+0x24>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <Clear_LCD+0x2a>
 79c:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 79e:	40 e0       	ldi	r20, 0x00	; 0
 7a0:	62 e0       	ldi	r22, 0x02	; 2
 7a2:	86 e3       	ldi	r24, 0x36	; 54
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 7aa:	8f e3       	ldi	r24, 0x3F	; 63
 7ac:	9f e1       	ldi	r25, 0x1F	; 31
 7ae:	01 97       	sbiw	r24, 0x01	; 1
 7b0:	f1 f7       	brne	.-4      	; 0x7ae <Clear_LCD+0x3c>
 7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <Clear_LCD+0x42>
 7b4:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Command<<4);
 7b6:	60 e1       	ldi	r22, 0x10	; 16
 7b8:	82 e4       	ldi	r24, 0x42	; 66
 7ba:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 7be:	40 e0       	ldi	r20, 0x00	; 0
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	86 e3       	ldi	r24, 0x36	; 54
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 7ca:	41 e0       	ldi	r20, 0x01	; 1
 7cc:	62 e0       	ldi	r22, 0x02	; 2
 7ce:	86 e3       	ldi	r24, 0x36	; 54
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 7d6:	8f e3       	ldi	r24, 0x3F	; 63
 7d8:	9f e1       	ldi	r25, 0x1F	; 31
 7da:	01 97       	sbiw	r24, 0x01	; 1
 7dc:	f1 f7       	brne	.-4      	; 0x7da <Clear_LCD+0x68>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <Clear_LCD+0x6e>
 7e0:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 7e2:	40 e0       	ldi	r20, 0x00	; 0
 7e4:	62 e0       	ldi	r22, 0x02	; 2
 7e6:	86 e3       	ldi	r24, 0x36	; 54
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 7ee:	8f e3       	ldi	r24, 0x3F	; 63
 7f0:	9f e1       	ldi	r25, 0x1F	; 31
 7f2:	01 97       	sbiw	r24, 0x01	; 1
 7f4:	f1 f7       	brne	.-4      	; 0x7f2 <Clear_LCD+0x80>
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <Clear_LCD+0x86>
 7f8:	00 00       	nop
 7fa:	8f e9       	ldi	r24, 0x9F	; 159
 7fc:	9f e0       	ldi	r25, 0x0F	; 15
 7fe:	01 97       	sbiw	r24, 0x01	; 1
 800:	f1 f7       	brne	.-4      	; 0x7fe <Clear_LCD+0x8c>
 802:	00 c0       	rjmp	.+0      	; 0x804 <Clear_LCD+0x92>
 804:	00 00       	nop
 806:	8f e3       	ldi	r24, 0x3F	; 63
 808:	9c e9       	ldi	r25, 0x9C	; 156
 80a:	01 97       	sbiw	r24, 0x01	; 1
 80c:	f1 f7       	brne	.-4      	; 0x80a <Clear_LCD+0x98>
 80e:	00 c0       	rjmp	.+0      	; 0x810 <Clear_LCD+0x9e>
 810:	00 00       	nop
 812:	08 95       	ret

00000814 <Send_String_LCD>:
{
	Send_Command_LCD(Clear_Display);
	_delay_ms(10);	
}
void Send_String_LCD(uint_8 *String)
{
 814:	1f 93       	push	r17
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
	while((*String) != '\0')
 81a:	fc 01       	movw	r30, r24
 81c:	10 81       	ld	r17, Z
 81e:	11 23       	and	r17, r17
 820:	09 f4       	brne	.+2      	; 0x824 <Send_String_LCD+0x10>
 822:	51 c0       	rjmp	.+162    	; 0x8c6 <__stack+0x67>
 824:	ec 01       	movw	r28, r24
 826:	21 96       	adiw	r28, 0x01	; 1
	GPIO_Port_Write(Port_B,Character);
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
	Set_Enable_Bit();
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Character);
 828:	61 2f       	mov	r22, r17
 82a:	82 e4       	ldi	r24, 0x42	; 66
 82c:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
 830:	41 e0       	ldi	r20, 0x01	; 1
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	86 e3       	ldi	r24, 0x36	; 54
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 83c:	41 e0       	ldi	r20, 0x01	; 1
 83e:	62 e0       	ldi	r22, 0x02	; 2
 840:	86 e3       	ldi	r24, 0x36	; 54
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 848:	8f e3       	ldi	r24, 0x3F	; 63
 84a:	9f e1       	ldi	r25, 0x1F	; 31
 84c:	01 97       	sbiw	r24, 0x01	; 1
 84e:	f1 f7       	brne	.-4      	; 0x84c <Send_String_LCD+0x38>
 850:	00 c0       	rjmp	.+0      	; 0x852 <Send_String_LCD+0x3e>
 852:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 854:	40 e0       	ldi	r20, 0x00	; 0
 856:	62 e0       	ldi	r22, 0x02	; 2
 858:	86 e3       	ldi	r24, 0x36	; 54
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 860:	ef e3       	ldi	r30, 0x3F	; 63
 862:	ff e1       	ldi	r31, 0x1F	; 31
 864:	31 97       	sbiw	r30, 0x01	; 1
 866:	f1 f7       	brne	.-4      	; 0x864 <__stack+0x5>
 868:	00 c0       	rjmp	.+0      	; 0x86a <__stack+0xb>
 86a:	00 00       	nop
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Character);
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
	Set_Enable_Bit();
	GPIO_Write_High_Nibble('B',Character<<4);
 86c:	61 2f       	mov	r22, r17
 86e:	62 95       	swap	r22
 870:	60 7f       	andi	r22, 0xF0	; 240
 872:	82 e4       	ldi	r24, 0x42	; 66
 874:	0e 94 4a 05 	call	0xa94	; 0xa94 <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
 878:	41 e0       	ldi	r20, 0x01	; 1
 87a:	60 e0       	ldi	r22, 0x00	; 0
 87c:	86 e3       	ldi	r24, 0x36	; 54
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
 884:	41 e0       	ldi	r20, 0x01	; 1
 886:	62 e0       	ldi	r22, 0x02	; 2
 888:	86 e3       	ldi	r24, 0x36	; 54
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 890:	8f e3       	ldi	r24, 0x3F	; 63
 892:	9f e1       	ldi	r25, 0x1F	; 31
 894:	01 97       	sbiw	r24, 0x01	; 1
 896:	f1 f7       	brne	.-4      	; 0x894 <__stack+0x35>
 898:	00 c0       	rjmp	.+0      	; 0x89a <__stack+0x3b>
 89a:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
 89c:	40 e0       	ldi	r20, 0x00	; 0
 89e:	62 e0       	ldi	r22, 0x02	; 2
 8a0:	86 e3       	ldi	r24, 0x36	; 54
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	0e 94 17 05 	call	0xa2e	; 0xa2e <GPIO_Pin_Write>
 8a8:	ef e3       	ldi	r30, 0x3F	; 63
 8aa:	ff e1       	ldi	r31, 0x1F	; 31
 8ac:	31 97       	sbiw	r30, 0x01	; 1
 8ae:	f1 f7       	brne	.-4      	; 0x8ac <__stack+0x4d>
 8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <__stack+0x53>
 8b2:	00 00       	nop
 8b4:	8f e9       	ldi	r24, 0x9F	; 159
 8b6:	9f e0       	ldi	r25, 0x0F	; 15
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <__stack+0x59>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <__stack+0x5f>
 8be:	00 00       	nop
	Send_Command_LCD(Clear_Display);
	_delay_ms(10);	
}
void Send_String_LCD(uint_8 *String)
{
	while((*String) != '\0')
 8c0:	19 91       	ld	r17, Y+
 8c2:	11 11       	cpse	r17, r1
 8c4:	b1 cf       	rjmp	.-158    	; 0x828 <Send_String_LCD+0x14>
	{
		Send_char_LCD(*String);
		String++;
	}
 8c6:	df 91       	pop	r29
 8c8:	cf 91       	pop	r28
 8ca:	1f 91       	pop	r17
 8cc:	08 95       	ret

000008ce <__vector_13>:
		CP_USART_UDRE_User_ptr =USART_UDRE_User_ptr;
	}
}

ISR (USART_RXC_vect)
{
 8ce:	1f 92       	push	r1
 8d0:	0f 92       	push	r0
 8d2:	0f b6       	in	r0, 0x3f	; 63
 8d4:	0f 92       	push	r0
 8d6:	11 24       	eor	r1, r1
 8d8:	2f 93       	push	r18
 8da:	3f 93       	push	r19
 8dc:	4f 93       	push	r20
 8de:	5f 93       	push	r21
 8e0:	6f 93       	push	r22
 8e2:	7f 93       	push	r23
 8e4:	8f 93       	push	r24
 8e6:	9f 93       	push	r25
 8e8:	af 93       	push	r26
 8ea:	bf 93       	push	r27
 8ec:	ef 93       	push	r30
 8ee:	ff 93       	push	r31
	if ( CP_USART_RXC_Complete_User_ptr != NULL)
 8f0:	e0 91 b0 00 	lds	r30, 0x00B0
 8f4:	f0 91 b1 00 	lds	r31, 0x00B1
 8f8:	30 97       	sbiw	r30, 0x00	; 0
 8fa:	09 f0       	breq	.+2      	; 0x8fe <__vector_13+0x30>
	{
		CP_USART_RXC_Complete_User_ptr();
 8fc:	09 95       	icall
	}			 
}			 
 8fe:	ff 91       	pop	r31
 900:	ef 91       	pop	r30
 902:	bf 91       	pop	r27
 904:	af 91       	pop	r26
 906:	9f 91       	pop	r25
 908:	8f 91       	pop	r24
 90a:	7f 91       	pop	r23
 90c:	6f 91       	pop	r22
 90e:	5f 91       	pop	r21
 910:	4f 91       	pop	r20
 912:	3f 91       	pop	r19
 914:	2f 91       	pop	r18
 916:	0f 90       	pop	r0
 918:	0f be       	out	0x3f, r0	; 63
 91a:	0f 90       	pop	r0
 91c:	1f 90       	pop	r1
 91e:	18 95       	reti

00000920 <__vector_15>:
ISR (USART_TXC_vect)
{
 920:	1f 92       	push	r1
 922:	0f 92       	push	r0
 924:	0f b6       	in	r0, 0x3f	; 63
 926:	0f 92       	push	r0
 928:	11 24       	eor	r1, r1
 92a:	2f 93       	push	r18
 92c:	3f 93       	push	r19
 92e:	4f 93       	push	r20
 930:	5f 93       	push	r21
 932:	6f 93       	push	r22
 934:	7f 93       	push	r23
 936:	8f 93       	push	r24
 938:	9f 93       	push	r25
 93a:	af 93       	push	r26
 93c:	bf 93       	push	r27
 93e:	ef 93       	push	r30
 940:	ff 93       	push	r31
	if ( CP_USART_TXC_Complete_User_ptr != NULL)
 942:	e0 91 ae 00 	lds	r30, 0x00AE
 946:	f0 91 af 00 	lds	r31, 0x00AF
 94a:	30 97       	sbiw	r30, 0x00	; 0
 94c:	09 f0       	breq	.+2      	; 0x950 <__vector_15+0x30>
	{
		CP_USART_TXC_Complete_User_ptr();	
 94e:	09 95       	icall
	}		 
}	
 950:	ff 91       	pop	r31
 952:	ef 91       	pop	r30
 954:	bf 91       	pop	r27
 956:	af 91       	pop	r26
 958:	9f 91       	pop	r25
 95a:	8f 91       	pop	r24
 95c:	7f 91       	pop	r23
 95e:	6f 91       	pop	r22
 960:	5f 91       	pop	r21
 962:	4f 91       	pop	r20
 964:	3f 91       	pop	r19
 966:	2f 91       	pop	r18
 968:	0f 90       	pop	r0
 96a:	0f be       	out	0x3f, r0	; 63
 96c:	0f 90       	pop	r0
 96e:	1f 90       	pop	r1
 970:	18 95       	reti

00000972 <__vector_14>:
ISR (USART_UDRE_vect)
{
 972:	1f 92       	push	r1
 974:	0f 92       	push	r0
 976:	0f b6       	in	r0, 0x3f	; 63
 978:	0f 92       	push	r0
 97a:	11 24       	eor	r1, r1
 97c:	2f 93       	push	r18
 97e:	3f 93       	push	r19
 980:	4f 93       	push	r20
 982:	5f 93       	push	r21
 984:	6f 93       	push	r22
 986:	7f 93       	push	r23
 988:	8f 93       	push	r24
 98a:	9f 93       	push	r25
 98c:	af 93       	push	r26
 98e:	bf 93       	push	r27
 990:	ef 93       	push	r30
 992:	ff 93       	push	r31
	if ( CP_USART_UDRE_User_ptr != NULL)
 994:	e0 91 ac 00 	lds	r30, 0x00AC
 998:	f0 91 ad 00 	lds	r31, 0x00AD
 99c:	30 97       	sbiw	r30, 0x00	; 0
 99e:	09 f0       	breq	.+2      	; 0x9a2 <__vector_14+0x30>
	{
		CP_USART_UDRE_User_ptr();
 9a0:	09 95       	icall
	}	 
}		
 9a2:	ff 91       	pop	r31
 9a4:	ef 91       	pop	r30
 9a6:	bf 91       	pop	r27
 9a8:	af 91       	pop	r26
 9aa:	9f 91       	pop	r25
 9ac:	8f 91       	pop	r24
 9ae:	7f 91       	pop	r23
 9b0:	6f 91       	pop	r22
 9b2:	5f 91       	pop	r21
 9b4:	4f 91       	pop	r20
 9b6:	3f 91       	pop	r19
 9b8:	2f 91       	pop	r18
 9ba:	0f 90       	pop	r0
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	0f 90       	pop	r0
 9c0:	1f 90       	pop	r1
 9c2:	18 95       	reti

000009c4 <GPIO_Pin_Configuration>:
		default:
		break;
	}
}
void GPIO_Pin_Configuration (GPIO_Register* Chip_port,GPIO_pin_number pin_num,GPIO_pin_Type  O_Or_I_Mode )
{
 9c4:	fc 01       	movw	r30, r24
	 //because of the factor by which we can select the functionality of the function is the Mode of pin , we perform Switch case on the mode 
	 switch (O_Or_I_Mode)  // switch is more fast and readable than if because we know the three available options
 9c6:	41 30       	cpi	r20, 0x01	; 1
 9c8:	19 f1       	breq	.+70     	; 0xa10 <GPIO_Pin_Configuration+0x4c>
 9ca:	98 f0       	brcs	.+38     	; 0x9f2 <GPIO_Pin_Configuration+0x2e>
 9cc:	42 30       	cpi	r20, 0x02	; 2
 9ce:	81 f4       	brne	.+32     	; 0x9f0 <GPIO_Pin_Configuration+0x2c>
		case INPUT_Float:
		CLEAR_BIT(Chip_port->DDR ,pin_num);
		CLEAR_BIT(Chip_port->PORT,pin_num);
		break;
		case INPUT_Pullup:
		CLEAR_BIT(Chip_port->DDR ,pin_num);
 9d0:	21 81       	ldd	r18, Z+1	; 0x01
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	06 2e       	mov	r0, r22
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <GPIO_Pin_Configuration+0x18>
 9da:	88 0f       	add	r24, r24
 9dc:	0a 94       	dec	r0
 9de:	ea f7       	brpl	.-6      	; 0x9da <GPIO_Pin_Configuration+0x16>
 9e0:	98 2f       	mov	r25, r24
 9e2:	90 95       	com	r25
 9e4:	92 23       	and	r25, r18
 9e6:	91 83       	std	Z+1, r25	; 0x01
		SET_BIT  (Chip_port->PORT,pin_num);
 9e8:	92 81       	ldd	r25, Z+2	; 0x02
 9ea:	98 2b       	or	r25, r24
 9ec:	92 83       	std	Z+2, r25	; 0x02
		break;
 9ee:	08 95       	ret
 9f0:	08 95       	ret
		case OUTPUT:
		SET_BIT  (Chip_port->DDR ,pin_num);
 9f2:	21 81       	ldd	r18, Z+1	; 0x01
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	06 2e       	mov	r0, r22
 9fa:	01 c0       	rjmp	.+2      	; 0x9fe <GPIO_Pin_Configuration+0x3a>
 9fc:	88 0f       	add	r24, r24
 9fe:	0a 94       	dec	r0
 a00:	ea f7       	brpl	.-6      	; 0x9fc <GPIO_Pin_Configuration+0x38>
 a02:	28 2b       	or	r18, r24
 a04:	21 83       	std	Z+1, r18	; 0x01
		CLEAR_BIT(Chip_port->PORT,pin_num);
 a06:	92 81       	ldd	r25, Z+2	; 0x02
 a08:	80 95       	com	r24
 a0a:	89 23       	and	r24, r25
 a0c:	82 83       	std	Z+2, r24	; 0x02
 a0e:	08 95       	ret
{
	 //because of the factor by which we can select the functionality of the function is the Mode of pin , we perform Switch case on the mode 
	 switch (O_Or_I_Mode)  // switch is more fast and readable than if because we know the three available options
	 {
		case INPUT_Float:
		CLEAR_BIT(Chip_port->DDR ,pin_num);
 a10:	21 81       	ldd	r18, Z+1	; 0x01
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	06 2e       	mov	r0, r22
 a18:	01 c0       	rjmp	.+2      	; 0xa1c <GPIO_Pin_Configuration+0x58>
 a1a:	88 0f       	add	r24, r24
 a1c:	0a 94       	dec	r0
 a1e:	ea f7       	brpl	.-6      	; 0xa1a <GPIO_Pin_Configuration+0x56>
 a20:	80 95       	com	r24
 a22:	28 23       	and	r18, r24
 a24:	21 83       	std	Z+1, r18	; 0x01
		CLEAR_BIT(Chip_port->PORT,pin_num);
 a26:	92 81       	ldd	r25, Z+2	; 0x02
 a28:	98 23       	and	r25, r24
 a2a:	92 83       	std	Z+2, r25	; 0x02
		break;
 a2c:	08 95       	ret

00000a2e <GPIO_Pin_Write>:
 	}

}
void GPIO_Pin_Write(GPIO_Register *Chip_port,GPIO_pin_number pin_num,Digital_pinState Pin_state)
{
	 switch(Pin_state)
 a2e:	44 23       	and	r20, r20
 a30:	71 f0       	breq	.+28     	; 0xa4e <GPIO_Pin_Write+0x20>
 a32:	41 30       	cpi	r20, 0x01	; 1
 a34:	c1 f4       	brne	.+48     	; 0xa66 <GPIO_Pin_Write+0x38>
	 {
		case HIGH:
		SET_BIT(Chip_port->PORT,pin_num);
 a36:	fc 01       	movw	r30, r24
 a38:	42 81       	ldd	r20, Z+2	; 0x02
 a3a:	21 e0       	ldi	r18, 0x01	; 1
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	06 2e       	mov	r0, r22
 a40:	01 c0       	rjmp	.+2      	; 0xa44 <GPIO_Pin_Write+0x16>
 a42:	22 0f       	add	r18, r18
 a44:	0a 94       	dec	r0
 a46:	ea f7       	brpl	.-6      	; 0xa42 <GPIO_Pin_Write+0x14>
 a48:	42 2b       	or	r20, r18
 a4a:	42 83       	std	Z+2, r20	; 0x02
		break;
 a4c:	08 95       	ret
		case LOW:
		CLEAR_BIT(Chip_port->PORT,pin_num);
 a4e:	fc 01       	movw	r30, r24
 a50:	42 81       	ldd	r20, Z+2	; 0x02
 a52:	21 e0       	ldi	r18, 0x01	; 1
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	06 2e       	mov	r0, r22
 a58:	01 c0       	rjmp	.+2      	; 0xa5c <GPIO_Pin_Write+0x2e>
 a5a:	22 0f       	add	r18, r18
 a5c:	0a 94       	dec	r0
 a5e:	ea f7       	brpl	.-6      	; 0xa5a <GPIO_Pin_Write+0x2c>
 a60:	20 95       	com	r18
 a62:	24 23       	and	r18, r20
 a64:	22 83       	std	Z+2, r18	; 0x02
 a66:	08 95       	ret

00000a68 <GPIO_Pin_Read>:
	 }
}

Digital_pinState GPIO_Pin_Read  (GPIO_Register *Chip_port,GPIO_pin_number pin_num)
{
	return READ_BIT(Chip_port->PIN,pin_num);
 a68:	fc 01       	movw	r30, r24
 a6a:	20 81       	ld	r18, Z
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	06 2e       	mov	r0, r22
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <GPIO_Pin_Read+0x10>
 a74:	88 0f       	add	r24, r24
 a76:	99 1f       	adc	r25, r25
 a78:	0a 94       	dec	r0
 a7a:	e2 f7       	brpl	.-8      	; 0xa74 <GPIO_Pin_Read+0xc>
 a7c:	30 e0       	ldi	r19, 0x00	; 0
 a7e:	82 23       	and	r24, r18
 a80:	93 23       	and	r25, r19
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <GPIO_Pin_Read+0x20>
 a84:	95 95       	asr	r25
 a86:	87 95       	ror	r24
 a88:	6a 95       	dec	r22
 a8a:	e2 f7       	brpl	.-8      	; 0xa84 <GPIO_Pin_Read+0x1c>
}
 a8c:	08 95       	ret

00000a8e <GPIO_Port_Configuration>:
	/* We Must Check That THe Value Of The configuration Of The Port Does Not exceed The 8 bit (0 <-> 255) */
	if (port_Value <= Max_uint8_Value && port_Value >= Min_uint8_Value)
	{
		/* The Value On The 8 bit DDR To Define Each Pin From The 8 Pins Of The Port As input Or Output */
		/* equal the port to the 0xFF to get the output */
		Chip_port->DDR = port_Value;
 a8e:	fc 01       	movw	r30, r24
 a90:	61 83       	std	Z+1, r22	; 0x01
 a92:	08 95       	ret

00000a94 <GPIO_Write_High_Nibble>:
}


void GPIO_Write_High_Nibble(uint_8 Port_Name,uint_8 High_Nibble_value)
{
	High_Nibble_value &=0xf0;
 a94:	60 7f       	andi	r22, 0xF0	; 240
	switch(Port_Name)
 a96:	82 34       	cpi	r24, 0x42	; 66
 a98:	71 f0       	breq	.+28     	; 0xab6 <GPIO_Write_High_Nibble+0x22>
 a9a:	28 f0       	brcs	.+10     	; 0xaa6 <GPIO_Write_High_Nibble+0x12>
 a9c:	83 34       	cpi	r24, 0x43	; 67
 a9e:	89 f0       	breq	.+34     	; 0xac2 <GPIO_Write_High_Nibble+0x2e>
 aa0:	84 34       	cpi	r24, 0x44	; 68
 aa2:	a9 f0       	breq	.+42     	; 0xace <GPIO_Write_High_Nibble+0x3a>
 aa4:	08 95       	ret
 aa6:	81 34       	cpi	r24, 0x41	; 65
 aa8:	c9 f4       	brne	.+50     	; 0xadc <GPIO_Write_High_Nibble+0x48>
	{
		case 'A':
		Port_A->PORT &=0x0f;
 aaa:	8b b3       	in	r24, 0x1b	; 27
 aac:	8f 70       	andi	r24, 0x0F	; 15
 aae:	8b bb       	out	0x1b, r24	; 27
		Port_A->PORT |=High_Nibble_value;
 ab0:	8b b3       	in	r24, 0x1b	; 27
 ab2:	86 2b       	or	r24, r22
 ab4:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		Port_B->PORT &=0x0f;
 ab6:	88 b3       	in	r24, 0x18	; 24
 ab8:	8f 70       	andi	r24, 0x0F	; 15
 aba:	88 bb       	out	0x18, r24	; 24
		Port_B->PORT |=High_Nibble_value;
 abc:	88 b3       	in	r24, 0x18	; 24
 abe:	86 2b       	or	r24, r22
 ac0:	88 bb       	out	0x18, r24	; 24
		case 'C':
		Port_C->PORT &=0x0f;
 ac2:	85 b3       	in	r24, 0x15	; 21
 ac4:	8f 70       	andi	r24, 0x0F	; 15
 ac6:	85 bb       	out	0x15, r24	; 21
		Port_C->PORT |=High_Nibble_value;
 ac8:	85 b3       	in	r24, 0x15	; 21
 aca:	86 2b       	or	r24, r22
 acc:	85 bb       	out	0x15, r24	; 21
		case 'D':
		Port_D->PORT &=0x0f;
 ace:	82 b3       	in	r24, 0x12	; 18
 ad0:	8f 70       	andi	r24, 0x0F	; 15
 ad2:	82 bb       	out	0x12, r24	; 18
		Port_D->PORT |=High_Nibble_value;
 ad4:	82 b3       	in	r24, 0x12	; 18
 ad6:	86 2b       	or	r24, r22
 ad8:	82 bb       	out	0x12, r24	; 18
 ada:	08 95       	ret
 adc:	08 95       	ret

00000ade <__vector_1>:
void (* EXT_INT1_ISR) (void) =  NULL;
void (* EXT_INT2_ISR) (void) =  NULL;
void (* ADC_INT_ISR)  (void) =  NULL;

ISR (INT0_vect)
{
 ade:	1f 92       	push	r1
 ae0:	0f 92       	push	r0
 ae2:	0f b6       	in	r0, 0x3f	; 63
 ae4:	0f 92       	push	r0
 ae6:	11 24       	eor	r1, r1
 ae8:	2f 93       	push	r18
 aea:	3f 93       	push	r19
 aec:	4f 93       	push	r20
 aee:	5f 93       	push	r21
 af0:	6f 93       	push	r22
 af2:	7f 93       	push	r23
 af4:	8f 93       	push	r24
 af6:	9f 93       	push	r25
 af8:	af 93       	push	r26
 afa:	bf 93       	push	r27
 afc:	ef 93       	push	r30
 afe:	ff 93       	push	r31
	if (EXT_INT0_ISR != NULL)  // there is code in the function 
 b00:	e0 91 b8 00 	lds	r30, 0x00B8
 b04:	f0 91 b9 00 	lds	r31, 0x00B9
 b08:	30 97       	sbiw	r30, 0x00	; 0
 b0a:	09 f0       	breq	.+2      	; 0xb0e <__vector_1+0x30>
	{
		EXT_INT0_ISR();
 b0c:	09 95       	icall
	}
}
 b0e:	ff 91       	pop	r31
 b10:	ef 91       	pop	r30
 b12:	bf 91       	pop	r27
 b14:	af 91       	pop	r26
 b16:	9f 91       	pop	r25
 b18:	8f 91       	pop	r24
 b1a:	7f 91       	pop	r23
 b1c:	6f 91       	pop	r22
 b1e:	5f 91       	pop	r21
 b20:	4f 91       	pop	r20
 b22:	3f 91       	pop	r19
 b24:	2f 91       	pop	r18
 b26:	0f 90       	pop	r0
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	0f 90       	pop	r0
 b2c:	1f 90       	pop	r1
 b2e:	18 95       	reti

00000b30 <__vector_2>:

ISR (INT1_vect,ISR_NAKED)
{
	if (EXT_INT1_ISR != NULL)
 b30:	e0 91 b6 00 	lds	r30, 0x00B6
 b34:	f0 91 b7 00 	lds	r31, 0x00B7
 b38:	30 97       	sbiw	r30, 0x00	; 0
 b3a:	09 f0       	breq	.+2      	; 0xb3e <__vector_3>
	{
		EXT_INT1_ISR();
 b3c:	09 95       	icall

00000b3e <__vector_3>:
	}
}

ISR (INT2_vect)
{
 b3e:	1f 92       	push	r1
 b40:	0f 92       	push	r0
 b42:	0f b6       	in	r0, 0x3f	; 63
 b44:	0f 92       	push	r0
 b46:	11 24       	eor	r1, r1
 b48:	2f 93       	push	r18
 b4a:	3f 93       	push	r19
 b4c:	4f 93       	push	r20
 b4e:	5f 93       	push	r21
 b50:	6f 93       	push	r22
 b52:	7f 93       	push	r23
 b54:	8f 93       	push	r24
 b56:	9f 93       	push	r25
 b58:	af 93       	push	r26
 b5a:	bf 93       	push	r27
 b5c:	ef 93       	push	r30
 b5e:	ff 93       	push	r31
	if (EXT_INT2_ISR != NULL)
 b60:	e0 91 b4 00 	lds	r30, 0x00B4
 b64:	f0 91 b5 00 	lds	r31, 0x00B5
 b68:	30 97       	sbiw	r30, 0x00	; 0
 b6a:	09 f0       	breq	.+2      	; 0xb6e <__vector_3+0x30>
	{
		EXT_INT2_ISR();
 b6c:	09 95       	icall
	}
}
 b6e:	ff 91       	pop	r31
 b70:	ef 91       	pop	r30
 b72:	bf 91       	pop	r27
 b74:	af 91       	pop	r26
 b76:	9f 91       	pop	r25
 b78:	8f 91       	pop	r24
 b7a:	7f 91       	pop	r23
 b7c:	6f 91       	pop	r22
 b7e:	5f 91       	pop	r21
 b80:	4f 91       	pop	r20
 b82:	3f 91       	pop	r19
 b84:	2f 91       	pop	r18
 b86:	0f 90       	pop	r0
 b88:	0f be       	out	0x3f, r0	; 63
 b8a:	0f 90       	pop	r0
 b8c:	1f 90       	pop	r1
 b8e:	18 95       	reti

00000b90 <__vector_16>:
ISR (ADC_vect)
{
 b90:	1f 92       	push	r1
 b92:	0f 92       	push	r0
 b94:	0f b6       	in	r0, 0x3f	; 63
 b96:	0f 92       	push	r0
 b98:	11 24       	eor	r1, r1
 b9a:	2f 93       	push	r18
 b9c:	3f 93       	push	r19
 b9e:	4f 93       	push	r20
 ba0:	5f 93       	push	r21
 ba2:	6f 93       	push	r22
 ba4:	7f 93       	push	r23
 ba6:	8f 93       	push	r24
 ba8:	9f 93       	push	r25
 baa:	af 93       	push	r26
 bac:	bf 93       	push	r27
 bae:	ef 93       	push	r30
 bb0:	ff 93       	push	r31
	if (ADC_INT_ISR != NULL)
 bb2:	e0 91 b2 00 	lds	r30, 0x00B2
 bb6:	f0 91 b3 00 	lds	r31, 0x00B3
 bba:	30 97       	sbiw	r30, 0x00	; 0
 bbc:	09 f0       	breq	.+2      	; 0xbc0 <__vector_16+0x30>
	{
		ADC_INT_ISR();
 bbe:	09 95       	icall
	}
}
 bc0:	ff 91       	pop	r31
 bc2:	ef 91       	pop	r30
 bc4:	bf 91       	pop	r27
 bc6:	af 91       	pop	r26
 bc8:	9f 91       	pop	r25
 bca:	8f 91       	pop	r24
 bcc:	7f 91       	pop	r23
 bce:	6f 91       	pop	r22
 bd0:	5f 91       	pop	r21
 bd2:	4f 91       	pop	r20
 bd4:	3f 91       	pop	r19
 bd6:	2f 91       	pop	r18
 bd8:	0f 90       	pop	r0
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	0f 90       	pop	r0
 bde:	1f 90       	pop	r1
 be0:	18 95       	reti

00000be2 <Timer0_CompareMatch_Callback>:
		CP_TIMER0_Overflow_User_ptr =TIMER0_Overflow_User_ptr;
	}
}
void Timer0_CompareMatch_Callback(void (*TIMER0_CompareMatch_User_ptr) (void))
{
	if(TIMER0_CompareMatch_User_ptr != NULL)
 be2:	00 97       	sbiw	r24, 0x00	; 0
 be4:	21 f0       	breq	.+8      	; 0xbee <Timer0_CompareMatch_Callback+0xc>
	{
		CP_TIMER0_CompareMatch_User_ptr =TIMER0_CompareMatch_User_ptr;
 be6:	90 93 bf 00 	sts	0x00BF, r25
 bea:	80 93 be 00 	sts	0x00BE, r24
 bee:	08 95       	ret

00000bf0 <__vector_10>:
		CP_TIMER2_CompareMatch_User_ptr =TIMER2_CompareMatch_User_ptr;
	}
}

ISR (TIMER0_COMP_vect)
{
 bf0:	1f 92       	push	r1
 bf2:	0f 92       	push	r0
 bf4:	0f b6       	in	r0, 0x3f	; 63
 bf6:	0f 92       	push	r0
 bf8:	11 24       	eor	r1, r1
 bfa:	2f 93       	push	r18
 bfc:	3f 93       	push	r19
 bfe:	4f 93       	push	r20
 c00:	5f 93       	push	r21
 c02:	6f 93       	push	r22
 c04:	7f 93       	push	r23
 c06:	8f 93       	push	r24
 c08:	9f 93       	push	r25
 c0a:	af 93       	push	r26
 c0c:	bf 93       	push	r27
 c0e:	ef 93       	push	r30
 c10:	ff 93       	push	r31
	if (CP_TIMER0_CompareMatch_User_ptr != NULL)
 c12:	e0 91 be 00 	lds	r30, 0x00BE
 c16:	f0 91 bf 00 	lds	r31, 0x00BF
 c1a:	30 97       	sbiw	r30, 0x00	; 0
 c1c:	09 f0       	breq	.+2      	; 0xc20 <__vector_10+0x30>
	{
		CP_TIMER0_CompareMatch_User_ptr();
 c1e:	09 95       	icall
	}
}
 c20:	ff 91       	pop	r31
 c22:	ef 91       	pop	r30
 c24:	bf 91       	pop	r27
 c26:	af 91       	pop	r26
 c28:	9f 91       	pop	r25
 c2a:	8f 91       	pop	r24
 c2c:	7f 91       	pop	r23
 c2e:	6f 91       	pop	r22
 c30:	5f 91       	pop	r21
 c32:	4f 91       	pop	r20
 c34:	3f 91       	pop	r19
 c36:	2f 91       	pop	r18
 c38:	0f 90       	pop	r0
 c3a:	0f be       	out	0x3f, r0	; 63
 c3c:	0f 90       	pop	r0
 c3e:	1f 90       	pop	r1
 c40:	18 95       	reti

00000c42 <__vector_11>:
ISR (TIMER0_OVF_vect)
{
 c42:	1f 92       	push	r1
 c44:	0f 92       	push	r0
 c46:	0f b6       	in	r0, 0x3f	; 63
 c48:	0f 92       	push	r0
 c4a:	11 24       	eor	r1, r1
 c4c:	2f 93       	push	r18
 c4e:	3f 93       	push	r19
 c50:	4f 93       	push	r20
 c52:	5f 93       	push	r21
 c54:	6f 93       	push	r22
 c56:	7f 93       	push	r23
 c58:	8f 93       	push	r24
 c5a:	9f 93       	push	r25
 c5c:	af 93       	push	r26
 c5e:	bf 93       	push	r27
 c60:	ef 93       	push	r30
 c62:	ff 93       	push	r31
	if (CP_TIMER0_Overflow_User_ptr != NULL)
 c64:	e0 91 c0 00 	lds	r30, 0x00C0
 c68:	f0 91 c1 00 	lds	r31, 0x00C1
 c6c:	30 97       	sbiw	r30, 0x00	; 0
 c6e:	09 f0       	breq	.+2      	; 0xc72 <__vector_11+0x30>
	{
		CP_TIMER0_Overflow_User_ptr();
 c70:	09 95       	icall
	}
}
 c72:	ff 91       	pop	r31
 c74:	ef 91       	pop	r30
 c76:	bf 91       	pop	r27
 c78:	af 91       	pop	r26
 c7a:	9f 91       	pop	r25
 c7c:	8f 91       	pop	r24
 c7e:	7f 91       	pop	r23
 c80:	6f 91       	pop	r22
 c82:	5f 91       	pop	r21
 c84:	4f 91       	pop	r20
 c86:	3f 91       	pop	r19
 c88:	2f 91       	pop	r18
 c8a:	0f 90       	pop	r0
 c8c:	0f be       	out	0x3f, r0	; 63
 c8e:	0f 90       	pop	r0
 c90:	1f 90       	pop	r1
 c92:	18 95       	reti

00000c94 <__vector_5>:
ISR (TIMER2_OVF_vect)
{
 c94:	1f 92       	push	r1
 c96:	0f 92       	push	r0
 c98:	0f b6       	in	r0, 0x3f	; 63
 c9a:	0f 92       	push	r0
 c9c:	11 24       	eor	r1, r1
 c9e:	2f 93       	push	r18
 ca0:	3f 93       	push	r19
 ca2:	4f 93       	push	r20
 ca4:	5f 93       	push	r21
 ca6:	6f 93       	push	r22
 ca8:	7f 93       	push	r23
 caa:	8f 93       	push	r24
 cac:	9f 93       	push	r25
 cae:	af 93       	push	r26
 cb0:	bf 93       	push	r27
 cb2:	ef 93       	push	r30
 cb4:	ff 93       	push	r31
	if (CP_TIMER2_Overflow_User_ptr != NULL)
 cb6:	e0 91 bc 00 	lds	r30, 0x00BC
 cba:	f0 91 bd 00 	lds	r31, 0x00BD
 cbe:	30 97       	sbiw	r30, 0x00	; 0
 cc0:	09 f0       	breq	.+2      	; 0xcc4 <__vector_5+0x30>
	{
		CP_TIMER2_Overflow_User_ptr();
 cc2:	09 95       	icall
	}
}
 cc4:	ff 91       	pop	r31
 cc6:	ef 91       	pop	r30
 cc8:	bf 91       	pop	r27
 cca:	af 91       	pop	r26
 ccc:	9f 91       	pop	r25
 cce:	8f 91       	pop	r24
 cd0:	7f 91       	pop	r23
 cd2:	6f 91       	pop	r22
 cd4:	5f 91       	pop	r21
 cd6:	4f 91       	pop	r20
 cd8:	3f 91       	pop	r19
 cda:	2f 91       	pop	r18
 cdc:	0f 90       	pop	r0
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	0f 90       	pop	r0
 ce2:	1f 90       	pop	r1
 ce4:	18 95       	reti

00000ce6 <__vector_4>:
ISR (TIMER2_COMP_vect)
{
 ce6:	1f 92       	push	r1
 ce8:	0f 92       	push	r0
 cea:	0f b6       	in	r0, 0x3f	; 63
 cec:	0f 92       	push	r0
 cee:	11 24       	eor	r1, r1
 cf0:	2f 93       	push	r18
 cf2:	3f 93       	push	r19
 cf4:	4f 93       	push	r20
 cf6:	5f 93       	push	r21
 cf8:	6f 93       	push	r22
 cfa:	7f 93       	push	r23
 cfc:	8f 93       	push	r24
 cfe:	9f 93       	push	r25
 d00:	af 93       	push	r26
 d02:	bf 93       	push	r27
 d04:	ef 93       	push	r30
 d06:	ff 93       	push	r31
	if (CP_TIMER2_CompareMatch_User_ptr != NULL)
 d08:	e0 91 ba 00 	lds	r30, 0x00BA
 d0c:	f0 91 bb 00 	lds	r31, 0x00BB
 d10:	30 97       	sbiw	r30, 0x00	; 0
 d12:	09 f0       	breq	.+2      	; 0xd16 <__vector_4+0x30>
	{
		CP_TIMER2_CompareMatch_User_ptr();
 d14:	09 95       	icall
	}
}
 d16:	ff 91       	pop	r31
 d18:	ef 91       	pop	r30
 d1a:	bf 91       	pop	r27
 d1c:	af 91       	pop	r26
 d1e:	9f 91       	pop	r25
 d20:	8f 91       	pop	r24
 d22:	7f 91       	pop	r23
 d24:	6f 91       	pop	r22
 d26:	5f 91       	pop	r21
 d28:	4f 91       	pop	r20
 d2a:	3f 91       	pop	r19
 d2c:	2f 91       	pop	r18
 d2e:	0f 90       	pop	r0
 d30:	0f be       	out	0x3f, r0	; 63
 d32:	0f 90       	pop	r0
 d34:	1f 90       	pop	r1
 d36:	18 95       	reti

00000d38 <TIMER_Init>:
void TIMER_Init(TIMER_DataType Timer_Details,uint_8 inital_Value)
{
 d38:	0f 93       	push	r16
 d3a:	1f 93       	push	r17
 d3c:	cf 93       	push	r28
 d3e:	df 93       	push	r29
 d40:	00 d0       	rcall	.+0      	; 0xd42 <TIMER_Init+0xa>
 d42:	00 d0       	rcall	.+0      	; 0xd44 <TIMER_Init+0xc>
 d44:	00 d0       	rcall	.+0      	; 0xd46 <TIMER_Init+0xe>
 d46:	cd b7       	in	r28, 0x3d	; 61
 d48:	de b7       	in	r29, 0x3e	; 62
 d4a:	94 2f       	mov	r25, r20
 d4c:	49 83       	std	Y+1, r20	; 0x01
 d4e:	e5 2f       	mov	r30, r21
 d50:	5a 83       	std	Y+2, r21	; 0x02
 d52:	46 2f       	mov	r20, r22
 d54:	6b 83       	std	Y+3, r22	; 0x03
 d56:	37 2f       	mov	r19, r23
 d58:	7c 83       	std	Y+4, r23	; 0x04
 d5a:	8d 83       	std	Y+5, r24	; 0x05
	/* make temporary Register To Hold The Initiate Value */
    uint_8 TCCR_Temp = 0x00;
	uint_8 TIMSK_Temp = 0x00;
	//uint_8 TIFR_Temp  = 0x00;
	switch (Timer_Details.Timer_Number)
 d5c:	99 23       	and	r25, r25
 d5e:	39 f1       	breq	.+78     	; 0xdae <TIMER_Init+0x76>
 d60:	91 30       	cpi	r25, 0x01	; 1
 d62:	d1 f4       	brne	.+52     	; 0xd98 <TIMER_Init+0x60>
 d64:	e1 50       	subi	r30, 0x01	; 1
 d66:	e3 30       	cpi	r30, 0x03	; 3
 d68:	78 f1       	brcs	.+94     	; 0xdc8 <TIMER_Init+0x90>
 d6a:	10 e0       	ldi	r17, 0x00	; 0
			SET_BIT(TCCR_Temp,WGM20_bit);
			break;
			default:
			break;
		}
		switch(Timer_Details.Timer_CLK)
 d6c:	50 e0       	ldi	r21, 0x00	; 0
 d6e:	4b 30       	cpi	r20, 0x0B	; 11
 d70:	51 05       	cpc	r21, r1
 d72:	90 f5       	brcc	.+100    	; 0xdd8 <TIMER_Init+0xa0>
 d74:	fa 01       	movw	r30, r20
 d76:	e6 5d       	subi	r30, 0xD6	; 214
 d78:	ff 4f       	sbci	r31, 0xFF	; 255
 d7a:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__tablejump2__>
			CLEAR_BIT(TCCR_Temp,COM21_bit);
			break;
			case OC_ClearOn_Compare_match:
			case NON_inverting_mode:
			case Clear_upCount_Set_DownCount:
			GPIO_Pin_Configuration(Port_D,PIN7,OUTPUT);
 d7e:	40 e0       	ldi	r20, 0x00	; 0
 d80:	67 e0       	ldi	r22, 0x07	; 7
 d82:	80 e3       	ldi	r24, 0x30	; 48
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	2e 83       	std	Y+6, r18	; 0x06
 d88:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
			CLEAR_BIT(TCCR_Temp,COM20_bit);
 d8c:	1f 7e       	andi	r17, 0xEF	; 239
			SET_BIT  (TCCR_Temp,COM21_bit);
 d8e:	10 62       	ori	r17, 0x20	; 32
			break;
 d90:	2e 81       	ldd	r18, Y+6	; 0x06
			GPIO_Pin_Configuration(Port_D,PIN7,OUTPUT);
			SET_BIT  (TCCR_Temp,COM20_bit);
			SET_BIT  (TCCR_Temp,COM21_bit);
			break;
		}
		TCCR2 = TCCR_Temp;
 d92:	15 bd       	out	0x25, r17	; 37
		TIMSK = TIMSK_Temp;
 d94:	09 bf       	out	0x39, r16	; 57
		OCR2 = inital_Value;
 d96:	23 bd       	out	0x23, r18	; 35
		break;
	}
}
 d98:	26 96       	adiw	r28, 0x06	; 6
 d9a:	0f b6       	in	r0, 0x3f	; 63
 d9c:	f8 94       	cli
 d9e:	de bf       	out	0x3e, r29	; 62
 da0:	0f be       	out	0x3f, r0	; 63
 da2:	cd bf       	out	0x3d, r28	; 61
 da4:	df 91       	pop	r29
 da6:	cf 91       	pop	r28
 da8:	1f 91       	pop	r17
 daa:	0f 91       	pop	r16
 dac:	08 95       	ret
 dae:	e1 50       	subi	r30, 0x01	; 1
 db0:	e3 30       	cpi	r30, 0x03	; 3
 db2:	28 f1       	brcs	.+74     	; 0xdfe <TIMER_Init+0xc6>
 db4:	10 e0       	ldi	r17, 0x00	; 0
			SET_BIT(TCCR_Temp,WGM00_bit);
			break;
			default:
			break;
		}
		switch(Timer_Details.Timer_CLK)
 db6:	50 e0       	ldi	r21, 0x00	; 0
 db8:	4a 30       	cpi	r20, 0x0A	; 10
 dba:	51 05       	cpc	r21, r1
 dbc:	40 f5       	brcc	.+80     	; 0xe0e <TIMER_Init+0xd6>
 dbe:	fa 01       	movw	r30, r20
 dc0:	eb 5c       	subi	r30, 0xCB	; 203
 dc2:	ff 4f       	sbci	r31, 0xFF	; 255
 dc4:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__tablejump2__>
 dc8:	f0 e0       	ldi	r31, 0x00	; 0
 dca:	ea 55       	subi	r30, 0x5A	; 90
 dcc:	ff 4f       	sbci	r31, 0xFF	; 255
 dce:	10 81       	ld	r17, Z
			SET_BIT(TCCR_Temp,WGM20_bit);
			break;
			default:
			break;
		}
		switch(Timer_Details.Timer_CLK)
 dd0:	50 e0       	ldi	r21, 0x00	; 0
 dd2:	4b 30       	cpi	r20, 0x0B	; 11
 dd4:	51 05       	cpc	r21, r1
 dd6:	70 f2       	brcs	.-100    	; 0xd74 <TIMER_Init+0x3c>
			SET_BIT  (TCCR_Temp,CS22_bit);
			break;
			default:
			break;
		}
		SET_BIT(SREG,I_Bit);
 dd8:	9f b7       	in	r25, 0x3f	; 63
 dda:	90 68       	ori	r25, 0x80	; 128
 ddc:	9f bf       	out	0x3f, r25	; 63
		/* Set Up The Interrupt Source By Set The Bit referee To The That Source InThe TIMASK */
		switch(Timer_Details.Timer_INT_source)
 dde:	31 30       	cpi	r19, 0x01	; 1
 de0:	09 f4       	brne	.+2      	; 0xde4 <TIMER_Init+0xac>
 de2:	66 c0       	rjmp	.+204    	; 0xeb0 <TIMER_Init+0x178>
 de4:	32 30       	cpi	r19, 0x02	; 2
 de6:	09 f4       	brne	.+2      	; 0xdea <TIMER_Init+0xb2>
 de8:	61 c0       	rjmp	.+194    	; 0xeac <TIMER_Init+0x174>
}
void TIMER_Init(TIMER_DataType Timer_Details,uint_8 inital_Value)
{
	/* make temporary Register To Hold The Initiate Value */
    uint_8 TCCR_Temp = 0x00;
	uint_8 TIMSK_Temp = 0x00;
 dea:	00 e0       	ldi	r16, 0x00	; 0
			break;
			default:
			break;

		}
		switch (Timer_Details.OC_Pin_State)
 dec:	90 e0       	ldi	r25, 0x00	; 0
 dee:	88 30       	cpi	r24, 0x08	; 8
 df0:	91 05       	cpc	r25, r1
 df2:	78 f6       	brcc	.-98     	; 0xd92 <TIMER_Init+0x5a>
 df4:	fc 01       	movw	r30, r24
 df6:	e1 5c       	subi	r30, 0xC1	; 193
 df8:	ff 4f       	sbci	r31, 0xFF	; 255
 dfa:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__tablejump2__>
 dfe:	f0 e0       	ldi	r31, 0x00	; 0
 e00:	e7 55       	subi	r30, 0x57	; 87
 e02:	ff 4f       	sbci	r31, 0xFF	; 255
 e04:	10 81       	ld	r17, Z
			SET_BIT(TCCR_Temp,WGM00_bit);
			break;
			default:
			break;
		}
		switch(Timer_Details.Timer_CLK)
 e06:	50 e0       	ldi	r21, 0x00	; 0
 e08:	4a 30       	cpi	r20, 0x0A	; 10
 e0a:	51 05       	cpc	r21, r1
 e0c:	c0 f2       	brcs	.-80     	; 0xdbe <TIMER_Init+0x86>
			SET_BIT(TCCR_Temp,CS02_bit);
			break;
			default:
			break;
		}
		SET_BIT(SREG,I_Bit);
 e0e:	9f b7       	in	r25, 0x3f	; 63
 e10:	90 68       	ori	r25, 0x80	; 128
 e12:	9f bf       	out	0x3f, r25	; 63
		/* Set Up The Interrupt Source By Set The Bit referee To The That Source InThe TIMASK */
		switch(Timer_Details.Timer_INT_source)
 e14:	31 30       	cpi	r19, 0x01	; 1
 e16:	09 f4       	brne	.+2      	; 0xe1a <TIMER_Init+0xe2>
 e18:	4f c0       	rjmp	.+158    	; 0xeb8 <TIMER_Init+0x180>
 e1a:	32 30       	cpi	r19, 0x02	; 2
 e1c:	09 f4       	brne	.+2      	; 0xe20 <TIMER_Init+0xe8>
 e1e:	4a c0       	rjmp	.+148    	; 0xeb4 <TIMER_Init+0x17c>
}
void TIMER_Init(TIMER_DataType Timer_Details,uint_8 inital_Value)
{
	/* make temporary Register To Hold The Initiate Value */
    uint_8 TCCR_Temp = 0x00;
	uint_8 TIMSK_Temp = 0x00;
 e20:	00 e0       	ldi	r16, 0x00	; 0
			break;
			default:
			break;

		}
		switch (Timer_Details.OC_Pin_State)
 e22:	90 e0       	ldi	r25, 0x00	; 0
 e24:	88 30       	cpi	r24, 0x08	; 8
 e26:	91 05       	cpc	r25, r1
 e28:	78 f4       	brcc	.+30     	; 0xe48 <TIMER_Init+0x110>
 e2a:	fc 01       	movw	r30, r24
 e2c:	e9 5b       	subi	r30, 0xB9	; 185
 e2e:	ff 4f       	sbci	r31, 0xFF	; 255
 e30:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__tablejump2__>
			CLEAR_BIT(TCCR_Temp,COM01_bit);
			break;
			case OC_ClearOn_Compare_match:
			case NON_inverting_mode:
			case Clear_upCount_Set_DownCount:
			GPIO_Pin_Configuration(Port_B,PIN3,OUTPUT);
 e34:	40 e0       	ldi	r20, 0x00	; 0
 e36:	63 e0       	ldi	r22, 0x03	; 3
 e38:	86 e3       	ldi	r24, 0x36	; 54
 e3a:	90 e0       	ldi	r25, 0x00	; 0
 e3c:	2e 83       	std	Y+6, r18	; 0x06
 e3e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
			CLEAR_BIT(TCCR_Temp,COM00_bit);
 e42:	1f 7e       	andi	r17, 0xEF	; 239
			SET_BIT  (TCCR_Temp,COM01_bit);
 e44:	10 62       	ori	r17, 0x20	; 32
			break;
 e46:	2e 81       	ldd	r18, Y+6	; 0x06
			GPIO_Pin_Configuration(Port_B,PIN3,OUTPUT);
			SET_BIT  (TCCR_Temp,COM00_bit);
			SET_BIT  (TCCR_Temp,COM01_bit);
			break;
		}
		TCCR0 = TCCR_Temp;
 e48:	13 bf       	out	0x33, r17	; 51
		TIMSK = TIMSK_Temp;
 e4a:	09 bf       	out	0x39, r16	; 57
		OCR0 = inital_Value;
 e4c:	2c bf       	out	0x3c, r18	; 60
		break;
 e4e:	a4 cf       	rjmp	.-184    	; 0xd98 <TIMER_Init+0x60>
		}
		switch (Timer_Details.OC_Pin_State)
		{
			case OC_Disconnected:
			CLEAR_BIT(TCCR_Temp,COM00_bit);
			CLEAR_BIT(TCCR_Temp,COM01_bit);
 e50:	1f 7c       	andi	r17, 0xCF	; 207
			break;
 e52:	fa cf       	rjmp	.-12     	; 0xe48 <TIMER_Init+0x110>
			SET_BIT  (TCCR_Temp,COM01_bit);
			break;
			case OC_SetOn_Compare_match:
			case inverting_mode:
			case Set_upCount_Clear_DownCount:
			GPIO_Pin_Configuration(Port_B,PIN3,OUTPUT);
 e54:	40 e0       	ldi	r20, 0x00	; 0
 e56:	63 e0       	ldi	r22, 0x03	; 3
 e58:	86 e3       	ldi	r24, 0x36	; 54
 e5a:	90 e0       	ldi	r25, 0x00	; 0
 e5c:	2e 83       	std	Y+6, r18	; 0x06
 e5e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
			SET_BIT  (TCCR_Temp,COM00_bit);
			SET_BIT  (TCCR_Temp,COM01_bit);
 e62:	10 63       	ori	r17, 0x30	; 48
 e64:	2e 81       	ldd	r18, Y+6	; 0x06
			break;
 e66:	f0 cf       	rjmp	.-32     	; 0xe48 <TIMER_Init+0x110>
			case OC_Disconnected:
			CLEAR_BIT(TCCR_Temp,COM00_bit);
			CLEAR_BIT(TCCR_Temp,COM01_bit);
			break;
			case OC_Toggle:
			GPIO_Pin_Configuration(Port_B,PIN3,OUTPUT);
 e68:	40 e0       	ldi	r20, 0x00	; 0
 e6a:	63 e0       	ldi	r22, 0x03	; 3
 e6c:	86 e3       	ldi	r24, 0x36	; 54
 e6e:	90 e0       	ldi	r25, 0x00	; 0
 e70:	2e 83       	std	Y+6, r18	; 0x06
 e72:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
			SET_BIT  (TCCR_Temp,COM00_bit);
			CLEAR_BIT(TCCR_Temp,COM01_bit);
 e76:	1f 7d       	andi	r17, 0xDF	; 223
 e78:	10 61       	ori	r17, 0x10	; 16
			break;
 e7a:	2e 81       	ldd	r18, Y+6	; 0x06
 e7c:	e5 cf       	rjmp	.-54     	; 0xe48 <TIMER_Init+0x110>
			case OC_Disconnected:
			CLEAR_BIT(TCCR_Temp,COM20_bit);
			CLEAR_BIT(TCCR_Temp,COM21_bit);
			break;
			case OC_Toggle:
			GPIO_Pin_Configuration(Port_D,PIN7,OUTPUT);
 e7e:	40 e0       	ldi	r20, 0x00	; 0
 e80:	67 e0       	ldi	r22, 0x07	; 7
 e82:	80 e3       	ldi	r24, 0x30	; 48
 e84:	90 e0       	ldi	r25, 0x00	; 0
 e86:	2e 83       	std	Y+6, r18	; 0x06
 e88:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
			SET_BIT  (TCCR_Temp,COM20_bit);
			CLEAR_BIT(TCCR_Temp,COM21_bit);
 e8c:	1f 7d       	andi	r17, 0xDF	; 223
 e8e:	10 61       	ori	r17, 0x10	; 16
			break;
 e90:	2e 81       	ldd	r18, Y+6	; 0x06
 e92:	7f cf       	rjmp	.-258    	; 0xd92 <TIMER_Init+0x5a>
			SET_BIT  (TCCR_Temp,COM21_bit);
			break;
			case OC_SetOn_Compare_match:
			case inverting_mode:
			case Set_upCount_Clear_DownCount:
			GPIO_Pin_Configuration(Port_D,PIN7,OUTPUT);
 e94:	40 e0       	ldi	r20, 0x00	; 0
 e96:	67 e0       	ldi	r22, 0x07	; 7
 e98:	80 e3       	ldi	r24, 0x30	; 48
 e9a:	90 e0       	ldi	r25, 0x00	; 0
 e9c:	2e 83       	std	Y+6, r18	; 0x06
 e9e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <GPIO_Pin_Configuration>
			SET_BIT  (TCCR_Temp,COM20_bit);
			SET_BIT  (TCCR_Temp,COM21_bit);
 ea2:	10 63       	ori	r17, 0x30	; 48
 ea4:	2e 81       	ldd	r18, Y+6	; 0x06
			break;
 ea6:	75 cf       	rjmp	.-278    	; 0xd92 <TIMER_Init+0x5a>
		}
		switch (Timer_Details.OC_Pin_State)
		{
			case OC_Disconnected:
			CLEAR_BIT(TCCR_Temp,COM20_bit);
			CLEAR_BIT(TCCR_Temp,COM21_bit);
 ea8:	1f 7c       	andi	r17, 0xCF	; 207
			break;
 eaa:	73 cf       	rjmp	.-282    	; 0xd92 <TIMER_Init+0x5a>
			/* This Interrupt happened when the TCNT reach its Max then return to zero again */
			SET_BIT(TIMSK_Temp,TOIE2_bit);
			break;
			case Timer_OutPut_Compare_match:
			/* This Interrupt happened When The TCNT Reach The Value Equal The Value OnThe OCR and Return To Zero */
			SET_BIT(TIMSK_Temp,OCIE2_bit);
 eac:	00 e8       	ldi	r16, 0x80	; 128
			break;
 eae:	9e cf       	rjmp	.-196    	; 0xdec <TIMER_Init+0xb4>
		/* Set Up The Interrupt Source By Set The Bit referee To The That Source InThe TIMASK */
		switch(Timer_Details.Timer_INT_source)
		{
			case Timer_Overflow_Interrupt:
			/* This Interrupt happened when the TCNT reach its Max then return to zero again */
			SET_BIT(TIMSK_Temp,TOIE2_bit);
 eb0:	00 e4       	ldi	r16, 0x40	; 64
 eb2:	9c cf       	rjmp	.-200    	; 0xdec <TIMER_Init+0xb4>
			/* This Interrupt happened when the TCNT reach its Max then return to zero again */
			SET_BIT(TIMSK_Temp,TOIE0_bit);
			break;
			case Timer_OutPut_Compare_match:
			/* This Interrupt happened When The TCNT Reach The Value Equal The Value OnThe OCR and Return To Zero */
			SET_BIT(TIMSK_Temp,OCIE0_bit);
 eb4:	02 e0       	ldi	r16, 0x02	; 2
			break;
 eb6:	b5 cf       	rjmp	.-150    	; 0xe22 <TIMER_Init+0xea>
		/* Set Up The Interrupt Source By Set The Bit referee To The That Source InThe TIMASK */
		switch(Timer_Details.Timer_INT_source)
		{
			case Timer_Overflow_Interrupt:
			/* This Interrupt happened when the TCNT reach its Max then return to zero again */
			SET_BIT(TIMSK_Temp,TOIE0_bit);
 eb8:	01 e0       	ldi	r16, 0x01	; 1
 eba:	b3 cf       	rjmp	.-154    	; 0xe22 <TIMER_Init+0xea>
			SET_BIT  (TCCR_Temp,CS02_bit);
			break;
			case External_Clock_Rising_edge:
			SET_BIT(TCCR_Temp,CS00_bit);
			SET_BIT(TCCR_Temp,CS01_bit);
			SET_BIT(TCCR_Temp,CS02_bit);
 ebc:	17 60       	ori	r17, 0x07	; 7
			break;
 ebe:	a7 cf       	rjmp	.-178    	; 0xe0e <TIMER_Init+0xd6>
			SET_BIT  (TCCR_Temp,CS00_bit);
			CLEAR_BIT(TCCR_Temp,CS01_bit);
			SET_BIT  (TCCR_Temp,CS02_bit);
			break;
			case External_Clock_falling_edge:
			CLEAR_BIT(TCCR_Temp,CS00_bit);
 ec0:	1e 7f       	andi	r17, 0xFE	; 254
			SET_BIT  (TCCR_Temp,CS01_bit);
			SET_BIT  (TCCR_Temp,CS02_bit);
 ec2:	16 60       	ori	r17, 0x06	; 6
			break;
 ec4:	a4 cf       	rjmp	.-184    	; 0xe0e <TIMER_Init+0xd6>
			SET_BIT  (TCCR_Temp,CS02_bit);
			break;
			case Clk_1024:
			//TCCR0= (1<<CS00_bit)|(1<<CS02_bit);
			SET_BIT  (TCCR_Temp,CS00_bit);
			CLEAR_BIT(TCCR_Temp,CS01_bit);
 ec6:	1d 7f       	andi	r17, 0xFD	; 253
			SET_BIT  (TCCR_Temp,CS02_bit);
 ec8:	15 60       	ori	r17, 0x05	; 5
			break;
 eca:	a1 cf       	rjmp	.-190    	; 0xe0e <TIMER_Init+0xd6>
			SET_BIT(TCCR_Temp,CS01_bit);
			CLEAR_BIT(TCCR_Temp,CS02_bit);
			break;
			case Clk_256:
			CLEAR_BIT(TCCR_Temp,CS00_bit);
			CLEAR_BIT(TCCR_Temp,CS01_bit);
 ecc:	1c 7f       	andi	r17, 0xFC	; 252
			SET_BIT  (TCCR_Temp,CS02_bit);
 ece:	14 60       	ori	r17, 0x04	; 4
			break;
 ed0:	9e cf       	rjmp	.-196    	; 0xe0e <TIMER_Init+0xd6>
			CLEAR_BIT(TCCR_Temp,CS02_bit);
			break;
			case Clk_64:
			SET_BIT(TCCR_Temp,CS00_bit);
			SET_BIT(TCCR_Temp,CS01_bit);
			CLEAR_BIT(TCCR_Temp,CS02_bit);
 ed2:	1b 7f       	andi	r17, 0xFB	; 251
 ed4:	13 60       	ori	r17, 0x03	; 3
			break;
 ed6:	9b cf       	rjmp	.-202    	; 0xe0e <TIMER_Init+0xd6>
			CLEAR_BIT(TCCR_Temp,CS02_bit);
			break;
			case Clk_8:
			CLEAR_BIT(TCCR_Temp,CS00_bit);
			SET_BIT  (TCCR_Temp,CS01_bit);
			CLEAR_BIT(TCCR_Temp,CS02_bit);
 ed8:	1a 7f       	andi	r17, 0xFA	; 250
 eda:	12 60       	ori	r17, 0x02	; 2
			break;
 edc:	98 cf       	rjmp	.-208    	; 0xe0e <TIMER_Init+0xd6>
			CLEAR_BIT(TCCR_Temp,CS02_bit);
			break;
			case No_Prescaling:
			SET_BIT  (TCCR_Temp,CS00_bit);
			CLEAR_BIT(TCCR_Temp,CS01_bit);
			CLEAR_BIT(TCCR_Temp,CS02_bit);
 ede:	19 7f       	andi	r17, 0xF9	; 249
 ee0:	11 60       	ori	r17, 0x01	; 1
			break;
 ee2:	95 cf       	rjmp	.-214    	; 0xe0e <TIMER_Init+0xd6>
		switch(Timer_Details.Timer_CLK)
		{
			case No_Clock_source :
			CLEAR_BIT(TCCR_Temp,CS00_bit);
			CLEAR_BIT(TCCR_Temp,CS01_bit);
			CLEAR_BIT(TCCR_Temp,CS02_bit);
 ee4:	18 7f       	andi	r17, 0xF8	; 248
			break;
 ee6:	93 cf       	rjmp	.-218    	; 0xe0e <TIMER_Init+0xd6>
			SET_BIT  (TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
			CLEAR_BIT(TCCR_Temp,CS22_bit);
			break;
			case Timer2_OneSec_CLK:
			SET_BIT(ASSR,AS2_bit);
 ee8:	92 b5       	in	r25, 0x22	; 34
 eea:	90 61       	ori	r25, 0x10	; 16
 eec:	92 bd       	out	0x22, r25	; 34
			SET_BIT(TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
 eee:	1d 7f       	andi	r17, 0xFD	; 253
			SET_BIT(TCCR_Temp,CS22_bit);
 ef0:	15 60       	ori	r17, 0x05	; 5
			break;
 ef2:	72 cf       	rjmp	.-284    	; 0xdd8 <TIMER_Init+0xa0>
			SET_BIT  (TCCR_Temp,CS22_bit);
			break;
			case Clk_1024:
			SET_BIT  (TCCR_Temp,CS20_bit);
			SET_BIT(TCCR_Temp,CS21_bit);
			SET_BIT  (TCCR_Temp,CS22_bit);
 ef4:	17 60       	ori	r17, 0x07	; 7
			break;
 ef6:	70 cf       	rjmp	.-288    	; 0xdd8 <TIMER_Init+0xa0>
			SET_BIT(TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
			SET_BIT  (TCCR_Temp,CS22_bit);
			break;
			case Clk_256:
			CLEAR_BIT(TCCR_Temp,CS20_bit);
 ef8:	1e 7f       	andi	r17, 0xFE	; 254
			SET_BIT(TCCR_Temp,CS21_bit);
			SET_BIT  (TCCR_Temp,CS22_bit);
 efa:	16 60       	ori	r17, 0x06	; 6
			break;
 efc:	6d cf       	rjmp	.-294    	; 0xdd8 <TIMER_Init+0xa0>
			CLEAR_BIT(TCCR_Temp,CS21_bit);
			SET_BIT  (TCCR_Temp,CS22_bit);
			break;
			case CLK_128:
			SET_BIT(TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
 efe:	1d 7f       	andi	r17, 0xFD	; 253
			SET_BIT  (TCCR_Temp,CS22_bit);
 f00:	15 60       	ori	r17, 0x05	; 5
			break;
 f02:	6a cf       	rjmp	.-300    	; 0xdd8 <TIMER_Init+0xa0>
			SET_BIT(TCCR_Temp,CS21_bit);
			CLEAR_BIT(TCCR_Temp,CS22_bit);
			break;
			case Clk_64:
			CLEAR_BIT(TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
 f04:	1c 7f       	andi	r17, 0xFC	; 252
			SET_BIT  (TCCR_Temp,CS22_bit);
 f06:	14 60       	ori	r17, 0x04	; 4
			break;
 f08:	67 cf       	rjmp	.-306    	; 0xdd8 <TIMER_Init+0xa0>
			CLEAR_BIT(TCCR_Temp,CS22_bit);
			break;
			case CLK_32:
			SET_BIT(TCCR_Temp,CS20_bit);
			SET_BIT(TCCR_Temp,CS21_bit);
			CLEAR_BIT(TCCR_Temp,CS22_bit);
 f0a:	1b 7f       	andi	r17, 0xFB	; 251
 f0c:	13 60       	ori	r17, 0x03	; 3
			break;
 f0e:	64 cf       	rjmp	.-312    	; 0xdd8 <TIMER_Init+0xa0>
			SET_BIT(TCCR_Temp,CS22_bit);
			break;
			case Clk_8:
			CLEAR_BIT(TCCR_Temp,CS20_bit);
			SET_BIT  (TCCR_Temp,CS21_bit);
			CLEAR_BIT(TCCR_Temp,CS22_bit);
 f10:	1a 7f       	andi	r17, 0xFA	; 250
 f12:	12 60       	ori	r17, 0x02	; 2
			break;
 f14:	61 cf       	rjmp	.-318    	; 0xdd8 <TIMER_Init+0xa0>
			CLEAR_BIT(TCCR_Temp,CS22_bit);
			break;
			case No_Prescaling:
			SET_BIT  (TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
			CLEAR_BIT(TCCR_Temp,CS22_bit);
 f16:	19 7f       	andi	r17, 0xF9	; 249
 f18:	11 60       	ori	r17, 0x01	; 1
			break;
 f1a:	5e cf       	rjmp	.-324    	; 0xdd8 <TIMER_Init+0xa0>
		switch(Timer_Details.Timer_CLK)
		{
			case No_Clock_source :
			CLEAR_BIT(TCCR_Temp,CS20_bit);
			CLEAR_BIT(TCCR_Temp,CS21_bit);
			CLEAR_BIT(TCCR_Temp,CS22_bit);
 f1c:	18 7f       	andi	r17, 0xF8	; 248
			break;
 f1e:	5c cf       	rjmp	.-328    	; 0xdd8 <TIMER_Init+0xa0>

00000f20 <__tablejump2__>:
 f20:	ee 0f       	add	r30, r30
 f22:	ff 1f       	adc	r31, r31

00000f24 <__tablejump__>:
 f24:	05 90       	lpm	r0, Z+
 f26:	f4 91       	lpm	r31, Z
 f28:	e0 2d       	mov	r30, r0
 f2a:	09 94       	ijmp

00000f2c <_exit>:
 f2c:	f8 94       	cli

00000f2e <__stop_program>:
 f2e:	ff cf       	rjmp	.-2      	; 0xf2e <__stop_program>
